// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [3]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/v1/"
			origElem := elem
			if l := len("/api/v1/"); len(elem) >= l && elem[0:l] == "/api/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '2': // Prefix: "2fa/verify"
					origElem := elem
					if l := len("2fa/verify"); len(elem) >= l && elem[0:l] == "2fa/verify" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleVerify2FARequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				case 'f': // Prefix: "forgot-password"
					origElem := elem
					if l := len("forgot-password"); len(elem) >= l && elem[0:l] == "forgot-password" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleForgotPasswordRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				case 'l': // Prefix: "login"
					origElem := elem
					if l := len("login"); len(elem) >= l && elem[0:l] == "login" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleLoginRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				case 'r': // Prefix: "re"
					origElem := elem
					if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'f': // Prefix: "fresh"
						origElem := elem
						if l := len("fresh"); len(elem) >= l && elem[0:l] == "fresh" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleRefreshTokenRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 's': // Prefix: "set-password"
						origElem := elem
						if l := len("set-password"); len(elem) >= l && elem[0:l] == "set-password" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleResetPasswordRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'e': // Prefix: "events/timeseries"
				origElem := elem
				if l := len("events/timeseries"); len(elem) >= l && elem[0:l] == "events/timeseries" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetEventsTimeseriesRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'i': // Prefix: "issues"
				origElem := elem
				if l := len("issues"); len(elem) >= l && elem[0:l] == "issues" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListIssuesRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'r': // Prefix: "recent"
						origElem := elem
						if l := len("recent"); len(elem) >= l && elem[0:l] == "recent" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetRecentIssuesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 't': // Prefix: "timeseries"
						origElem := elem
						if l := len("timeseries"); len(elem) >= l && elem[0:l] == "timeseries" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetIssuesTimeseriesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'n': // Prefix: "notifications"
				origElem := elem
				if l := len("notifications"); len(elem) >= l && elem[0:l] == "notifications" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetUserNotificationsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'r': // Prefix: "read-all"
						origElem := elem
						if l := len("read-all"); len(elem) >= l && elem[0:l] == "read-all" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "PUT":
								s.handleMarkAllNotificationsAsReadRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "PUT")
							}

							return
						}

						elem = origElem
					case 'u': // Prefix: "unread-count"
						origElem := elem
						if l := len("unread-count"); len(elem) >= l && elem[0:l] == "unread-count" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetUnreadNotificationsCountRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}
					// Param: "notification_id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/read"
						origElem := elem
						if l := len("/read"); len(elem) >= l && elem[0:l] == "/read" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "PUT":
								s.handleMarkNotificationAsReadRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "PUT")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'p': // Prefix: "projects"
				origElem := elem
				if l := len("projects"); len(elem) >= l && elem[0:l] == "projects" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListProjectsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "add"
						origElem := elem
						if l := len("add"); len(elem) >= l && elem[0:l] == "add" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAddProjectRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 'r': // Prefix: "recent"
						origElem := elem
						if l := len("recent"); len(elem) >= l && elem[0:l] == "recent" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleRecentProjectsListRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}
					// Param: "project_id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleArchiveProjectRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetProjectRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateProjectRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "analytics/"
							origElem := elem
							if l := len("analytics/"); len(elem) >= l && elem[0:l] == "analytics/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'r': // Prefix: "releases"
								origElem := elem
								if l := len("releases"); len(elem) >= l && elem[0:l] == "releases" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetProjectReleasesAnalyticsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "compare"
										origElem := elem
										if l := len("compare"); len(elem) >= l && elem[0:l] == "compare" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleCompareProjectReleasesAnalyticsRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									}
									// Param: "version"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetProjectReleaseAnalyticsDetailsRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "segments"
								origElem := elem
								if l := len("segments"); len(elem) >= l && elem[0:l] == "segments" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetProjectReleaseSegmentsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 't': // Prefix: "traffic"
								origElem := elem
								if l := len("traffic"); len(elem) >= l && elem[0:l] == "traffic" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetProjectReleaseErrorsTimeseriesRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 'i': // Prefix: "issues/"
							origElem := elem
							if l := len("issues/"); len(elem) >= l && elem[0:l] == "issues/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "issue_id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetIssueRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "change-status"
									origElem := elem
									if l := len("change-status"); len(elem) >= l && elem[0:l] == "change-status" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "PUT":
											s.handleChangeIssueStatusRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "PUT")
										}

										return
									}

									elem = origElem
								case 'e': // Prefix: "events/timeseries"
									origElem := elem
									if l := len("events/timeseries"); len(elem) >= l && elem[0:l] == "events/timeseries" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetProjectIssueEventsTimeseriesRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								case 't': // Prefix: "timeseries"
									origElem := elem
									if l := len("timeseries"); len(elem) >= l && elem[0:l] == "timeseries" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetProjectIssueTimeseriesRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'n': // Prefix: "notification-settings"
							origElem := elem
							if l := len("notification-settings"); len(elem) >= l && elem[0:l] == "notification-settings" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleListNotificationSettingsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "POST":
									s.handleCreateNotificationSettingRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "setting_id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch r.Method {
									case "DELETE":
										s.handleDeleteNotificationSettingRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleGetNotificationSettingRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									case "PUT":
										s.handleUpdateNotificationSettingRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET,PUT")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'r': // Prefix: "rules"
										origElem := elem
										if l := len("rules"); len(elem) >= l && elem[0:l] == "rules" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListNotificationRulesRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											case "POST":
												s.handleCreateNotificationRuleRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET,POST")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "rule_id"
											// Leaf parameter
											args[2] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "DELETE":
													s.handleDeleteNotificationRuleRequest([3]string{
														args[0],
														args[1],
														args[2],
													}, elemIsEscaped, w, r)
												case "GET":
													s.handleGetNotificationRuleRequest([3]string{
														args[0],
														args[1],
														args[2],
													}, elemIsEscaped, w, r)
												case "PUT":
													s.handleUpdateNotificationRuleRequest([3]string{
														args[0],
														args[1],
														args[2],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "DELETE,GET,PUT")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									case 't': // Prefix: "test"
										origElem := elem
										if l := len("test"); len(elem) >= l && elem[0:l] == "test" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleSendTestNotificationRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 's': // Prefix: "stats"
							origElem := elem
							if l := len("stats"); len(elem) >= l && elem[0:l] == "stats" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetProjectStatsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 't': // Prefix: "team"
							origElem := elem
							if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetProjectTeamRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "teams"
				origElem := elem
				if l := len("teams"); len(elem) >= l && elem[0:l] == "teams" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListTeamsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateTeamRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "check-exists/"
						origElem := elem
						if l := len("check-exists/"); len(elem) >= l && elem[0:l] == "check-exists/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "team_name"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleCheckTeamExistsRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}
					// Param: "team_id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteTeamRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetTeamRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/members"
						origElem := elem
						if l := len("/members"); len(elem) >= l && elem[0:l] == "/members" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleAddTeamMemberRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "user_id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleRemoveTeamMemberRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/role"
								origElem := elem
								if l := len("/role"); len(elem) >= l && elem[0:l] == "/role" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "PUT":
										s.handleChangeTeamMemberRoleRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "PUT")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'u': // Prefix: "users"
				origElem := elem
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListUsersRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateUserRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'm': // Prefix: "me"
						origElem := elem
						if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetCurrentUserRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '2': // Prefix: "2fa/"
								origElem := elem
								if l := len("2fa/"); len(elem) >= l && elem[0:l] == "2fa/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "confirm"
									origElem := elem
									if l := len("confirm"); len(elem) >= l && elem[0:l] == "confirm" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleConfirm2FARequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								case 'd': // Prefix: "disable"
									origElem := elem
									if l := len("disable"); len(elem) >= l && elem[0:l] == "disable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleDisable2FARequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								case 'r': // Prefix: "reset"
									origElem := elem
									if l := len("reset"); len(elem) >= l && elem[0:l] == "reset" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleReset2FARequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								case 's': // Prefix: "se"
									origElem := elem
									if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'n': // Prefix: "nd_code"
										origElem := elem
										if l := len("nd_code"); len(elem) >= l && elem[0:l] == "nd_code" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleSend2FACodeRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									case 't': // Prefix: "tup"
										origElem := elem
										if l := len("tup"); len(elem) >= l && elem[0:l] == "tup" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleSetup2FARequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'c': // Prefix: "change-password"
								origElem := elem
								if l := len("change-password"); len(elem) >= l && elem[0:l] == "change-password" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleUserChangeMyPasswordRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 't': // Prefix: "team/"
						origElem := elem
						if l := len("team/"); len(elem) >= l && elem[0:l] == "team/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "team_id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/list"
							origElem := elem
							if l := len("/list"); len(elem) >= l && elem[0:l] == "/list" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListUsersForTeamRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}
					// Param: "user_id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteUserRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "active"
							origElem := elem
							if l := len("active"); len(elem) >= l && elem[0:l] == "active" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PUT":
									s.handleSetUserActiveStatusRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PUT")
								}

								return
							}

							elem = origElem
						case 's': // Prefix: "superuser"
							origElem := elem
							if l := len("superuser"); len(elem) >= l && elem[0:l] == "superuser" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PUT":
									s.handleSetSuperuserStatusRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PUT")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'v': // Prefix: "versions"
				origElem := elem
				if l := len("versions"); len(elem) >= l && elem[0:l] == "versions" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetVersionsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [3]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/v1/"
			origElem := elem
			if l := len("/api/v1/"); len(elem) >= l && elem[0:l] == "/api/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '2': // Prefix: "2fa/verify"
					origElem := elem
					if l := len("2fa/verify"); len(elem) >= l && elem[0:l] == "2fa/verify" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = Verify2FAOperation
							r.summary = "Verify 2FA-code on login"
							r.operationID = "Verify2FA"
							r.pathPattern = "/api/v1/auth/2fa/verify"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'f': // Prefix: "forgot-password"
					origElem := elem
					if l := len("forgot-password"); len(elem) >= l && elem[0:l] == "forgot-password" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = ForgotPasswordOperation
							r.summary = "Request a password reset"
							r.operationID = "ForgotPassword"
							r.pathPattern = "/api/v1/auth/forgot-password"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'l': // Prefix: "login"
					origElem := elem
					if l := len("login"); len(elem) >= l && elem[0:l] == "login" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = LoginOperation
							r.summary = "Authenticate user and get access token"
							r.operationID = "Login"
							r.pathPattern = "/api/v1/auth/login"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'r': // Prefix: "re"
					origElem := elem
					if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'f': // Prefix: "fresh"
						origElem := elem
						if l := len("fresh"); len(elem) >= l && elem[0:l] == "fresh" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = RefreshTokenOperation
								r.summary = "Refresh access token"
								r.operationID = "RefreshToken"
								r.pathPattern = "/api/v1/auth/refresh"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 's': // Prefix: "set-password"
						origElem := elem
						if l := len("set-password"); len(elem) >= l && elem[0:l] == "set-password" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = ResetPasswordOperation
								r.summary = "Reset password using token"
								r.operationID = "ResetPassword"
								r.pathPattern = "/api/v1/auth/reset-password"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'e': // Prefix: "events/timeseries"
				origElem := elem
				if l := len("events/timeseries"); len(elem) >= l && elem[0:l] == "events/timeseries" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = GetEventsTimeseriesOperation
						r.summary = "Get events timeseries"
						r.operationID = "GetEventsTimeseries"
						r.pathPattern = "/api/v1/events/timeseries"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'i': // Prefix: "issues"
				origElem := elem
				if l := len("issues"); len(elem) >= l && elem[0:l] == "issues" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = ListIssuesOperation
						r.summary = "Get all issues across all projects"
						r.operationID = "ListIssues"
						r.pathPattern = "/api/v1/issues"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'r': // Prefix: "recent"
						origElem := elem
						if l := len("recent"); len(elem) >= l && elem[0:l] == "recent" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetRecentIssuesOperation
								r.summary = "Get recent issues across all projects"
								r.operationID = "GetRecentIssues"
								r.pathPattern = "/api/v1/issues/recent"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 't': // Prefix: "timeseries"
						origElem := elem
						if l := len("timeseries"); len(elem) >= l && elem[0:l] == "timeseries" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetIssuesTimeseriesOperation
								r.summary = "Get issues timeseries"
								r.operationID = "GetIssuesTimeseries"
								r.pathPattern = "/api/v1/issues/timeseries"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'n': // Prefix: "notifications"
				origElem := elem
				if l := len("notifications"); len(elem) >= l && elem[0:l] == "notifications" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetUserNotificationsOperation
						r.summary = "Get user notifications"
						r.operationID = "GetUserNotifications"
						r.pathPattern = "/api/v1/notifications"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'r': // Prefix: "read-all"
						origElem := elem
						if l := len("read-all"); len(elem) >= l && elem[0:l] == "read-all" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "PUT":
								r.name = MarkAllNotificationsAsReadOperation
								r.summary = "Mark all notifications as read"
								r.operationID = "MarkAllNotificationsAsRead"
								r.pathPattern = "/api/v1/notifications/read-all"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'u': // Prefix: "unread-count"
						origElem := elem
						if l := len("unread-count"); len(elem) >= l && elem[0:l] == "unread-count" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetUnreadNotificationsCountOperation
								r.summary = "Get unread notifications count"
								r.operationID = "GetUnreadNotificationsCount"
								r.pathPattern = "/api/v1/notifications/unread-count"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}
					// Param: "notification_id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/read"
						origElem := elem
						if l := len("/read"); len(elem) >= l && elem[0:l] == "/read" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "PUT":
								r.name = MarkNotificationAsReadOperation
								r.summary = "Mark notification as read"
								r.operationID = "MarkNotificationAsRead"
								r.pathPattern = "/api/v1/notifications/{notification_id}/read"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'p': // Prefix: "projects"
				origElem := elem
				if l := len("projects"); len(elem) >= l && elem[0:l] == "projects" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = ListProjectsOperation
						r.summary = "Get projects list"
						r.operationID = "ListProjects"
						r.pathPattern = "/api/v1/projects"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "add"
						origElem := elem
						if l := len("add"); len(elem) >= l && elem[0:l] == "add" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = AddProjectOperation
								r.summary = "Add new project"
								r.operationID = "addProject"
								r.pathPattern = "/api/v1/projects/add"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'r': // Prefix: "recent"
						origElem := elem
						if l := len("recent"); len(elem) >= l && elem[0:l] == "recent" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = RecentProjectsListOperation
								r.summary = "Get recent projects list"
								r.operationID = "RecentProjectsList"
								r.pathPattern = "/api/v1/projects/recent"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}
					// Param: "project_id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = ArchiveProjectOperation
							r.summary = "Archive a project"
							r.operationID = "ArchiveProject"
							r.pathPattern = "/api/v1/projects/{project_id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetProjectOperation
							r.summary = "Get project details"
							r.operationID = "GetProject"
							r.pathPattern = "/api/v1/projects/{project_id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = UpdateProjectOperation
							r.summary = "Update project name and description"
							r.operationID = "UpdateProject"
							r.pathPattern = "/api/v1/projects/{project_id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "analytics/"
							origElem := elem
							if l := len("analytics/"); len(elem) >= l && elem[0:l] == "analytics/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'r': // Prefix: "releases"
								origElem := elem
								if l := len("releases"); len(elem) >= l && elem[0:l] == "releases" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = GetProjectReleasesAnalyticsOperation
										r.summary = "Get analytics summary for all releases in project"
										r.operationID = "GetProjectReleasesAnalytics"
										r.pathPattern = "/api/v1/projects/{project_id}/analytics/releases"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "compare"
										origElem := elem
										if l := len("compare"); len(elem) >= l && elem[0:l] == "compare" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = CompareProjectReleasesAnalyticsOperation
												r.summary = "Compare two releases analytics"
												r.operationID = "CompareProjectReleasesAnalytics"
												r.pathPattern = "/api/v1/projects/{project_id}/analytics/releases/compare"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}
									// Param: "version"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GetProjectReleaseAnalyticsDetailsOperation
											r.summary = "Get analytics details for a specific release"
											r.operationID = "GetProjectReleaseAnalyticsDetails"
											r.pathPattern = "/api/v1/projects/{project_id}/analytics/releases/{version}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "segments"
								origElem := elem
								if l := len("segments"); len(elem) >= l && elem[0:l] == "segments" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GetProjectReleaseSegmentsOperation
										r.summary = "Get user segments analytics for a release"
										r.operationID = "GetProjectReleaseSegments"
										r.pathPattern = "/api/v1/projects/{project_id}/analytics/segments"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 't': // Prefix: "traffic"
								origElem := elem
								if l := len("traffic"); len(elem) >= l && elem[0:l] == "traffic" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GetProjectReleaseErrorsTimeseriesOperation
										r.summary = "Get errors timeseries for a release"
										r.operationID = "GetProjectReleaseErrorsTimeseries"
										r.pathPattern = "/api/v1/projects/{project_id}/analytics/traffic"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 'i': // Prefix: "issues/"
							origElem := elem
							if l := len("issues/"); len(elem) >= l && elem[0:l] == "issues/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "issue_id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = GetIssueOperation
									r.summary = "Get details of a specific issue"
									r.operationID = "GetIssue"
									r.pathPattern = "/api/v1/projects/{project_id}/issues/{issue_id}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "change-status"
									origElem := elem
									if l := len("change-status"); len(elem) >= l && elem[0:l] == "change-status" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "PUT":
											r.name = ChangeIssueStatusOperation
											r.summary = "Change issue status"
											r.operationID = "changeIssueStatus"
											r.pathPattern = "/api/v1/projects/{project_id}/issues/{issue_id}/change-status"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'e': // Prefix: "events/timeseries"
									origElem := elem
									if l := len("events/timeseries"); len(elem) >= l && elem[0:l] == "events/timeseries" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GetProjectIssueEventsTimeseriesOperation
											r.summary = "Get timeseries of events for a specific issue inside a project"
											r.operationID = "GetProjectIssueEventsTimeseries"
											r.pathPattern = "/api/v1/projects/{project_id}/issues/{issue_id}/events/timeseries"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 't': // Prefix: "timeseries"
									origElem := elem
									if l := len("timeseries"); len(elem) >= l && elem[0:l] == "timeseries" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GetProjectIssueTimeseriesOperation
											r.summary = "Get timeseries for a specific issue inside a project"
											r.operationID = "GetProjectIssueTimeseries"
											r.pathPattern = "/api/v1/projects/{project_id}/issues/{issue_id}/timeseries"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'n': // Prefix: "notification-settings"
							origElem := elem
							if l := len("notification-settings"); len(elem) >= l && elem[0:l] == "notification-settings" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = ListNotificationSettingsOperation
									r.summary = "List all notification settings for a project"
									r.operationID = "ListNotificationSettings"
									r.pathPattern = "/api/v1/projects/{project_id}/notification-settings"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									r.name = CreateNotificationSettingOperation
									r.summary = "Create a new notification setting"
									r.operationID = "CreateNotificationSetting"
									r.pathPattern = "/api/v1/projects/{project_id}/notification-settings"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "setting_id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										r.name = DeleteNotificationSettingOperation
										r.summary = "Delete a notification setting"
										r.operationID = "DeleteNotificationSetting"
										r.pathPattern = "/api/v1/projects/{project_id}/notification-settings/{setting_id}"
										r.args = args
										r.count = 2
										return r, true
									case "GET":
										r.name = GetNotificationSettingOperation
										r.summary = "Get a specific notification setting"
										r.operationID = "GetNotificationSetting"
										r.pathPattern = "/api/v1/projects/{project_id}/notification-settings/{setting_id}"
										r.args = args
										r.count = 2
										return r, true
									case "PUT":
										r.name = UpdateNotificationSettingOperation
										r.summary = "Update a notification setting"
										r.operationID = "UpdateNotificationSetting"
										r.pathPattern = "/api/v1/projects/{project_id}/notification-settings/{setting_id}"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'r': // Prefix: "rules"
										origElem := elem
										if l := len("rules"); len(elem) >= l && elem[0:l] == "rules" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = ListNotificationRulesOperation
												r.summary = "List all notification rules for notification settings of project"
												r.operationID = "ListNotificationRules"
												r.pathPattern = "/api/v1/projects/{project_id}/notification-settings/{setting_id}/rules"
												r.args = args
												r.count = 2
												return r, true
											case "POST":
												r.name = CreateNotificationRuleOperation
												r.summary = "Create a new notification rule"
												r.operationID = "CreateNotificationRule"
												r.pathPattern = "/api/v1/projects/{project_id}/notification-settings/{setting_id}/rules"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "rule_id"
											// Leaf parameter
											args[2] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "DELETE":
													r.name = DeleteNotificationRuleOperation
													r.summary = "Delete a notification rule"
													r.operationID = "DeleteNotificationRule"
													r.pathPattern = "/api/v1/projects/{project_id}/notification-settings/{setting_id}/rules/{rule_id}"
													r.args = args
													r.count = 3
													return r, true
												case "GET":
													r.name = GetNotificationRuleOperation
													r.summary = "Get a specific notification rule"
													r.operationID = "GetNotificationRule"
													r.pathPattern = "/api/v1/projects/{project_id}/notification-settings/{setting_id}/rules/{rule_id}"
													r.args = args
													r.count = 3
													return r, true
												case "PUT":
													r.name = UpdateNotificationRuleOperation
													r.summary = "Update a notification rule"
													r.operationID = "UpdateNotificationRule"
													r.pathPattern = "/api/v1/projects/{project_id}/notification-settings/{setting_id}/rules/{rule_id}"
													r.args = args
													r.count = 3
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									case 't': // Prefix: "test"
										origElem := elem
										if l := len("test"); len(elem) >= l && elem[0:l] == "test" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = SendTestNotificationOperation
												r.summary = "Send test notification"
												r.operationID = "sendTestNotification"
												r.pathPattern = "/api/v1/projects/{project_id}/notification-settings/{setting_id}/test"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 's': // Prefix: "stats"
							origElem := elem
							if l := len("stats"); len(elem) >= l && elem[0:l] == "stats" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetProjectStatsOperation
									r.summary = "Get project statistics"
									r.operationID = "GetProjectStats"
									r.pathPattern = "/api/v1/projects/{project_id}/stats"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 't': // Prefix: "team"
							origElem := elem
							if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetProjectTeamOperation
									r.summary = "Get project team"
									r.operationID = "GetProjectTeam"
									r.pathPattern = "/api/v1/projects/{project_id}/team"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "teams"
				origElem := elem
				if l := len("teams"); len(elem) >= l && elem[0:l] == "teams" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = ListTeamsOperation
						r.summary = "List all teams"
						r.operationID = "ListTeams"
						r.pathPattern = "/api/v1/teams"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateTeamOperation
						r.summary = "Create a new team"
						r.operationID = "CreateTeam"
						r.pathPattern = "/api/v1/teams"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "check-exists/"
						origElem := elem
						if l := len("check-exists/"); len(elem) >= l && elem[0:l] == "check-exists/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "team_name"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = CheckTeamExistsOperation
								r.summary = "Check if a team exists by name"
								r.operationID = "CheckTeamExists"
								r.pathPattern = "/api/v1/teams/check-exists/{team_name}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}
					// Param: "team_id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = DeleteTeamOperation
							r.summary = "Delete a team"
							r.operationID = "DeleteTeam"
							r.pathPattern = "/api/v1/teams/{team_id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetTeamOperation
							r.summary = "Get team details"
							r.operationID = "GetTeam"
							r.pathPattern = "/api/v1/teams/{team_id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/members"
						origElem := elem
						if l := len("/members"); len(elem) >= l && elem[0:l] == "/members" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = AddTeamMemberOperation
								r.summary = "Add a user to a team"
								r.operationID = "AddTeamMember"
								r.pathPattern = "/api/v1/teams/{team_id}/members"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "user_id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = RemoveTeamMemberOperation
									r.summary = "Remove a user from a team (or self-leave)"
									r.operationID = "RemoveTeamMember"
									r.pathPattern = "/api/v1/teams/{team_id}/members/{user_id}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/role"
								origElem := elem
								if l := len("/role"); len(elem) >= l && elem[0:l] == "/role" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "PUT":
										r.name = ChangeTeamMemberRoleOperation
										r.summary = "Change team member role"
										r.operationID = "ChangeTeamMemberRole"
										r.pathPattern = "/api/v1/teams/{team_id}/members/{user_id}/role"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'u': // Prefix: "users"
				origElem := elem
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = ListUsersOperation
						r.summary = "List all users (superuser only)"
						r.operationID = "ListUsers"
						r.pathPattern = "/api/v1/users"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateUserOperation
						r.summary = "Create a new user (superuser only)"
						r.operationID = "CreateUser"
						r.pathPattern = "/api/v1/users"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'm': // Prefix: "me"
						origElem := elem
						if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GetCurrentUserOperation
								r.summary = "Get current user information"
								r.operationID = "GetCurrentUser"
								r.pathPattern = "/api/v1/users/me"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '2': // Prefix: "2fa/"
								origElem := elem
								if l := len("2fa/"); len(elem) >= l && elem[0:l] == "2fa/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "confirm"
									origElem := elem
									if l := len("confirm"); len(elem) >= l && elem[0:l] == "confirm" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = Confirm2FAOperation
											r.summary = "Approve enable 2FA (code from app)"
											r.operationID = "Confirm2FA"
											r.pathPattern = "/api/v1/users/me/2fa/confirm"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'd': // Prefix: "disable"
									origElem := elem
									if l := len("disable"); len(elem) >= l && elem[0:l] == "disable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = Disable2FAOperation
											r.summary = "Disable 2FA (using email-confirmation)"
											r.operationID = "Disable2FA"
											r.pathPattern = "/api/v1/users/me/2fa/disable"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'r': // Prefix: "reset"
									origElem := elem
									if l := len("reset"); len(elem) >= l && elem[0:l] == "reset" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = Reset2FAOperation
											r.summary = "Reset/generate secret 2FA (using email-confirmation)"
											r.operationID = "Reset2FA"
											r.pathPattern = "/api/v1/users/me/2fa/reset"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 's': // Prefix: "se"
									origElem := elem
									if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'n': // Prefix: "nd_code"
										origElem := elem
										if l := len("nd_code"); len(elem) >= l && elem[0:l] == "nd_code" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = Send2FACodeOperation
												r.summary = "Send 2FA email code for disable/reset"
												r.operationID = "send2FACode"
												r.pathPattern = "/api/v1/users/me/2fa/send_code"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 't': // Prefix: "tup"
										origElem := elem
										if l := len("tup"); len(elem) >= l && elem[0:l] == "tup" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = Setup2FAOperation
												r.summary = "Begin setup 2FA (generate secret and QR-code)"
												r.operationID = "Setup2FA"
												r.pathPattern = "/api/v1/users/me/2fa/setup"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'c': // Prefix: "change-password"
								origElem := elem
								if l := len("change-password"); len(elem) >= l && elem[0:l] == "change-password" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = UserChangeMyPasswordOperation
										r.summary = "Change my password"
										r.operationID = "userChangeMyPassword"
										r.pathPattern = "/api/v1/users/me/change-password"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 't': // Prefix: "team/"
						origElem := elem
						if l := len("team/"); len(elem) >= l && elem[0:l] == "team/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "team_id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/list"
							origElem := elem
							if l := len("/list"); len(elem) >= l && elem[0:l] == "/list" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = ListUsersForTeamOperation
									r.summary = "List all users for team admin"
									r.operationID = "ListUsersForTeam"
									r.pathPattern = "/api/v1/users/team/{team_id}/list"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}
					// Param: "user_id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = DeleteUserOperation
							r.summary = "Delete a user (superuser only, cannot delete superusers)"
							r.operationID = "DeleteUser"
							r.pathPattern = "/api/v1/users/{user_id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "active"
							origElem := elem
							if l := len("active"); len(elem) >= l && elem[0:l] == "active" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PUT":
									r.name = SetUserActiveStatusOperation
									r.summary = "Set or unset user active status (superuser only)"
									r.operationID = "SetUserActiveStatus"
									r.pathPattern = "/api/v1/users/{user_id}/active"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 's': // Prefix: "superuser"
							origElem := elem
							if l := len("superuser"); len(elem) >= l && elem[0:l] == "superuser" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PUT":
									r.name = SetSuperuserStatusOperation
									r.summary = "Set or unset superuser status (superuser only, cannot modify admin user)"
									r.operationID = "SetSuperuserStatus"
									r.pathPattern = "/api/v1/users/{user_id}/superuser"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'v': // Prefix: "versions"
				origElem := elem
				if l := len("versions"); len(elem) >= l && elem[0:l] == "versions" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = GetVersionsOperation
						r.summary = "Get versions of all system components"
						r.operationID = "GetVersions"
						r.pathPattern = "/api/v1/versions"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
