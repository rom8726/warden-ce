// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AddTeamMemberParams is parameters of AddTeamMember operation.
type AddTeamMemberParams struct {
	TeamID uint
}

func unpackAddTeamMemberParams(packed middleware.Parameters) (params AddTeamMemberParams) {
	{
		key := middleware.ParameterKey{
			Name: "team_id",
			In:   "path",
		}
		params.TeamID = packed[key].(uint)
	}
	return params
}

func decodeAddTeamMemberParams(args [1]string, argsEscaped bool, r *http.Request) (params AddTeamMemberParams, _ error) {
	// Decode path: team_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "team_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ArchiveProjectParams is parameters of ArchiveProject operation.
type ArchiveProjectParams struct {
	ProjectID uint
}

func unpackArchiveProjectParams(packed middleware.Parameters) (params ArchiveProjectParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	return params
}

func decodeArchiveProjectParams(args [1]string, argsEscaped bool, r *http.Request) (params ArchiveProjectParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ChangeIssueStatusParams is parameters of changeIssueStatus operation.
type ChangeIssueStatusParams struct {
	ProjectID uint
	IssueID   uint
}

func unpackChangeIssueStatusParams(packed middleware.Parameters) (params ChangeIssueStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "issue_id",
			In:   "path",
		}
		params.IssueID = packed[key].(uint)
	}
	return params
}

func decodeChangeIssueStatusParams(args [2]string, argsEscaped bool, r *http.Request) (params ChangeIssueStatusParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: issue_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.IssueID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "issue_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ChangeTeamMemberRoleParams is parameters of ChangeTeamMemberRole operation.
type ChangeTeamMemberRoleParams struct {
	TeamID uint
	UserID uint
}

func unpackChangeTeamMemberRoleParams(packed middleware.Parameters) (params ChangeTeamMemberRoleParams) {
	{
		key := middleware.ParameterKey{
			Name: "team_id",
			In:   "path",
		}
		params.TeamID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "user_id",
			In:   "path",
		}
		params.UserID = packed[key].(uint)
	}
	return params
}

func decodeChangeTeamMemberRoleParams(args [2]string, argsEscaped bool, r *http.Request) (params ChangeTeamMemberRoleParams, _ error) {
	// Decode path: team_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "team_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: user_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.UserID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CheckTeamExistsParams is parameters of CheckTeamExists operation.
type CheckTeamExistsParams struct {
	TeamName string
}

func unpackCheckTeamExistsParams(packed middleware.Parameters) (params CheckTeamExistsParams) {
	{
		key := middleware.ParameterKey{
			Name: "team_name",
			In:   "path",
		}
		params.TeamName = packed[key].(string)
	}
	return params
}

func decodeCheckTeamExistsParams(args [1]string, argsEscaped bool, r *http.Request) (params CheckTeamExistsParams, _ error) {
	// Decode path: team_name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "team_name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CompareProjectReleasesAnalyticsParams is parameters of CompareProjectReleasesAnalytics operation.
type CompareProjectReleasesAnalyticsParams struct {
	ProjectID uint
}

func unpackCompareProjectReleasesAnalyticsParams(packed middleware.Parameters) (params CompareProjectReleasesAnalyticsParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	return params
}

func decodeCompareProjectReleasesAnalyticsParams(args [1]string, argsEscaped bool, r *http.Request) (params CompareProjectReleasesAnalyticsParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateNotificationRuleParams is parameters of CreateNotificationRule operation.
type CreateNotificationRuleParams struct {
	ProjectID uint
	SettingID uint
}

func unpackCreateNotificationRuleParams(packed middleware.Parameters) (params CreateNotificationRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "setting_id",
			In:   "path",
		}
		params.SettingID = packed[key].(uint)
	}
	return params
}

func decodeCreateNotificationRuleParams(args [2]string, argsEscaped bool, r *http.Request) (params CreateNotificationRuleParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: setting_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "setting_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.SettingID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "setting_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateNotificationSettingParams is parameters of CreateNotificationSetting operation.
type CreateNotificationSettingParams struct {
	ProjectID uint
}

func unpackCreateNotificationSettingParams(packed middleware.Parameters) (params CreateNotificationSettingParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	return params
}

func decodeCreateNotificationSettingParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateNotificationSettingParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteNotificationRuleParams is parameters of DeleteNotificationRule operation.
type DeleteNotificationRuleParams struct {
	ProjectID uint
	SettingID uint
	RuleID    uint
}

func unpackDeleteNotificationRuleParams(packed middleware.Parameters) (params DeleteNotificationRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "setting_id",
			In:   "path",
		}
		params.SettingID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "rule_id",
			In:   "path",
		}
		params.RuleID = packed[key].(uint)
	}
	return params
}

func decodeDeleteNotificationRuleParams(args [3]string, argsEscaped bool, r *http.Request) (params DeleteNotificationRuleParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: setting_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "setting_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.SettingID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "setting_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: rule_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "rule_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.RuleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "rule_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteNotificationSettingParams is parameters of DeleteNotificationSetting operation.
type DeleteNotificationSettingParams struct {
	ProjectID uint
	SettingID uint
}

func unpackDeleteNotificationSettingParams(packed middleware.Parameters) (params DeleteNotificationSettingParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "setting_id",
			In:   "path",
		}
		params.SettingID = packed[key].(uint)
	}
	return params
}

func decodeDeleteNotificationSettingParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteNotificationSettingParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: setting_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "setting_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.SettingID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "setting_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteTeamParams is parameters of DeleteTeam operation.
type DeleteTeamParams struct {
	TeamID uint
}

func unpackDeleteTeamParams(packed middleware.Parameters) (params DeleteTeamParams) {
	{
		key := middleware.ParameterKey{
			Name: "team_id",
			In:   "path",
		}
		params.TeamID = packed[key].(uint)
	}
	return params
}

func decodeDeleteTeamParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteTeamParams, _ error) {
	// Decode path: team_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "team_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteUserParams is parameters of DeleteUser operation.
type DeleteUserParams struct {
	UserID uint
}

func unpackDeleteUserParams(packed middleware.Parameters) (params DeleteUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "user_id",
			In:   "path",
		}
		params.UserID = packed[key].(uint)
	}
	return params
}

func decodeDeleteUserParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteUserParams, _ error) {
	// Decode path: user_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.UserID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetEventsTimeseriesParams is parameters of GetEventsTimeseries operation.
type GetEventsTimeseriesParams struct {
	ProjectID   OptUint
	Interval    string
	Granularity string
}

func unpackGetEventsTimeseriesParams(packed middleware.Parameters) (params GetEventsTimeseriesParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ProjectID = v.(OptUint)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "interval",
			In:   "query",
		}
		params.Interval = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "granularity",
			In:   "query",
		}
		params.Granularity = packed[key].(string)
	}
	return params
}

func decodeGetEventsTimeseriesParams(args [0]string, argsEscaped bool, r *http.Request) (params GetEventsTimeseriesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: project_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "project_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotProjectIDVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotProjectIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ProjectID.SetTo(paramsDotProjectIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: interval.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "interval",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Interval = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d+(m|h|d)$"],
				}).Validate(string(params.Interval)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "interval",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: granularity.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "granularity",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Granularity = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d+(m|h|d)$"],
				}).Validate(string(params.Granularity)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "granularity",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetIssueParams is parameters of GetIssue operation.
type GetIssueParams struct {
	ProjectID uint
	IssueID   uint
}

func unpackGetIssueParams(packed middleware.Parameters) (params GetIssueParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "issue_id",
			In:   "path",
		}
		params.IssueID = packed[key].(uint)
	}
	return params
}

func decodeGetIssueParams(args [2]string, argsEscaped bool, r *http.Request) (params GetIssueParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: issue_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.IssueID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "issue_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetIssuesTimeseriesParams is parameters of GetIssuesTimeseries operation.
type GetIssuesTimeseriesParams struct {
	ProjectID   OptUint
	Interval    string
	Granularity string
}

func unpackGetIssuesTimeseriesParams(packed middleware.Parameters) (params GetIssuesTimeseriesParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ProjectID = v.(OptUint)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "interval",
			In:   "query",
		}
		params.Interval = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "granularity",
			In:   "query",
		}
		params.Granularity = packed[key].(string)
	}
	return params
}

func decodeGetIssuesTimeseriesParams(args [0]string, argsEscaped bool, r *http.Request) (params GetIssuesTimeseriesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: project_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "project_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotProjectIDVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotProjectIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ProjectID.SetTo(paramsDotProjectIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: interval.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "interval",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Interval = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d+(m|h|d)$"],
				}).Validate(string(params.Interval)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "interval",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: granularity.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "granularity",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Granularity = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d+(m|h|d)$"],
				}).Validate(string(params.Granularity)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "granularity",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetNotificationRuleParams is parameters of GetNotificationRule operation.
type GetNotificationRuleParams struct {
	ProjectID uint
	SettingID uint
	RuleID    uint
}

func unpackGetNotificationRuleParams(packed middleware.Parameters) (params GetNotificationRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "setting_id",
			In:   "path",
		}
		params.SettingID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "rule_id",
			In:   "path",
		}
		params.RuleID = packed[key].(uint)
	}
	return params
}

func decodeGetNotificationRuleParams(args [3]string, argsEscaped bool, r *http.Request) (params GetNotificationRuleParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: setting_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "setting_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.SettingID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "setting_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: rule_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "rule_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.RuleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "rule_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetNotificationSettingParams is parameters of GetNotificationSetting operation.
type GetNotificationSettingParams struct {
	ProjectID uint
	SettingID uint
}

func unpackGetNotificationSettingParams(packed middleware.Parameters) (params GetNotificationSettingParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "setting_id",
			In:   "path",
		}
		params.SettingID = packed[key].(uint)
	}
	return params
}

func decodeGetNotificationSettingParams(args [2]string, argsEscaped bool, r *http.Request) (params GetNotificationSettingParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: setting_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "setting_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.SettingID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "setting_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectParams is parameters of GetProject operation.
type GetProjectParams struct {
	ProjectID uint
}

func unpackGetProjectParams(packed middleware.Parameters) (params GetProjectParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	return params
}

func decodeGetProjectParams(args [1]string, argsEscaped bool, r *http.Request) (params GetProjectParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectIssueEventsTimeseriesParams is parameters of GetProjectIssueEventsTimeseries operation.
type GetProjectIssueEventsTimeseriesParams struct {
	ProjectID   uint
	IssueID     uint
	Interval    string
	Granularity string
}

func unpackGetProjectIssueEventsTimeseriesParams(packed middleware.Parameters) (params GetProjectIssueEventsTimeseriesParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "issue_id",
			In:   "path",
		}
		params.IssueID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "interval",
			In:   "query",
		}
		params.Interval = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "granularity",
			In:   "query",
		}
		params.Granularity = packed[key].(string)
	}
	return params
}

func decodeGetProjectIssueEventsTimeseriesParams(args [2]string, argsEscaped bool, r *http.Request) (params GetProjectIssueEventsTimeseriesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: issue_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.IssueID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "issue_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: interval.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "interval",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Interval = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d+(m|h|d)$"],
				}).Validate(string(params.Interval)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "interval",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: granularity.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "granularity",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Granularity = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d+(m|h|d)$"],
				}).Validate(string(params.Granularity)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "granularity",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectIssueTimeseriesParams is parameters of GetProjectIssueTimeseries operation.
type GetProjectIssueTimeseriesParams struct {
	ProjectID   uint
	IssueID     uint
	Interval    string
	Granularity string
}

func unpackGetProjectIssueTimeseriesParams(packed middleware.Parameters) (params GetProjectIssueTimeseriesParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "issue_id",
			In:   "path",
		}
		params.IssueID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "interval",
			In:   "query",
		}
		params.Interval = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "granularity",
			In:   "query",
		}
		params.Granularity = packed[key].(string)
	}
	return params
}

func decodeGetProjectIssueTimeseriesParams(args [2]string, argsEscaped bool, r *http.Request) (params GetProjectIssueTimeseriesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: issue_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.IssueID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "issue_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: interval.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "interval",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Interval = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d+(m|h|d)$"],
				}).Validate(string(params.Interval)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "interval",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: granularity.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "granularity",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Granularity = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d+(m|h|d)$"],
				}).Validate(string(params.Granularity)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "granularity",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectReleaseAnalyticsDetailsParams is parameters of GetProjectReleaseAnalyticsDetails operation.
type GetProjectReleaseAnalyticsDetailsParams struct {
	ProjectID uint
	Version   string
}

func unpackGetProjectReleaseAnalyticsDetailsParams(packed middleware.Parameters) (params GetProjectReleaseAnalyticsDetailsParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "version",
			In:   "path",
		}
		params.Version = packed[key].(string)
	}
	return params
}

func decodeGetProjectReleaseAnalyticsDetailsParams(args [2]string, argsEscaped bool, r *http.Request) (params GetProjectReleaseAnalyticsDetailsParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: version.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "version",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Version = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "version",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectReleaseErrorsTimeseriesParams is parameters of GetProjectReleaseErrorsTimeseries operation.
type GetProjectReleaseErrorsTimeseriesParams struct {
	ProjectID   uint
	Release     string
	Level       OptIssueLevel
	GroupBy     OptGetProjectReleaseErrorsTimeseriesGroupBy
	Interval    string
	Granularity string
}

func unpackGetProjectReleaseErrorsTimeseriesParams(packed middleware.Parameters) (params GetProjectReleaseErrorsTimeseriesParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "release",
			In:   "query",
		}
		params.Release = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "level",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Level = v.(OptIssueLevel)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "group_by",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.GroupBy = v.(OptGetProjectReleaseErrorsTimeseriesGroupBy)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "interval",
			In:   "query",
		}
		params.Interval = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "granularity",
			In:   "query",
		}
		params.Granularity = packed[key].(string)
	}
	return params
}

func decodeGetProjectReleaseErrorsTimeseriesParams(args [1]string, argsEscaped bool, r *http.Request) (params GetProjectReleaseErrorsTimeseriesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: release.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "release",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Release = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "release",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: level.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "level",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLevelVal IssueLevel
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLevelVal = IssueLevel(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Level.SetTo(paramsDotLevelVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Level.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "level",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: group_by.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "group_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGroupByVal GetProjectReleaseErrorsTimeseriesGroupBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotGroupByVal = GetProjectReleaseErrorsTimeseriesGroupBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.GroupBy.SetTo(paramsDotGroupByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.GroupBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group_by",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: interval.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "interval",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Interval = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d+(m|h|d)$"],
				}).Validate(string(params.Interval)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "interval",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: granularity.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "granularity",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Granularity = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d+(m|h|d)$"],
				}).Validate(string(params.Granularity)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "granularity",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectReleaseSegmentsParams is parameters of GetProjectReleaseSegments operation.
type GetProjectReleaseSegmentsParams struct {
	ProjectID uint
	Release   string
	Segment   GetProjectReleaseSegmentsSegment
}

func unpackGetProjectReleaseSegmentsParams(packed middleware.Parameters) (params GetProjectReleaseSegmentsParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "release",
			In:   "query",
		}
		params.Release = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "segment",
			In:   "query",
		}
		params.Segment = packed[key].(GetProjectReleaseSegmentsSegment)
	}
	return params
}

func decodeGetProjectReleaseSegmentsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetProjectReleaseSegmentsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: release.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "release",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Release = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "release",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: segment.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "segment",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Segment = GetProjectReleaseSegmentsSegment(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Segment.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "segment",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectReleasesAnalyticsParams is parameters of GetProjectReleasesAnalytics operation.
type GetProjectReleasesAnalyticsParams struct {
	ProjectID uint
}

func unpackGetProjectReleasesAnalyticsParams(packed middleware.Parameters) (params GetProjectReleasesAnalyticsParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	return params
}

func decodeGetProjectReleasesAnalyticsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetProjectReleasesAnalyticsParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectStatsParams is parameters of GetProjectStats operation.
type GetProjectStatsParams struct {
	ProjectID uint
	Period    GetProjectStatsPeriod
}

func unpackGetProjectStatsParams(packed middleware.Parameters) (params GetProjectStatsParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "period",
			In:   "query",
		}
		params.Period = packed[key].(GetProjectStatsPeriod)
	}
	return params
}

func decodeGetProjectStatsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetProjectStatsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: period.
	{
		val := GetProjectStatsPeriod("7d")
		params.Period = val
	}
	// Decode query: period.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "period",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Period = GetProjectStatsPeriod(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Period.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "period",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectTeamParams is parameters of GetProjectTeam operation.
type GetProjectTeamParams struct {
	ProjectID uint
}

func unpackGetProjectTeamParams(packed middleware.Parameters) (params GetProjectTeamParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	return params
}

func decodeGetProjectTeamParams(args [1]string, argsEscaped bool, r *http.Request) (params GetProjectTeamParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetRecentIssuesParams is parameters of GetRecentIssues operation.
type GetRecentIssuesParams struct {
	Limit uint
}

func unpackGetRecentIssuesParams(packed middleware.Parameters) (params GetRecentIssuesParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		params.Limit = packed[key].(uint)
	}
	return params
}

func decodeGetRecentIssuesParams(args [0]string, argsEscaped bool, r *http.Request) (params GetRecentIssuesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: limit.
	{
		val := uint(5)
		params.Limit = val
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.Limit = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetTeamParams is parameters of GetTeam operation.
type GetTeamParams struct {
	TeamID uint
}

func unpackGetTeamParams(packed middleware.Parameters) (params GetTeamParams) {
	{
		key := middleware.ParameterKey{
			Name: "team_id",
			In:   "path",
		}
		params.TeamID = packed[key].(uint)
	}
	return params
}

func decodeGetTeamParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTeamParams, _ error) {
	// Decode path: team_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "team_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetUserNotificationsParams is parameters of GetUserNotifications operation.
type GetUserNotificationsParams struct {
	Limit  OptUint
	Offset OptUint
}

func unpackGetUserNotificationsParams(packed middleware.Parameters) (params GetUserNotificationsParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptUint)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptUint)
		}
	}
	return params
}

func decodeGetUserNotificationsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetUserNotificationsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: limit.
	{
		val := uint(50)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        false,
							Min:           0,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := uint(0)
		params.Offset.SetTo(val)
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListIssuesParams is parameters of ListIssues operation.
type ListIssuesParams struct {
	Level     OptIssueLevel
	Status    OptIssueStatus
	ProjectID OptUint
	PerPage   uint
	Page      uint
	SortBy    OptIssueSortColumn
	SortOrder OptSortOrder
}

func unpackListIssuesParams(packed middleware.Parameters) (params ListIssuesParams) {
	{
		key := middleware.ParameterKey{
			Name: "level",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Level = v.(OptIssueLevel)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Status = v.(OptIssueStatus)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ProjectID = v.(OptUint)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "per_page",
			In:   "query",
		}
		params.PerPage = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		params.Page = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_by",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortBy = v.(OptIssueSortColumn)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_order",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortOrder = v.(OptSortOrder)
		}
	}
	return params
}

func decodeListIssuesParams(args [0]string, argsEscaped bool, r *http.Request) (params ListIssuesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: level.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "level",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLevelVal IssueLevel
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLevelVal = IssueLevel(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Level.SetTo(paramsDotLevelVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Level.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "level",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal IssueStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = IssueStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Status.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: project_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "project_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotProjectIDVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotProjectIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ProjectID.SetTo(paramsDotProjectIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: per_page.
	{
		val := uint(20)
		params.PerPage = val
	}
	// Decode query: per_page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.PerPage = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "per_page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := uint(1)
		params.Page = val
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.Page = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_by.
	{
		val := IssueSortColumn("total_events")
		params.SortBy.SetTo(val)
	}
	// Decode query: sort_by.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortByVal IssueSortColumn
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortByVal = IssueSortColumn(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortBy.SetTo(paramsDotSortByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_by",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_order.
	{
		val := SortOrder("desc")
		params.SortOrder.SetTo(val)
	}
	// Decode query: sort_order.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortOrderVal SortOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortOrderVal = SortOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortOrder.SetTo(paramsDotSortOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortOrder.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_order",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListNotificationRulesParams is parameters of ListNotificationRules operation.
type ListNotificationRulesParams struct {
	ProjectID uint
	SettingID uint
}

func unpackListNotificationRulesParams(packed middleware.Parameters) (params ListNotificationRulesParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "setting_id",
			In:   "path",
		}
		params.SettingID = packed[key].(uint)
	}
	return params
}

func decodeListNotificationRulesParams(args [2]string, argsEscaped bool, r *http.Request) (params ListNotificationRulesParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: setting_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "setting_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.SettingID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "setting_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListNotificationSettingsParams is parameters of ListNotificationSettings operation.
type ListNotificationSettingsParams struct {
	ProjectID uint
}

func unpackListNotificationSettingsParams(packed middleware.Parameters) (params ListNotificationSettingsParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	return params
}

func decodeListNotificationSettingsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListNotificationSettingsParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListUsersForTeamParams is parameters of ListUsersForTeam operation.
type ListUsersForTeamParams struct {
	TeamID uint
}

func unpackListUsersForTeamParams(packed middleware.Parameters) (params ListUsersForTeamParams) {
	{
		key := middleware.ParameterKey{
			Name: "team_id",
			In:   "path",
		}
		params.TeamID = packed[key].(uint)
	}
	return params
}

func decodeListUsersForTeamParams(args [1]string, argsEscaped bool, r *http.Request) (params ListUsersForTeamParams, _ error) {
	// Decode path: team_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "team_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// MarkNotificationAsReadParams is parameters of MarkNotificationAsRead operation.
type MarkNotificationAsReadParams struct {
	NotificationID uint
}

func unpackMarkNotificationAsReadParams(packed middleware.Parameters) (params MarkNotificationAsReadParams) {
	{
		key := middleware.ParameterKey{
			Name: "notification_id",
			In:   "path",
		}
		params.NotificationID = packed[key].(uint)
	}
	return params
}

func decodeMarkNotificationAsReadParams(args [1]string, argsEscaped bool, r *http.Request) (params MarkNotificationAsReadParams, _ error) {
	// Decode path: notification_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "notification_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.NotificationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "notification_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RemoveTeamMemberParams is parameters of RemoveTeamMember operation.
type RemoveTeamMemberParams struct {
	TeamID uint
	UserID uint
}

func unpackRemoveTeamMemberParams(packed middleware.Parameters) (params RemoveTeamMemberParams) {
	{
		key := middleware.ParameterKey{
			Name: "team_id",
			In:   "path",
		}
		params.TeamID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "user_id",
			In:   "path",
		}
		params.UserID = packed[key].(uint)
	}
	return params
}

func decodeRemoveTeamMemberParams(args [2]string, argsEscaped bool, r *http.Request) (params RemoveTeamMemberParams, _ error) {
	// Decode path: team_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "team_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: user_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.UserID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SendTestNotificationParams is parameters of sendTestNotification operation.
type SendTestNotificationParams struct {
	ProjectID uint
	SettingID uint
}

func unpackSendTestNotificationParams(packed middleware.Parameters) (params SendTestNotificationParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "setting_id",
			In:   "path",
		}
		params.SettingID = packed[key].(uint)
	}
	return params
}

func decodeSendTestNotificationParams(args [2]string, argsEscaped bool, r *http.Request) (params SendTestNotificationParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: setting_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "setting_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.SettingID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "setting_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SetSuperuserStatusParams is parameters of SetSuperuserStatus operation.
type SetSuperuserStatusParams struct {
	UserID uint
}

func unpackSetSuperuserStatusParams(packed middleware.Parameters) (params SetSuperuserStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "user_id",
			In:   "path",
		}
		params.UserID = packed[key].(uint)
	}
	return params
}

func decodeSetSuperuserStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params SetSuperuserStatusParams, _ error) {
	// Decode path: user_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.UserID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SetUserActiveStatusParams is parameters of SetUserActiveStatus operation.
type SetUserActiveStatusParams struct {
	UserID uint
}

func unpackSetUserActiveStatusParams(packed middleware.Parameters) (params SetUserActiveStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "user_id",
			In:   "path",
		}
		params.UserID = packed[key].(uint)
	}
	return params
}

func decodeSetUserActiveStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params SetUserActiveStatusParams, _ error) {
	// Decode path: user_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.UserID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateNotificationRuleParams is parameters of UpdateNotificationRule operation.
type UpdateNotificationRuleParams struct {
	ProjectID uint
	SettingID uint
	RuleID    uint
}

func unpackUpdateNotificationRuleParams(packed middleware.Parameters) (params UpdateNotificationRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "setting_id",
			In:   "path",
		}
		params.SettingID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "rule_id",
			In:   "path",
		}
		params.RuleID = packed[key].(uint)
	}
	return params
}

func decodeUpdateNotificationRuleParams(args [3]string, argsEscaped bool, r *http.Request) (params UpdateNotificationRuleParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: setting_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "setting_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.SettingID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "setting_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: rule_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "rule_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.RuleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "rule_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateNotificationSettingParams is parameters of UpdateNotificationSetting operation.
type UpdateNotificationSettingParams struct {
	ProjectID uint
	SettingID uint
}

func unpackUpdateNotificationSettingParams(packed middleware.Parameters) (params UpdateNotificationSettingParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "setting_id",
			In:   "path",
		}
		params.SettingID = packed[key].(uint)
	}
	return params
}

func decodeUpdateNotificationSettingParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateNotificationSettingParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: setting_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "setting_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.SettingID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "setting_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateProjectParams is parameters of UpdateProject operation.
type UpdateProjectParams struct {
	ProjectID uint
}

func unpackUpdateProjectParams(packed middleware.Parameters) (params UpdateProjectParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uint)
	}
	return params
}

func decodeUpdateProjectParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateProjectParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
