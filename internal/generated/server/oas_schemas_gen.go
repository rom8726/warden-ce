// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// AddProjectCreated is response for AddProject operation.
type AddProjectCreated struct{}

func (*AddProjectCreated) addProjectRes() {}

// Ref: #/components/schemas/AddProjectRequest
type AddProjectRequest struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	// CPU architecture of the device.
	TeamID OptNilUint `json:"team_id"`
}

// GetName returns the value of Name.
func (s *AddProjectRequest) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *AddProjectRequest) GetDescription() string {
	return s.Description
}

// GetTeamID returns the value of TeamID.
func (s *AddProjectRequest) GetTeamID() OptNilUint {
	return s.TeamID
}

// SetName sets the value of Name.
func (s *AddProjectRequest) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *AddProjectRequest) SetDescription(val string) {
	s.Description = val
}

// SetTeamID sets the value of TeamID.
func (s *AddProjectRequest) SetTeamID(val OptNilUint) {
	s.TeamID = val
}

// AddTeamMemberCreated is response for AddTeamMember operation.
type AddTeamMemberCreated struct{}

func (*AddTeamMemberCreated) addTeamMemberRes() {}

// Ref: #/components/schemas/AddTeamMemberRequest
type AddTeamMemberRequest struct {
	UserID uint                     `json:"user_id"`
	Role   AddTeamMemberRequestRole `json:"role"`
}

// GetUserID returns the value of UserID.
func (s *AddTeamMemberRequest) GetUserID() uint {
	return s.UserID
}

// GetRole returns the value of Role.
func (s *AddTeamMemberRequest) GetRole() AddTeamMemberRequestRole {
	return s.Role
}

// SetUserID sets the value of UserID.
func (s *AddTeamMemberRequest) SetUserID(val uint) {
	s.UserID = val
}

// SetRole sets the value of Role.
func (s *AddTeamMemberRequest) SetRole(val AddTeamMemberRequestRole) {
	s.Role = val
}

type AddTeamMemberRequestRole string

const (
	AddTeamMemberRequestRoleOwner  AddTeamMemberRequestRole = "owner"
	AddTeamMemberRequestRoleAdmin  AddTeamMemberRequestRole = "admin"
	AddTeamMemberRequestRoleMember AddTeamMemberRequestRole = "member"
)

// AllValues returns all AddTeamMemberRequestRole values.
func (AddTeamMemberRequestRole) AllValues() []AddTeamMemberRequestRole {
	return []AddTeamMemberRequestRole{
		AddTeamMemberRequestRoleOwner,
		AddTeamMemberRequestRoleAdmin,
		AddTeamMemberRequestRoleMember,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AddTeamMemberRequestRole) MarshalText() ([]byte, error) {
	switch s {
	case AddTeamMemberRequestRoleOwner:
		return []byte(s), nil
	case AddTeamMemberRequestRoleAdmin:
		return []byte(s), nil
	case AddTeamMemberRequestRoleMember:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AddTeamMemberRequestRole) UnmarshalText(data []byte) error {
	switch AddTeamMemberRequestRole(data) {
	case AddTeamMemberRequestRoleOwner:
		*s = AddTeamMemberRequestRoleOwner
		return nil
	case AddTeamMemberRequestRoleAdmin:
		*s = AddTeamMemberRequestRoleAdmin
		return nil
	case AddTeamMemberRequestRoleMember:
		*s = AddTeamMemberRequestRoleMember
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ArchiveProjectNoContent is response for ArchiveProject operation.
type ArchiveProjectNoContent struct{}

func (*ArchiveProjectNoContent) archiveProjectRes() {}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// ChangeIssueStatusNoContent is response for ChangeIssueStatus operation.
type ChangeIssueStatusNoContent struct{}

func (*ChangeIssueStatusNoContent) changeIssueStatusRes() {}

type ChangeIssueStatusReq struct {
	Status IssueStatus `json:"status"`
}

// GetStatus returns the value of Status.
func (s *ChangeIssueStatusReq) GetStatus() IssueStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *ChangeIssueStatusReq) SetStatus(val IssueStatus) {
	s.Status = val
}

// ChangeTeamMemberRoleOK is response for ChangeTeamMemberRole operation.
type ChangeTeamMemberRoleOK struct{}

func (*ChangeTeamMemberRoleOK) changeTeamMemberRoleRes() {}

// Ref: #/components/schemas/ChangeTeamMemberRoleRequest
type ChangeTeamMemberRoleRequest struct {
	Role ChangeTeamMemberRoleRequestRole `json:"role"`
}

// GetRole returns the value of Role.
func (s *ChangeTeamMemberRoleRequest) GetRole() ChangeTeamMemberRoleRequestRole {
	return s.Role
}

// SetRole sets the value of Role.
func (s *ChangeTeamMemberRoleRequest) SetRole(val ChangeTeamMemberRoleRequestRole) {
	s.Role = val
}

type ChangeTeamMemberRoleRequestRole string

const (
	ChangeTeamMemberRoleRequestRoleOwner  ChangeTeamMemberRoleRequestRole = "owner"
	ChangeTeamMemberRoleRequestRoleAdmin  ChangeTeamMemberRoleRequestRole = "admin"
	ChangeTeamMemberRoleRequestRoleMember ChangeTeamMemberRoleRequestRole = "member"
)

// AllValues returns all ChangeTeamMemberRoleRequestRole values.
func (ChangeTeamMemberRoleRequestRole) AllValues() []ChangeTeamMemberRoleRequestRole {
	return []ChangeTeamMemberRoleRequestRole{
		ChangeTeamMemberRoleRequestRoleOwner,
		ChangeTeamMemberRoleRequestRoleAdmin,
		ChangeTeamMemberRoleRequestRoleMember,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeTeamMemberRoleRequestRole) MarshalText() ([]byte, error) {
	switch s {
	case ChangeTeamMemberRoleRequestRoleOwner:
		return []byte(s), nil
	case ChangeTeamMemberRoleRequestRoleAdmin:
		return []byte(s), nil
	case ChangeTeamMemberRoleRequestRoleMember:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeTeamMemberRoleRequestRole) UnmarshalText(data []byte) error {
	switch ChangeTeamMemberRoleRequestRole(data) {
	case ChangeTeamMemberRoleRequestRoleOwner:
		*s = ChangeTeamMemberRoleRequestRoleOwner
		return nil
	case ChangeTeamMemberRoleRequestRoleAdmin:
		*s = ChangeTeamMemberRoleRequestRoleAdmin
		return nil
	case ChangeTeamMemberRoleRequestRoleMember:
		*s = ChangeTeamMemberRoleRequestRoleMember
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ChangeUserPasswordRequest
type ChangeUserPasswordRequest struct {
	OldPassword string `json:"old_password"`
	NewPassword string `json:"new_password"`
}

// GetOldPassword returns the value of OldPassword.
func (s *ChangeUserPasswordRequest) GetOldPassword() string {
	return s.OldPassword
}

// GetNewPassword returns the value of NewPassword.
func (s *ChangeUserPasswordRequest) GetNewPassword() string {
	return s.NewPassword
}

// SetOldPassword sets the value of OldPassword.
func (s *ChangeUserPasswordRequest) SetOldPassword(val string) {
	s.OldPassword = val
}

// SetNewPassword sets the value of NewPassword.
func (s *ChangeUserPasswordRequest) SetNewPassword(val string) {
	s.NewPassword = val
}

type CompareProjectReleasesAnalyticsReq struct {
	BaseVersion   string `json:"base_version"`
	TargetVersion string `json:"target_version"`
}

// GetBaseVersion returns the value of BaseVersion.
func (s *CompareProjectReleasesAnalyticsReq) GetBaseVersion() string {
	return s.BaseVersion
}

// GetTargetVersion returns the value of TargetVersion.
func (s *CompareProjectReleasesAnalyticsReq) GetTargetVersion() string {
	return s.TargetVersion
}

// SetBaseVersion sets the value of BaseVersion.
func (s *CompareProjectReleasesAnalyticsReq) SetBaseVersion(val string) {
	s.BaseVersion = val
}

// SetTargetVersion sets the value of TargetVersion.
func (s *CompareProjectReleasesAnalyticsReq) SetTargetVersion(val string) {
	s.TargetVersion = val
}

// Ref: #/components/schemas/ComponentVersion
type ComponentVersion struct {
	// Name of the component.
	Name string `json:"name"`
	// Version of the component.
	Version string `json:"version"`
	// Build time of the component.
	BuildTime string `json:"build_time"`
	// Status of the component's tech server.
	Status ComponentVersionStatus `json:"status"`
}

// GetName returns the value of Name.
func (s *ComponentVersion) GetName() string {
	return s.Name
}

// GetVersion returns the value of Version.
func (s *ComponentVersion) GetVersion() string {
	return s.Version
}

// GetBuildTime returns the value of BuildTime.
func (s *ComponentVersion) GetBuildTime() string {
	return s.BuildTime
}

// GetStatus returns the value of Status.
func (s *ComponentVersion) GetStatus() ComponentVersionStatus {
	return s.Status
}

// SetName sets the value of Name.
func (s *ComponentVersion) SetName(val string) {
	s.Name = val
}

// SetVersion sets the value of Version.
func (s *ComponentVersion) SetVersion(val string) {
	s.Version = val
}

// SetBuildTime sets the value of BuildTime.
func (s *ComponentVersion) SetBuildTime(val string) {
	s.BuildTime = val
}

// SetStatus sets the value of Status.
func (s *ComponentVersion) SetStatus(val ComponentVersionStatus) {
	s.Status = val
}

// Status of the component's tech server.
type ComponentVersionStatus string

const (
	ComponentVersionStatusAvailable   ComponentVersionStatus = "available"
	ComponentVersionStatusUnavailable ComponentVersionStatus = "unavailable"
)

// AllValues returns all ComponentVersionStatus values.
func (ComponentVersionStatus) AllValues() []ComponentVersionStatus {
	return []ComponentVersionStatus{
		ComponentVersionStatusAvailable,
		ComponentVersionStatusUnavailable,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ComponentVersionStatus) MarshalText() ([]byte, error) {
	switch s {
	case ComponentVersionStatusAvailable:
		return []byte(s), nil
	case ComponentVersionStatusUnavailable:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ComponentVersionStatus) UnmarshalText(data []byte) error {
	switch ComponentVersionStatus(data) {
	case ComponentVersionStatusAvailable:
		*s = ComponentVersionStatusAvailable
		return nil
	case ComponentVersionStatusUnavailable:
		*s = ComponentVersionStatusUnavailable
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Confirm2FANoContent is response for Confirm2FA operation.
type Confirm2FANoContent struct{}

func (*Confirm2FANoContent) confirm2FARes() {}

// Ref: #/components/schemas/CreateNotificationRuleRequest
type CreateNotificationRuleRequest struct {
	// Level of event to trigger notification (error, warning, info, etc.).
	EventLevel OptNilString `json:"event_level"`
	// Specific error fingerprint to trigger notification.
	Fingerprint OptNilString `json:"fingerprint"`
	// Trigger only for new errors.
	IsNewError OptNilBool `json:"is_new_error"`
	// Trigger only for regressions (resolved -> unresolved).
	IsRegression OptNilBool `json:"is_regression"`
}

// GetEventLevel returns the value of EventLevel.
func (s *CreateNotificationRuleRequest) GetEventLevel() OptNilString {
	return s.EventLevel
}

// GetFingerprint returns the value of Fingerprint.
func (s *CreateNotificationRuleRequest) GetFingerprint() OptNilString {
	return s.Fingerprint
}

// GetIsNewError returns the value of IsNewError.
func (s *CreateNotificationRuleRequest) GetIsNewError() OptNilBool {
	return s.IsNewError
}

// GetIsRegression returns the value of IsRegression.
func (s *CreateNotificationRuleRequest) GetIsRegression() OptNilBool {
	return s.IsRegression
}

// SetEventLevel sets the value of EventLevel.
func (s *CreateNotificationRuleRequest) SetEventLevel(val OptNilString) {
	s.EventLevel = val
}

// SetFingerprint sets the value of Fingerprint.
func (s *CreateNotificationRuleRequest) SetFingerprint(val OptNilString) {
	s.Fingerprint = val
}

// SetIsNewError sets the value of IsNewError.
func (s *CreateNotificationRuleRequest) SetIsNewError(val OptNilBool) {
	s.IsNewError = val
}

// SetIsRegression sets the value of IsRegression.
func (s *CreateNotificationRuleRequest) SetIsRegression(val OptNilBool) {
	s.IsRegression = val
}

// Ref: #/components/schemas/CreateNotificationSettingRequest
type CreateNotificationSettingRequest struct {
	Type NotificationChannelType `json:"type"`
	// Configuration for the notification channel (JSONB in database).
	Config  string  `json:"config"`
	Enabled OptBool `json:"enabled"`
}

// GetType returns the value of Type.
func (s *CreateNotificationSettingRequest) GetType() NotificationChannelType {
	return s.Type
}

// GetConfig returns the value of Config.
func (s *CreateNotificationSettingRequest) GetConfig() string {
	return s.Config
}

// GetEnabled returns the value of Enabled.
func (s *CreateNotificationSettingRequest) GetEnabled() OptBool {
	return s.Enabled
}

// SetType sets the value of Type.
func (s *CreateNotificationSettingRequest) SetType(val NotificationChannelType) {
	s.Type = val
}

// SetConfig sets the value of Config.
func (s *CreateNotificationSettingRequest) SetConfig(val string) {
	s.Config = val
}

// SetEnabled sets the value of Enabled.
func (s *CreateNotificationSettingRequest) SetEnabled(val OptBool) {
	s.Enabled = val
}

// Ref: #/components/schemas/CreateTeamRequest
type CreateTeamRequest struct {
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *CreateTeamRequest) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *CreateTeamRequest) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/CreateTeamResponse
type CreateTeamResponse struct {
	Team Team `json:"team"`
}

// GetTeam returns the value of Team.
func (s *CreateTeamResponse) GetTeam() Team {
	return s.Team
}

// SetTeam sets the value of Team.
func (s *CreateTeamResponse) SetTeam(val Team) {
	s.Team = val
}

func (*CreateTeamResponse) createTeamRes() {}

// Ref: #/components/schemas/CreateUserRequest
type CreateUserRequest struct {
	Username    string  `json:"username"`
	Email       string  `json:"email"`
	Password    string  `json:"password"`
	IsSuperuser OptBool `json:"is_superuser"`
}

// GetUsername returns the value of Username.
func (s *CreateUserRequest) GetUsername() string {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *CreateUserRequest) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *CreateUserRequest) GetPassword() string {
	return s.Password
}

// GetIsSuperuser returns the value of IsSuperuser.
func (s *CreateUserRequest) GetIsSuperuser() OptBool {
	return s.IsSuperuser
}

// SetUsername sets the value of Username.
func (s *CreateUserRequest) SetUsername(val string) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *CreateUserRequest) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *CreateUserRequest) SetPassword(val string) {
	s.Password = val
}

// SetIsSuperuser sets the value of IsSuperuser.
func (s *CreateUserRequest) SetIsSuperuser(val OptBool) {
	s.IsSuperuser = val
}

// Ref: #/components/schemas/CreateUserResponse
type CreateUserResponse struct {
	User User `json:"user"`
}

// GetUser returns the value of User.
func (s *CreateUserResponse) GetUser() User {
	return s.User
}

// SetUser sets the value of User.
func (s *CreateUserResponse) SetUser(val User) {
	s.User = val
}

func (*CreateUserResponse) createUserRes() {}

// DeleteNotificationRuleNoContent is response for DeleteNotificationRule operation.
type DeleteNotificationRuleNoContent struct{}

func (*DeleteNotificationRuleNoContent) deleteNotificationRuleRes() {}

// DeleteNotificationSettingNoContent is response for DeleteNotificationSetting operation.
type DeleteNotificationSettingNoContent struct{}

func (*DeleteNotificationSettingNoContent) deleteNotificationSettingRes() {}

// DeleteTeamNoContent is response for DeleteTeam operation.
type DeleteTeamNoContent struct{}

func (*DeleteTeamNoContent) deleteTeamRes() {}

// DeleteUserNoContent is response for DeleteUser operation.
type DeleteUserNoContent struct{}

func (*DeleteUserNoContent) deleteUserRes() {}

// Disable2FANoContent is response for Disable2FA operation.
type Disable2FANoContent struct{}

func (*Disable2FANoContent) disable2FARes() {}

// Ref: #/components/schemas/Error
type Error struct {
	Error ErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *Error) GetError() ErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *Error) SetError(val ErrorError) {
	s.Error = val
}

// Ref: #/components/schemas/Error2FARequired
type Error2FARequired struct {
	Error Error2FARequiredError `json:"error"`
}

// GetError returns the value of Error.
func (s *Error2FARequired) GetError() Error2FARequiredError {
	return s.Error
}

// SetError sets the value of Error.
func (s *Error2FARequired) SetError(val Error2FARequiredError) {
	s.Error = val
}

func (*Error2FARequired) loginRes() {}

type Error2FARequiredError struct {
	Code      string `json:"code"`
	SessionID string `json:"session_id"`
	Message   string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error2FARequiredError) GetCode() string {
	return s.Code
}

// GetSessionID returns the value of SessionID.
func (s *Error2FARequiredError) GetSessionID() string {
	return s.SessionID
}

// GetMessage returns the value of Message.
func (s *Error2FARequiredError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error2FARequiredError) SetCode(val string) {
	s.Code = val
}

// SetSessionID sets the value of SessionID.
func (s *Error2FARequiredError) SetSessionID(val string) {
	s.SessionID = val
}

// SetMessage sets the value of Message.
func (s *Error2FARequiredError) SetMessage(val string) {
	s.Message = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorBadRequest
type ErrorBadRequest struct {
	Error ErrorBadRequestError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorBadRequest) GetError() ErrorBadRequestError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorBadRequest) SetError(val ErrorBadRequestError) {
	s.Error = val
}

func (*ErrorBadRequest) addProjectRes()                {}
func (*ErrorBadRequest) addTeamMemberRes()             {}
func (*ErrorBadRequest) changeTeamMemberRoleRes()      {}
func (*ErrorBadRequest) confirm2FARes()                {}
func (*ErrorBadRequest) createNotificationRuleRes()    {}
func (*ErrorBadRequest) createNotificationSettingRes() {}
func (*ErrorBadRequest) createTeamRes()                {}
func (*ErrorBadRequest) createUserRes()                {}
func (*ErrorBadRequest) deleteTeamRes()                {}
func (*ErrorBadRequest) deleteUserRes()                {}
func (*ErrorBadRequest) disable2FARes()                {}
func (*ErrorBadRequest) forgotPasswordRes()            {}
func (*ErrorBadRequest) reset2FARes()                  {}
func (*ErrorBadRequest) resetPasswordRes()             {}
func (*ErrorBadRequest) send2FACodeRes()               {}
func (*ErrorBadRequest) setSuperuserStatusRes()        {}
func (*ErrorBadRequest) setUserActiveStatusRes()       {}
func (*ErrorBadRequest) updateNotificationRuleRes()    {}
func (*ErrorBadRequest) updateNotificationSettingRes() {}
func (*ErrorBadRequest) updateProjectRes()             {}
func (*ErrorBadRequest) userChangeMyPasswordRes()      {}
func (*ErrorBadRequest) verify2FARes()                 {}

type ErrorBadRequestError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorBadRequestError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorBadRequestError) SetMessage(val OptString) {
	s.Message = val
}

type ErrorError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorError) SetMessage(val OptString) {
	s.Message = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorInternalServerError
type ErrorInternalServerError struct {
	Error ErrorInternalServerErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorInternalServerError) GetError() ErrorInternalServerErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorInternalServerError) SetError(val ErrorInternalServerErrorError) {
	s.Error = val
}

func (*ErrorInternalServerError) addProjectRes()                        {}
func (*ErrorInternalServerError) addTeamMemberRes()                     {}
func (*ErrorInternalServerError) archiveProjectRes()                    {}
func (*ErrorInternalServerError) changeIssueStatusRes()                 {}
func (*ErrorInternalServerError) changeTeamMemberRoleRes()              {}
func (*ErrorInternalServerError) checkTeamExistsRes()                   {}
func (*ErrorInternalServerError) compareProjectReleasesAnalyticsRes()   {}
func (*ErrorInternalServerError) createNotificationRuleRes()            {}
func (*ErrorInternalServerError) createNotificationSettingRes()         {}
func (*ErrorInternalServerError) createTeamRes()                        {}
func (*ErrorInternalServerError) createUserRes()                        {}
func (*ErrorInternalServerError) deleteNotificationRuleRes()            {}
func (*ErrorInternalServerError) deleteNotificationSettingRes()         {}
func (*ErrorInternalServerError) deleteTeamRes()                        {}
func (*ErrorInternalServerError) deleteUserRes()                        {}
func (*ErrorInternalServerError) forgotPasswordRes()                    {}
func (*ErrorInternalServerError) getCurrentUserRes()                    {}
func (*ErrorInternalServerError) getEventsTimeseriesRes()               {}
func (*ErrorInternalServerError) getIssueRes()                          {}
func (*ErrorInternalServerError) getIssuesTimeseriesRes()               {}
func (*ErrorInternalServerError) getNotificationRuleRes()               {}
func (*ErrorInternalServerError) getNotificationSettingRes()            {}
func (*ErrorInternalServerError) getProjectIssueEventsTimeseriesRes()   {}
func (*ErrorInternalServerError) getProjectIssueTimeseriesRes()         {}
func (*ErrorInternalServerError) getProjectReleaseAnalyticsDetailsRes() {}
func (*ErrorInternalServerError) getProjectReleaseErrorsTimeseriesRes() {}
func (*ErrorInternalServerError) getProjectReleaseSegmentsRes()         {}
func (*ErrorInternalServerError) getProjectReleasesAnalyticsRes()       {}
func (*ErrorInternalServerError) getProjectRes()                        {}
func (*ErrorInternalServerError) getProjectStatsRes()                   {}
func (*ErrorInternalServerError) getProjectTeamRes()                    {}
func (*ErrorInternalServerError) getRecentIssuesRes()                   {}
func (*ErrorInternalServerError) getTeamRes()                           {}
func (*ErrorInternalServerError) getVersionsRes()                       {}
func (*ErrorInternalServerError) listIssuesRes()                        {}
func (*ErrorInternalServerError) listNotificationRulesRes()             {}
func (*ErrorInternalServerError) listNotificationSettingsRes()          {}
func (*ErrorInternalServerError) listProjectsRes()                      {}
func (*ErrorInternalServerError) listTeamsRes()                         {}
func (*ErrorInternalServerError) listUsersForTeamRes()                  {}
func (*ErrorInternalServerError) listUsersRes()                         {}
func (*ErrorInternalServerError) loginRes()                             {}
func (*ErrorInternalServerError) recentProjectsListRes()                {}
func (*ErrorInternalServerError) refreshTokenRes()                      {}
func (*ErrorInternalServerError) removeTeamMemberRes()                  {}
func (*ErrorInternalServerError) resetPasswordRes()                     {}
func (*ErrorInternalServerError) sendTestNotificationRes()              {}
func (*ErrorInternalServerError) setSuperuserStatusRes()                {}
func (*ErrorInternalServerError) setUserActiveStatusRes()               {}
func (*ErrorInternalServerError) updateNotificationRuleRes()            {}
func (*ErrorInternalServerError) updateNotificationSettingRes()         {}
func (*ErrorInternalServerError) updateProjectRes()                     {}
func (*ErrorInternalServerError) userChangeMyPasswordRes()              {}

type ErrorInternalServerErrorError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorInternalServerErrorError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorInternalServerErrorError) SetMessage(val OptString) {
	s.Message = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorInvalidCredentials
type ErrorInvalidCredentials struct {
	Error ErrorInvalidCredentialsError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorInvalidCredentials) GetError() ErrorInvalidCredentialsError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorInvalidCredentials) SetError(val ErrorInvalidCredentialsError) {
	s.Error = val
}

func (*ErrorInvalidCredentials) loginRes() {}

type ErrorInvalidCredentialsError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorInvalidCredentialsError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorInvalidCredentialsError) SetMessage(val OptString) {
	s.Message = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorNotFound
type ErrorNotFound struct {
	Error ErrorNotFoundError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorNotFound) GetError() ErrorNotFoundError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorNotFound) SetError(val ErrorNotFoundError) {
	s.Error = val
}

func (*ErrorNotFound) addProjectRes()                        {}
func (*ErrorNotFound) addTeamMemberRes()                     {}
func (*ErrorNotFound) archiveProjectRes()                    {}
func (*ErrorNotFound) changeIssueStatusRes()                 {}
func (*ErrorNotFound) changeTeamMemberRoleRes()              {}
func (*ErrorNotFound) compareProjectReleasesAnalyticsRes()   {}
func (*ErrorNotFound) createNotificationRuleRes()            {}
func (*ErrorNotFound) createNotificationSettingRes()         {}
func (*ErrorNotFound) deleteNotificationRuleRes()            {}
func (*ErrorNotFound) deleteNotificationSettingRes()         {}
func (*ErrorNotFound) deleteTeamRes()                        {}
func (*ErrorNotFound) deleteUserRes()                        {}
func (*ErrorNotFound) getEventsTimeseriesRes()               {}
func (*ErrorNotFound) getIssueRes()                          {}
func (*ErrorNotFound) getIssuesTimeseriesRes()               {}
func (*ErrorNotFound) getNotificationRuleRes()               {}
func (*ErrorNotFound) getNotificationSettingRes()            {}
func (*ErrorNotFound) getProjectIssueEventsTimeseriesRes()   {}
func (*ErrorNotFound) getProjectIssueTimeseriesRes()         {}
func (*ErrorNotFound) getProjectReleaseAnalyticsDetailsRes() {}
func (*ErrorNotFound) getProjectReleaseErrorsTimeseriesRes() {}
func (*ErrorNotFound) getProjectReleaseSegmentsRes()         {}
func (*ErrorNotFound) getProjectReleasesAnalyticsRes()       {}
func (*ErrorNotFound) getProjectRes()                        {}
func (*ErrorNotFound) getProjectStatsRes()                   {}
func (*ErrorNotFound) getProjectTeamRes()                    {}
func (*ErrorNotFound) getTeamRes()                           {}
func (*ErrorNotFound) listNotificationRulesRes()             {}
func (*ErrorNotFound) listNotificationSettingsRes()          {}
func (*ErrorNotFound) listUsersForTeamRes()                  {}
func (*ErrorNotFound) listUsersRes()                         {}
func (*ErrorNotFound) markNotificationAsReadRes()            {}
func (*ErrorNotFound) removeTeamMemberRes()                  {}
func (*ErrorNotFound) setSuperuserStatusRes()                {}
func (*ErrorNotFound) setUserActiveStatusRes()               {}
func (*ErrorNotFound) updateNotificationRuleRes()            {}
func (*ErrorNotFound) updateNotificationSettingRes()         {}
func (*ErrorNotFound) updateProjectRes()                     {}

type ErrorNotFoundError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorNotFoundError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorNotFoundError) SetMessage(val OptString) {
	s.Message = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorPermissionDenied
type ErrorPermissionDenied struct {
	Error ErrorPermissionDeniedError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorPermissionDenied) GetError() ErrorPermissionDeniedError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorPermissionDenied) SetError(val ErrorPermissionDeniedError) {
	s.Error = val
}

func (*ErrorPermissionDenied) addTeamMemberRes()             {}
func (*ErrorPermissionDenied) archiveProjectRes()            {}
func (*ErrorPermissionDenied) changeTeamMemberRoleRes()      {}
func (*ErrorPermissionDenied) createNotificationRuleRes()    {}
func (*ErrorPermissionDenied) createNotificationSettingRes() {}
func (*ErrorPermissionDenied) createUserRes()                {}
func (*ErrorPermissionDenied) deleteNotificationRuleRes()    {}
func (*ErrorPermissionDenied) deleteNotificationSettingRes() {}
func (*ErrorPermissionDenied) deleteTeamRes()                {}
func (*ErrorPermissionDenied) deleteUserRes()                {}
func (*ErrorPermissionDenied) forgotPasswordRes()            {}
func (*ErrorPermissionDenied) getNotificationRuleRes()       {}
func (*ErrorPermissionDenied) getNotificationSettingRes()    {}
func (*ErrorPermissionDenied) getProjectRes()                {}
func (*ErrorPermissionDenied) getProjectTeamRes()            {}
func (*ErrorPermissionDenied) listNotificationRulesRes()     {}
func (*ErrorPermissionDenied) listNotificationSettingsRes()  {}
func (*ErrorPermissionDenied) listUsersForTeamRes()          {}
func (*ErrorPermissionDenied) listUsersRes()                 {}
func (*ErrorPermissionDenied) removeTeamMemberRes()          {}
func (*ErrorPermissionDenied) setSuperuserStatusRes()        {}
func (*ErrorPermissionDenied) setUserActiveStatusRes()       {}
func (*ErrorPermissionDenied) updateNotificationRuleRes()    {}
func (*ErrorPermissionDenied) updateNotificationSettingRes() {}
func (*ErrorPermissionDenied) updateProjectRes()             {}
func (*ErrorPermissionDenied) userChangeMyPasswordRes()      {}

type ErrorPermissionDeniedError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorPermissionDeniedError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorPermissionDeniedError) SetMessage(val OptString) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorTooManyRequests
type ErrorTooManyRequests struct {
	Error ErrorTooManyRequestsError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorTooManyRequests) GetError() ErrorTooManyRequestsError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorTooManyRequests) SetError(val ErrorTooManyRequestsError) {
	s.Error = val
}

func (*ErrorTooManyRequests) confirm2FARes() {}
func (*ErrorTooManyRequests) verify2FARes()  {}

type ErrorTooManyRequestsError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorTooManyRequestsError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorTooManyRequestsError) SetMessage(val OptString) {
	s.Message = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorUnauthorized
type ErrorUnauthorized struct {
	Error ErrorUnauthorizedError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorUnauthorized) GetError() ErrorUnauthorizedError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorUnauthorized) SetError(val ErrorUnauthorizedError) {
	s.Error = val
}

func (*ErrorUnauthorized) addProjectRes()                        {}
func (*ErrorUnauthorized) addTeamMemberRes()                     {}
func (*ErrorUnauthorized) archiveProjectRes()                    {}
func (*ErrorUnauthorized) changeIssueStatusRes()                 {}
func (*ErrorUnauthorized) changeTeamMemberRoleRes()              {}
func (*ErrorUnauthorized) checkTeamExistsRes()                   {}
func (*ErrorUnauthorized) compareProjectReleasesAnalyticsRes()   {}
func (*ErrorUnauthorized) confirm2FARes()                        {}
func (*ErrorUnauthorized) createNotificationRuleRes()            {}
func (*ErrorUnauthorized) createNotificationSettingRes()         {}
func (*ErrorUnauthorized) createTeamRes()                        {}
func (*ErrorUnauthorized) createUserRes()                        {}
func (*ErrorUnauthorized) deleteNotificationRuleRes()            {}
func (*ErrorUnauthorized) deleteNotificationSettingRes()         {}
func (*ErrorUnauthorized) deleteTeamRes()                        {}
func (*ErrorUnauthorized) deleteUserRes()                        {}
func (*ErrorUnauthorized) disable2FARes()                        {}
func (*ErrorUnauthorized) getCurrentUserRes()                    {}
func (*ErrorUnauthorized) getEventsTimeseriesRes()               {}
func (*ErrorUnauthorized) getIssueRes()                          {}
func (*ErrorUnauthorized) getIssuesTimeseriesRes()               {}
func (*ErrorUnauthorized) getNotificationRuleRes()               {}
func (*ErrorUnauthorized) getNotificationSettingRes()            {}
func (*ErrorUnauthorized) getProjectIssueEventsTimeseriesRes()   {}
func (*ErrorUnauthorized) getProjectIssueTimeseriesRes()         {}
func (*ErrorUnauthorized) getProjectReleaseAnalyticsDetailsRes() {}
func (*ErrorUnauthorized) getProjectReleaseErrorsTimeseriesRes() {}
func (*ErrorUnauthorized) getProjectReleaseSegmentsRes()         {}
func (*ErrorUnauthorized) getProjectReleasesAnalyticsRes()       {}
func (*ErrorUnauthorized) getProjectRes()                        {}
func (*ErrorUnauthorized) getProjectStatsRes()                   {}
func (*ErrorUnauthorized) getProjectTeamRes()                    {}
func (*ErrorUnauthorized) getRecentIssuesRes()                   {}
func (*ErrorUnauthorized) getTeamRes()                           {}
func (*ErrorUnauthorized) getUnreadNotificationsCountRes()       {}
func (*ErrorUnauthorized) getUserNotificationsRes()              {}
func (*ErrorUnauthorized) listIssuesRes()                        {}
func (*ErrorUnauthorized) listNotificationRulesRes()             {}
func (*ErrorUnauthorized) listNotificationSettingsRes()          {}
func (*ErrorUnauthorized) listProjectsRes()                      {}
func (*ErrorUnauthorized) listTeamsRes()                         {}
func (*ErrorUnauthorized) listUsersForTeamRes()                  {}
func (*ErrorUnauthorized) listUsersRes()                         {}
func (*ErrorUnauthorized) markAllNotificationsAsReadRes()        {}
func (*ErrorUnauthorized) markNotificationAsReadRes()            {}
func (*ErrorUnauthorized) recentProjectsListRes()                {}
func (*ErrorUnauthorized) refreshTokenRes()                      {}
func (*ErrorUnauthorized) removeTeamMemberRes()                  {}
func (*ErrorUnauthorized) reset2FARes()                          {}
func (*ErrorUnauthorized) resetPasswordRes()                     {}
func (*ErrorUnauthorized) send2FACodeRes()                       {}
func (*ErrorUnauthorized) setSuperuserStatusRes()                {}
func (*ErrorUnauthorized) setUserActiveStatusRes()               {}
func (*ErrorUnauthorized) setup2FARes()                          {}
func (*ErrorUnauthorized) updateNotificationRuleRes()            {}
func (*ErrorUnauthorized) updateNotificationSettingRes()         {}
func (*ErrorUnauthorized) updateProjectRes()                     {}
func (*ErrorUnauthorized) userChangeMyPasswordRes()              {}
func (*ErrorUnauthorized) verify2FARes()                         {}

type ErrorUnauthorizedError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorUnauthorizedError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorUnauthorizedError) SetMessage(val OptString) {
	s.Message = val
}

// ForgotPasswordNoContent is response for ForgotPassword operation.
type ForgotPasswordNoContent struct{}

func (*ForgotPasswordNoContent) forgotPasswordRes() {}

// Ref: #/components/schemas/ForgotPasswordRequest
type ForgotPasswordRequest struct {
	Email string `json:"email"`
}

// GetEmail returns the value of Email.
func (s *ForgotPasswordRequest) GetEmail() string {
	return s.Email
}

// SetEmail sets the value of Email.
func (s *ForgotPasswordRequest) SetEmail(val string) {
	s.Email = val
}

type GetProjectReleaseErrorsTimeseriesGroupBy string

const (
	GetProjectReleaseErrorsTimeseriesGroupByNone  GetProjectReleaseErrorsTimeseriesGroupBy = "none"
	GetProjectReleaseErrorsTimeseriesGroupByLevel GetProjectReleaseErrorsTimeseriesGroupBy = "level"
)

// AllValues returns all GetProjectReleaseErrorsTimeseriesGroupBy values.
func (GetProjectReleaseErrorsTimeseriesGroupBy) AllValues() []GetProjectReleaseErrorsTimeseriesGroupBy {
	return []GetProjectReleaseErrorsTimeseriesGroupBy{
		GetProjectReleaseErrorsTimeseriesGroupByNone,
		GetProjectReleaseErrorsTimeseriesGroupByLevel,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetProjectReleaseErrorsTimeseriesGroupBy) MarshalText() ([]byte, error) {
	switch s {
	case GetProjectReleaseErrorsTimeseriesGroupByNone:
		return []byte(s), nil
	case GetProjectReleaseErrorsTimeseriesGroupByLevel:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetProjectReleaseErrorsTimeseriesGroupBy) UnmarshalText(data []byte) error {
	switch GetProjectReleaseErrorsTimeseriesGroupBy(data) {
	case GetProjectReleaseErrorsTimeseriesGroupByNone:
		*s = GetProjectReleaseErrorsTimeseriesGroupByNone
		return nil
	case GetProjectReleaseErrorsTimeseriesGroupByLevel:
		*s = GetProjectReleaseErrorsTimeseriesGroupByLevel
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetProjectReleaseSegmentsSegment string

const (
	GetProjectReleaseSegmentsSegmentPlatform    GetProjectReleaseSegmentsSegment = "platform"
	GetProjectReleaseSegmentsSegmentBrowserName GetProjectReleaseSegmentsSegment = "browser_name"
	GetProjectReleaseSegmentsSegmentOsName      GetProjectReleaseSegmentsSegment = "os_name"
	GetProjectReleaseSegmentsSegmentDeviceArch  GetProjectReleaseSegmentsSegment = "device_arch"
	GetProjectReleaseSegmentsSegmentRuntimeName GetProjectReleaseSegmentsSegment = "runtime_name"
)

// AllValues returns all GetProjectReleaseSegmentsSegment values.
func (GetProjectReleaseSegmentsSegment) AllValues() []GetProjectReleaseSegmentsSegment {
	return []GetProjectReleaseSegmentsSegment{
		GetProjectReleaseSegmentsSegmentPlatform,
		GetProjectReleaseSegmentsSegmentBrowserName,
		GetProjectReleaseSegmentsSegmentOsName,
		GetProjectReleaseSegmentsSegmentDeviceArch,
		GetProjectReleaseSegmentsSegmentRuntimeName,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetProjectReleaseSegmentsSegment) MarshalText() ([]byte, error) {
	switch s {
	case GetProjectReleaseSegmentsSegmentPlatform:
		return []byte(s), nil
	case GetProjectReleaseSegmentsSegmentBrowserName:
		return []byte(s), nil
	case GetProjectReleaseSegmentsSegmentOsName:
		return []byte(s), nil
	case GetProjectReleaseSegmentsSegmentDeviceArch:
		return []byte(s), nil
	case GetProjectReleaseSegmentsSegmentRuntimeName:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetProjectReleaseSegmentsSegment) UnmarshalText(data []byte) error {
	switch GetProjectReleaseSegmentsSegment(data) {
	case GetProjectReleaseSegmentsSegmentPlatform:
		*s = GetProjectReleaseSegmentsSegmentPlatform
		return nil
	case GetProjectReleaseSegmentsSegmentBrowserName:
		*s = GetProjectReleaseSegmentsSegmentBrowserName
		return nil
	case GetProjectReleaseSegmentsSegmentOsName:
		*s = GetProjectReleaseSegmentsSegmentOsName
		return nil
	case GetProjectReleaseSegmentsSegmentDeviceArch:
		*s = GetProjectReleaseSegmentsSegmentDeviceArch
		return nil
	case GetProjectReleaseSegmentsSegmentRuntimeName:
		*s = GetProjectReleaseSegmentsSegmentRuntimeName
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetProjectReleasesAnalyticsOKApplicationJSON []ReleaseAnalyticsSummary

func (*GetProjectReleasesAnalyticsOKApplicationJSON) getProjectReleasesAnalyticsRes() {}

type GetProjectStatsPeriod string

const (
	GetProjectStatsPeriod10m GetProjectStatsPeriod = "10m"
	GetProjectStatsPeriod30m GetProjectStatsPeriod = "30m"
	GetProjectStatsPeriod1h  GetProjectStatsPeriod = "1h"
	GetProjectStatsPeriod3h  GetProjectStatsPeriod = "3h"
	GetProjectStatsPeriod6h  GetProjectStatsPeriod = "6h"
	GetProjectStatsPeriod12h GetProjectStatsPeriod = "12h"
	GetProjectStatsPeriod24h GetProjectStatsPeriod = "24h"
	GetProjectStatsPeriod3d  GetProjectStatsPeriod = "3d"
	GetProjectStatsPeriod7d  GetProjectStatsPeriod = "7d"
	GetProjectStatsPeriod14d GetProjectStatsPeriod = "14d"
	GetProjectStatsPeriod30d GetProjectStatsPeriod = "30d"
)

// AllValues returns all GetProjectStatsPeriod values.
func (GetProjectStatsPeriod) AllValues() []GetProjectStatsPeriod {
	return []GetProjectStatsPeriod{
		GetProjectStatsPeriod10m,
		GetProjectStatsPeriod30m,
		GetProjectStatsPeriod1h,
		GetProjectStatsPeriod3h,
		GetProjectStatsPeriod6h,
		GetProjectStatsPeriod12h,
		GetProjectStatsPeriod24h,
		GetProjectStatsPeriod3d,
		GetProjectStatsPeriod7d,
		GetProjectStatsPeriod14d,
		GetProjectStatsPeriod30d,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetProjectStatsPeriod) MarshalText() ([]byte, error) {
	switch s {
	case GetProjectStatsPeriod10m:
		return []byte(s), nil
	case GetProjectStatsPeriod30m:
		return []byte(s), nil
	case GetProjectStatsPeriod1h:
		return []byte(s), nil
	case GetProjectStatsPeriod3h:
		return []byte(s), nil
	case GetProjectStatsPeriod6h:
		return []byte(s), nil
	case GetProjectStatsPeriod12h:
		return []byte(s), nil
	case GetProjectStatsPeriod24h:
		return []byte(s), nil
	case GetProjectStatsPeriod3d:
		return []byte(s), nil
	case GetProjectStatsPeriod7d:
		return []byte(s), nil
	case GetProjectStatsPeriod14d:
		return []byte(s), nil
	case GetProjectStatsPeriod30d:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetProjectStatsPeriod) UnmarshalText(data []byte) error {
	switch GetProjectStatsPeriod(data) {
	case GetProjectStatsPeriod10m:
		*s = GetProjectStatsPeriod10m
		return nil
	case GetProjectStatsPeriod30m:
		*s = GetProjectStatsPeriod30m
		return nil
	case GetProjectStatsPeriod1h:
		*s = GetProjectStatsPeriod1h
		return nil
	case GetProjectStatsPeriod3h:
		*s = GetProjectStatsPeriod3h
		return nil
	case GetProjectStatsPeriod6h:
		*s = GetProjectStatsPeriod6h
		return nil
	case GetProjectStatsPeriod12h:
		*s = GetProjectStatsPeriod12h
		return nil
	case GetProjectStatsPeriod24h:
		*s = GetProjectStatsPeriod24h
		return nil
	case GetProjectStatsPeriod3d:
		*s = GetProjectStatsPeriod3d
		return nil
	case GetProjectStatsPeriod7d:
		*s = GetProjectStatsPeriod7d
		return nil
	case GetProjectStatsPeriod14d:
		*s = GetProjectStatsPeriod14d
		return nil
	case GetProjectStatsPeriod30d:
		*s = GetProjectStatsPeriod30d
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Issue
type Issue struct {
	ID          uint        `json:"id"`
	ProjectID   uint        `json:"project_id"`
	Source      IssueSource `json:"source"`
	Status      IssueStatus `json:"status"`
	ProjectName string      `json:"project_name"`
	Title       string      `json:"title"`
	Message     string      `json:"message"`
	Level       IssueLevel  `json:"level"`
	Platform    string      `json:"platform"`
	Count       uint        `json:"count"`
	FirstSeen   time.Time   `json:"first_seen"`
	LastSeen    time.Time   `json:"last_seen"`
	ResolvedAt  OptDateTime `json:"resolved_at"`
	ResolvedBy  OptString   `json:"resolved_by"`
}

// GetID returns the value of ID.
func (s *Issue) GetID() uint {
	return s.ID
}

// GetProjectID returns the value of ProjectID.
func (s *Issue) GetProjectID() uint {
	return s.ProjectID
}

// GetSource returns the value of Source.
func (s *Issue) GetSource() IssueSource {
	return s.Source
}

// GetStatus returns the value of Status.
func (s *Issue) GetStatus() IssueStatus {
	return s.Status
}

// GetProjectName returns the value of ProjectName.
func (s *Issue) GetProjectName() string {
	return s.ProjectName
}

// GetTitle returns the value of Title.
func (s *Issue) GetTitle() string {
	return s.Title
}

// GetMessage returns the value of Message.
func (s *Issue) GetMessage() string {
	return s.Message
}

// GetLevel returns the value of Level.
func (s *Issue) GetLevel() IssueLevel {
	return s.Level
}

// GetPlatform returns the value of Platform.
func (s *Issue) GetPlatform() string {
	return s.Platform
}

// GetCount returns the value of Count.
func (s *Issue) GetCount() uint {
	return s.Count
}

// GetFirstSeen returns the value of FirstSeen.
func (s *Issue) GetFirstSeen() time.Time {
	return s.FirstSeen
}

// GetLastSeen returns the value of LastSeen.
func (s *Issue) GetLastSeen() time.Time {
	return s.LastSeen
}

// GetResolvedAt returns the value of ResolvedAt.
func (s *Issue) GetResolvedAt() OptDateTime {
	return s.ResolvedAt
}

// GetResolvedBy returns the value of ResolvedBy.
func (s *Issue) GetResolvedBy() OptString {
	return s.ResolvedBy
}

// SetID sets the value of ID.
func (s *Issue) SetID(val uint) {
	s.ID = val
}

// SetProjectID sets the value of ProjectID.
func (s *Issue) SetProjectID(val uint) {
	s.ProjectID = val
}

// SetSource sets the value of Source.
func (s *Issue) SetSource(val IssueSource) {
	s.Source = val
}

// SetStatus sets the value of Status.
func (s *Issue) SetStatus(val IssueStatus) {
	s.Status = val
}

// SetProjectName sets the value of ProjectName.
func (s *Issue) SetProjectName(val string) {
	s.ProjectName = val
}

// SetTitle sets the value of Title.
func (s *Issue) SetTitle(val string) {
	s.Title = val
}

// SetMessage sets the value of Message.
func (s *Issue) SetMessage(val string) {
	s.Message = val
}

// SetLevel sets the value of Level.
func (s *Issue) SetLevel(val IssueLevel) {
	s.Level = val
}

// SetPlatform sets the value of Platform.
func (s *Issue) SetPlatform(val string) {
	s.Platform = val
}

// SetCount sets the value of Count.
func (s *Issue) SetCount(val uint) {
	s.Count = val
}

// SetFirstSeen sets the value of FirstSeen.
func (s *Issue) SetFirstSeen(val time.Time) {
	s.FirstSeen = val
}

// SetLastSeen sets the value of LastSeen.
func (s *Issue) SetLastSeen(val time.Time) {
	s.LastSeen = val
}

// SetResolvedAt sets the value of ResolvedAt.
func (s *Issue) SetResolvedAt(val OptDateTime) {
	s.ResolvedAt = val
}

// SetResolvedBy sets the value of ResolvedBy.
func (s *Issue) SetResolvedBy(val OptString) {
	s.ResolvedBy = val
}

// Full representation of domain.Event.
// Ref: #/components/schemas/IssueEvent
type IssueEvent struct {
	// Unique identifier of the event (domain.Event.ID).
	EventID string `json:"event_id"`
	// Time when the event occurred.
	Timestamp time.Time `json:"timestamp"`
	// Hash used for grouping events.
	GroupHash OptString `json:"group_hash"`
	// Identifier of the project that owns the event.
	ProjectID uint        `json:"project_id"`
	Level     IssueLevel  `json:"level"`
	Source    IssueSource `json:"source"`
	// Platform that sent the event.
	Platform string `json:"platform"`
	// Short textual description of the event.
	Message string `json:"message"`
	// Raw JSON payload as received from the client.
	Payload OptIssueEventPayload `json:"payload"`
	// Key-value tags attached to the event.
	Tags OptIssueEventTags `json:"tags"`
	// Hostname of the server where the event happened.
	ServerName OptString `json:"server_name"`
	// Runtime environment (production, staging, etc.).
	Environment OptString `json:"environment"`
	// Application release version.
	Release OptString `json:"release"`
	// Exception class/type.
	ExceptionType OptNilString `json:"exception_type"`
	// Exception message.
	ExceptionValue OptNilString `json:"exception_value"`
	// Exception stacktrace.
	ExceptionStacktrace OptNilString `json:"exception_stacktrace"`
	// Full request URL.
	RequestURL OptNilString `json:"request_url"`
	// HTTP method.
	RequestMethod OptNilString `json:"request_method"`
	// Raw query string.
	RequestQuery OptNilString `json:"request_query"`
	// HTTP headers.
	RequestHeaders OptNilIssueEventRequestHeaders `json:"request_headers"`
	// Request body (as sent).
	RequestData OptNilString `json:"request_data"`
	// Cookies string.
	RequestCookies OptNilString `json:"request_cookies"`
	// Client IP address.
	RequestIP OptNilString `json:"request_ip"`
	// User-Agent header.
	UserAgent OptNilString `json:"user_agent"`
	// User identifier.
	UserID OptNilString `json:"user_id"`
	// User email address.
	UserEmail OptNilString `json:"user_email"`
	// Runtime name (e.g., node, python).
	RuntimeName OptNilString `json:"runtime_name"`
	// Runtime version.
	RuntimeVersion OptNilString `json:"runtime_version"`
	// Operating system name.
	OsName OptNilString `json:"os_name"`
	// Operating system version.
	OsVersion OptNilString `json:"os_version"`
	// Browser name.
	BrowserName OptNilString `json:"browser_name"`
	// Browser version.
	BrowserVersion OptNilString `json:"browser_version"`
	DeviceArch     OptNilString `json:"device_arch"`
}

// GetEventID returns the value of EventID.
func (s *IssueEvent) GetEventID() string {
	return s.EventID
}

// GetTimestamp returns the value of Timestamp.
func (s *IssueEvent) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetGroupHash returns the value of GroupHash.
func (s *IssueEvent) GetGroupHash() OptString {
	return s.GroupHash
}

// GetProjectID returns the value of ProjectID.
func (s *IssueEvent) GetProjectID() uint {
	return s.ProjectID
}

// GetLevel returns the value of Level.
func (s *IssueEvent) GetLevel() IssueLevel {
	return s.Level
}

// GetSource returns the value of Source.
func (s *IssueEvent) GetSource() IssueSource {
	return s.Source
}

// GetPlatform returns the value of Platform.
func (s *IssueEvent) GetPlatform() string {
	return s.Platform
}

// GetMessage returns the value of Message.
func (s *IssueEvent) GetMessage() string {
	return s.Message
}

// GetPayload returns the value of Payload.
func (s *IssueEvent) GetPayload() OptIssueEventPayload {
	return s.Payload
}

// GetTags returns the value of Tags.
func (s *IssueEvent) GetTags() OptIssueEventTags {
	return s.Tags
}

// GetServerName returns the value of ServerName.
func (s *IssueEvent) GetServerName() OptString {
	return s.ServerName
}

// GetEnvironment returns the value of Environment.
func (s *IssueEvent) GetEnvironment() OptString {
	return s.Environment
}

// GetRelease returns the value of Release.
func (s *IssueEvent) GetRelease() OptString {
	return s.Release
}

// GetExceptionType returns the value of ExceptionType.
func (s *IssueEvent) GetExceptionType() OptNilString {
	return s.ExceptionType
}

// GetExceptionValue returns the value of ExceptionValue.
func (s *IssueEvent) GetExceptionValue() OptNilString {
	return s.ExceptionValue
}

// GetExceptionStacktrace returns the value of ExceptionStacktrace.
func (s *IssueEvent) GetExceptionStacktrace() OptNilString {
	return s.ExceptionStacktrace
}

// GetRequestURL returns the value of RequestURL.
func (s *IssueEvent) GetRequestURL() OptNilString {
	return s.RequestURL
}

// GetRequestMethod returns the value of RequestMethod.
func (s *IssueEvent) GetRequestMethod() OptNilString {
	return s.RequestMethod
}

// GetRequestQuery returns the value of RequestQuery.
func (s *IssueEvent) GetRequestQuery() OptNilString {
	return s.RequestQuery
}

// GetRequestHeaders returns the value of RequestHeaders.
func (s *IssueEvent) GetRequestHeaders() OptNilIssueEventRequestHeaders {
	return s.RequestHeaders
}

// GetRequestData returns the value of RequestData.
func (s *IssueEvent) GetRequestData() OptNilString {
	return s.RequestData
}

// GetRequestCookies returns the value of RequestCookies.
func (s *IssueEvent) GetRequestCookies() OptNilString {
	return s.RequestCookies
}

// GetRequestIP returns the value of RequestIP.
func (s *IssueEvent) GetRequestIP() OptNilString {
	return s.RequestIP
}

// GetUserAgent returns the value of UserAgent.
func (s *IssueEvent) GetUserAgent() OptNilString {
	return s.UserAgent
}

// GetUserID returns the value of UserID.
func (s *IssueEvent) GetUserID() OptNilString {
	return s.UserID
}

// GetUserEmail returns the value of UserEmail.
func (s *IssueEvent) GetUserEmail() OptNilString {
	return s.UserEmail
}

// GetRuntimeName returns the value of RuntimeName.
func (s *IssueEvent) GetRuntimeName() OptNilString {
	return s.RuntimeName
}

// GetRuntimeVersion returns the value of RuntimeVersion.
func (s *IssueEvent) GetRuntimeVersion() OptNilString {
	return s.RuntimeVersion
}

// GetOsName returns the value of OsName.
func (s *IssueEvent) GetOsName() OptNilString {
	return s.OsName
}

// GetOsVersion returns the value of OsVersion.
func (s *IssueEvent) GetOsVersion() OptNilString {
	return s.OsVersion
}

// GetBrowserName returns the value of BrowserName.
func (s *IssueEvent) GetBrowserName() OptNilString {
	return s.BrowserName
}

// GetBrowserVersion returns the value of BrowserVersion.
func (s *IssueEvent) GetBrowserVersion() OptNilString {
	return s.BrowserVersion
}

// GetDeviceArch returns the value of DeviceArch.
func (s *IssueEvent) GetDeviceArch() OptNilString {
	return s.DeviceArch
}

// SetEventID sets the value of EventID.
func (s *IssueEvent) SetEventID(val string) {
	s.EventID = val
}

// SetTimestamp sets the value of Timestamp.
func (s *IssueEvent) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetGroupHash sets the value of GroupHash.
func (s *IssueEvent) SetGroupHash(val OptString) {
	s.GroupHash = val
}

// SetProjectID sets the value of ProjectID.
func (s *IssueEvent) SetProjectID(val uint) {
	s.ProjectID = val
}

// SetLevel sets the value of Level.
func (s *IssueEvent) SetLevel(val IssueLevel) {
	s.Level = val
}

// SetSource sets the value of Source.
func (s *IssueEvent) SetSource(val IssueSource) {
	s.Source = val
}

// SetPlatform sets the value of Platform.
func (s *IssueEvent) SetPlatform(val string) {
	s.Platform = val
}

// SetMessage sets the value of Message.
func (s *IssueEvent) SetMessage(val string) {
	s.Message = val
}

// SetPayload sets the value of Payload.
func (s *IssueEvent) SetPayload(val OptIssueEventPayload) {
	s.Payload = val
}

// SetTags sets the value of Tags.
func (s *IssueEvent) SetTags(val OptIssueEventTags) {
	s.Tags = val
}

// SetServerName sets the value of ServerName.
func (s *IssueEvent) SetServerName(val OptString) {
	s.ServerName = val
}

// SetEnvironment sets the value of Environment.
func (s *IssueEvent) SetEnvironment(val OptString) {
	s.Environment = val
}

// SetRelease sets the value of Release.
func (s *IssueEvent) SetRelease(val OptString) {
	s.Release = val
}

// SetExceptionType sets the value of ExceptionType.
func (s *IssueEvent) SetExceptionType(val OptNilString) {
	s.ExceptionType = val
}

// SetExceptionValue sets the value of ExceptionValue.
func (s *IssueEvent) SetExceptionValue(val OptNilString) {
	s.ExceptionValue = val
}

// SetExceptionStacktrace sets the value of ExceptionStacktrace.
func (s *IssueEvent) SetExceptionStacktrace(val OptNilString) {
	s.ExceptionStacktrace = val
}

// SetRequestURL sets the value of RequestURL.
func (s *IssueEvent) SetRequestURL(val OptNilString) {
	s.RequestURL = val
}

// SetRequestMethod sets the value of RequestMethod.
func (s *IssueEvent) SetRequestMethod(val OptNilString) {
	s.RequestMethod = val
}

// SetRequestQuery sets the value of RequestQuery.
func (s *IssueEvent) SetRequestQuery(val OptNilString) {
	s.RequestQuery = val
}

// SetRequestHeaders sets the value of RequestHeaders.
func (s *IssueEvent) SetRequestHeaders(val OptNilIssueEventRequestHeaders) {
	s.RequestHeaders = val
}

// SetRequestData sets the value of RequestData.
func (s *IssueEvent) SetRequestData(val OptNilString) {
	s.RequestData = val
}

// SetRequestCookies sets the value of RequestCookies.
func (s *IssueEvent) SetRequestCookies(val OptNilString) {
	s.RequestCookies = val
}

// SetRequestIP sets the value of RequestIP.
func (s *IssueEvent) SetRequestIP(val OptNilString) {
	s.RequestIP = val
}

// SetUserAgent sets the value of UserAgent.
func (s *IssueEvent) SetUserAgent(val OptNilString) {
	s.UserAgent = val
}

// SetUserID sets the value of UserID.
func (s *IssueEvent) SetUserID(val OptNilString) {
	s.UserID = val
}

// SetUserEmail sets the value of UserEmail.
func (s *IssueEvent) SetUserEmail(val OptNilString) {
	s.UserEmail = val
}

// SetRuntimeName sets the value of RuntimeName.
func (s *IssueEvent) SetRuntimeName(val OptNilString) {
	s.RuntimeName = val
}

// SetRuntimeVersion sets the value of RuntimeVersion.
func (s *IssueEvent) SetRuntimeVersion(val OptNilString) {
	s.RuntimeVersion = val
}

// SetOsName sets the value of OsName.
func (s *IssueEvent) SetOsName(val OptNilString) {
	s.OsName = val
}

// SetOsVersion sets the value of OsVersion.
func (s *IssueEvent) SetOsVersion(val OptNilString) {
	s.OsVersion = val
}

// SetBrowserName sets the value of BrowserName.
func (s *IssueEvent) SetBrowserName(val OptNilString) {
	s.BrowserName = val
}

// SetBrowserVersion sets the value of BrowserVersion.
func (s *IssueEvent) SetBrowserVersion(val OptNilString) {
	s.BrowserVersion = val
}

// SetDeviceArch sets the value of DeviceArch.
func (s *IssueEvent) SetDeviceArch(val OptNilString) {
	s.DeviceArch = val
}

// Raw JSON payload as received from the client.
type IssueEventPayload map[string]jx.Raw

func (s *IssueEventPayload) init() IssueEventPayload {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// HTTP headers.
type IssueEventRequestHeaders map[string]string

func (s *IssueEventRequestHeaders) init() IssueEventRequestHeaders {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Key-value tags attached to the event.
type IssueEventTags map[string]string

func (s *IssueEventTags) init() IssueEventTags {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Issue level.
// Ref: #/components/schemas/IssueLevel
type IssueLevel string

const (
	IssueLevelFatal     IssueLevel = "fatal"
	IssueLevelException IssueLevel = "exception"
	IssueLevelError     IssueLevel = "error"
	IssueLevelWarning   IssueLevel = "warning"
	IssueLevelInfo      IssueLevel = "info"
	IssueLevelDebug     IssueLevel = "debug"
)

// AllValues returns all IssueLevel values.
func (IssueLevel) AllValues() []IssueLevel {
	return []IssueLevel{
		IssueLevelFatal,
		IssueLevelException,
		IssueLevelError,
		IssueLevelWarning,
		IssueLevelInfo,
		IssueLevelDebug,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s IssueLevel) MarshalText() ([]byte, error) {
	switch s {
	case IssueLevelFatal:
		return []byte(s), nil
	case IssueLevelException:
		return []byte(s), nil
	case IssueLevelError:
		return []byte(s), nil
	case IssueLevelWarning:
		return []byte(s), nil
	case IssueLevelInfo:
		return []byte(s), nil
	case IssueLevelDebug:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssueLevel) UnmarshalText(data []byte) error {
	switch IssueLevel(data) {
	case IssueLevelFatal:
		*s = IssueLevelFatal
		return nil
	case IssueLevelException:
		*s = IssueLevelException
		return nil
	case IssueLevelError:
		*s = IssueLevelError
		return nil
	case IssueLevelWarning:
		*s = IssueLevelWarning
		return nil
	case IssueLevelInfo:
		*s = IssueLevelInfo
		return nil
	case IssueLevelDebug:
		*s = IssueLevelDebug
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/IssueResponse
type IssueResponse struct {
	Source IssueSource  `json:"source"`
	Issue  Issue        `json:"issue"`
	Events []IssueEvent `json:"events"`
}

// GetSource returns the value of Source.
func (s *IssueResponse) GetSource() IssueSource {
	return s.Source
}

// GetIssue returns the value of Issue.
func (s *IssueResponse) GetIssue() Issue {
	return s.Issue
}

// GetEvents returns the value of Events.
func (s *IssueResponse) GetEvents() []IssueEvent {
	return s.Events
}

// SetSource sets the value of Source.
func (s *IssueResponse) SetSource(val IssueSource) {
	s.Source = val
}

// SetIssue sets the value of Issue.
func (s *IssueResponse) SetIssue(val Issue) {
	s.Issue = val
}

// SetEvents sets the value of Events.
func (s *IssueResponse) SetEvents(val []IssueEvent) {
	s.Events = val
}

func (*IssueResponse) getIssueRes() {}

// Column to sort issues by.
// Ref: #/components/schemas/IssueSortColumn
type IssueSortColumn string

const (
	IssueSortColumnTotalEvents IssueSortColumn = "total_events"
	IssueSortColumnFirstSeen   IssueSortColumn = "first_seen"
	IssueSortColumnLastSeen    IssueSortColumn = "last_seen"
)

// AllValues returns all IssueSortColumn values.
func (IssueSortColumn) AllValues() []IssueSortColumn {
	return []IssueSortColumn{
		IssueSortColumnTotalEvents,
		IssueSortColumnFirstSeen,
		IssueSortColumnLastSeen,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s IssueSortColumn) MarshalText() ([]byte, error) {
	switch s {
	case IssueSortColumnTotalEvents:
		return []byte(s), nil
	case IssueSortColumnFirstSeen:
		return []byte(s), nil
	case IssueSortColumnLastSeen:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssueSortColumn) UnmarshalText(data []byte) error {
	switch IssueSortColumn(data) {
	case IssueSortColumnTotalEvents:
		*s = IssueSortColumnTotalEvents
		return nil
	case IssueSortColumnFirstSeen:
		*s = IssueSortColumnFirstSeen
		return nil
	case IssueSortColumnLastSeen:
		*s = IssueSortColumnLastSeen
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Identifies where the issue comes from.
// Ref: #/components/schemas/IssueSource
type IssueSource string

const (
	IssueSourceEvent     IssueSource = "event"
	IssueSourceException IssueSource = "exception"
)

// AllValues returns all IssueSource values.
func (IssueSource) AllValues() []IssueSource {
	return []IssueSource{
		IssueSourceEvent,
		IssueSourceException,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s IssueSource) MarshalText() ([]byte, error) {
	switch s {
	case IssueSourceEvent:
		return []byte(s), nil
	case IssueSourceException:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssueSource) UnmarshalText(data []byte) error {
	switch IssueSource(data) {
	case IssueSourceEvent:
		*s = IssueSourceEvent
		return nil
	case IssueSourceException:
		*s = IssueSourceException
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Resolved or not.
// Ref: #/components/schemas/IssueStatus
type IssueStatus string

const (
	IssueStatusResolved   IssueStatus = "resolved"
	IssueStatusUnresolved IssueStatus = "unresolved"
	IssueStatusIgnored    IssueStatus = "ignored"
)

// AllValues returns all IssueStatus values.
func (IssueStatus) AllValues() []IssueStatus {
	return []IssueStatus{
		IssueStatusResolved,
		IssueStatusUnresolved,
		IssueStatusIgnored,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s IssueStatus) MarshalText() ([]byte, error) {
	switch s {
	case IssueStatusResolved:
		return []byte(s), nil
	case IssueStatusUnresolved:
		return []byte(s), nil
	case IssueStatusIgnored:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssueStatus) UnmarshalText(data []byte) error {
	switch IssueStatus(data) {
	case IssueStatusResolved:
		*s = IssueStatusResolved
		return nil
	case IssueStatusUnresolved:
		*s = IssueStatusUnresolved
		return nil
	case IssueStatusIgnored:
		*s = IssueStatusIgnored
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/IssueSummary
type IssueSummary struct {
	ID        uint       `json:"id"`
	ProjectID uint       `json:"project_id"`
	Title     string     `json:"title"`
	Level     IssueLevel `json:"level"`
	Count     uint       `json:"count"`
	LastSeen  time.Time  `json:"last_seen"`
}

// GetID returns the value of ID.
func (s *IssueSummary) GetID() uint {
	return s.ID
}

// GetProjectID returns the value of ProjectID.
func (s *IssueSummary) GetProjectID() uint {
	return s.ProjectID
}

// GetTitle returns the value of Title.
func (s *IssueSummary) GetTitle() string {
	return s.Title
}

// GetLevel returns the value of Level.
func (s *IssueSummary) GetLevel() IssueLevel {
	return s.Level
}

// GetCount returns the value of Count.
func (s *IssueSummary) GetCount() uint {
	return s.Count
}

// GetLastSeen returns the value of LastSeen.
func (s *IssueSummary) GetLastSeen() time.Time {
	return s.LastSeen
}

// SetID sets the value of ID.
func (s *IssueSummary) SetID(val uint) {
	s.ID = val
}

// SetProjectID sets the value of ProjectID.
func (s *IssueSummary) SetProjectID(val uint) {
	s.ProjectID = val
}

// SetTitle sets the value of Title.
func (s *IssueSummary) SetTitle(val string) {
	s.Title = val
}

// SetLevel sets the value of Level.
func (s *IssueSummary) SetLevel(val IssueLevel) {
	s.Level = val
}

// SetCount sets the value of Count.
func (s *IssueSummary) SetCount(val uint) {
	s.Count = val
}

// SetLastSeen sets the value of LastSeen.
func (s *IssueSummary) SetLastSeen(val time.Time) {
	s.LastSeen = val
}

// Ref: #/components/schemas/ListIssueSummariesResponse
type ListIssueSummariesResponse struct {
	Issues []IssueSummary `json:"issues"`
}

// GetIssues returns the value of Issues.
func (s *ListIssueSummariesResponse) GetIssues() []IssueSummary {
	return s.Issues
}

// SetIssues sets the value of Issues.
func (s *ListIssueSummariesResponse) SetIssues(val []IssueSummary) {
	s.Issues = val
}

func (*ListIssueSummariesResponse) getRecentIssuesRes() {}

// Ref: #/components/schemas/ListIssuesResponse
type ListIssuesResponse struct {
	Issues  []Issue `json:"issues"`
	Total   uint    `json:"total"`
	Page    uint    `json:"page"`
	PerPage uint    `json:"per_page"`
}

// GetIssues returns the value of Issues.
func (s *ListIssuesResponse) GetIssues() []Issue {
	return s.Issues
}

// GetTotal returns the value of Total.
func (s *ListIssuesResponse) GetTotal() uint {
	return s.Total
}

// GetPage returns the value of Page.
func (s *ListIssuesResponse) GetPage() uint {
	return s.Page
}

// GetPerPage returns the value of PerPage.
func (s *ListIssuesResponse) GetPerPage() uint {
	return s.PerPage
}

// SetIssues sets the value of Issues.
func (s *ListIssuesResponse) SetIssues(val []Issue) {
	s.Issues = val
}

// SetTotal sets the value of Total.
func (s *ListIssuesResponse) SetTotal(val uint) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *ListIssuesResponse) SetPage(val uint) {
	s.Page = val
}

// SetPerPage sets the value of PerPage.
func (s *ListIssuesResponse) SetPerPage(val uint) {
	s.PerPage = val
}

func (*ListIssuesResponse) listIssuesRes() {}

// Ref: #/components/schemas/ListNotificationRulesResponse
type ListNotificationRulesResponse struct {
	NotificationRules []NotificationRule `json:"notification_rules"`
}

// GetNotificationRules returns the value of NotificationRules.
func (s *ListNotificationRulesResponse) GetNotificationRules() []NotificationRule {
	return s.NotificationRules
}

// SetNotificationRules sets the value of NotificationRules.
func (s *ListNotificationRulesResponse) SetNotificationRules(val []NotificationRule) {
	s.NotificationRules = val
}

func (*ListNotificationRulesResponse) listNotificationRulesRes() {}

// Ref: #/components/schemas/ListNotificationSettingsResponse
type ListNotificationSettingsResponse struct {
	NotificationSettings []NotificationSetting `json:"notification_settings"`
}

// GetNotificationSettings returns the value of NotificationSettings.
func (s *ListNotificationSettingsResponse) GetNotificationSettings() []NotificationSetting {
	return s.NotificationSettings
}

// SetNotificationSettings sets the value of NotificationSettings.
func (s *ListNotificationSettingsResponse) SetNotificationSettings(val []NotificationSetting) {
	s.NotificationSettings = val
}

func (*ListNotificationSettingsResponse) listNotificationSettingsRes() {}

type ListProjectsResponse []Project

func (*ListProjectsResponse) listProjectsRes()       {}
func (*ListProjectsResponse) recentProjectsListRes() {}

type ListTeamsResponse []Team

func (*ListTeamsResponse) listTeamsRes() {}

type ListUsersResponse []User

func (*ListUsersResponse) listUsersForTeamRes() {}
func (*ListUsersResponse) listUsersRes()        {}

// Ref: #/components/schemas/LoginRequest
type LoginRequest struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *LoginRequest) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *LoginRequest) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *LoginRequest) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *LoginRequest) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/LoginResponse
type LoginResponse struct {
	AccessToken   string `json:"access_token"`
	RefreshToken  string `json:"refresh_token"`
	ExpiresIn     int    `json:"expires_in"`
	IsTmpPassword bool   `json:"is_tmp_password"`
}

// GetAccessToken returns the value of AccessToken.
func (s *LoginResponse) GetAccessToken() string {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *LoginResponse) GetRefreshToken() string {
	return s.RefreshToken
}

// GetExpiresIn returns the value of ExpiresIn.
func (s *LoginResponse) GetExpiresIn() int {
	return s.ExpiresIn
}

// GetIsTmpPassword returns the value of IsTmpPassword.
func (s *LoginResponse) GetIsTmpPassword() bool {
	return s.IsTmpPassword
}

// SetAccessToken sets the value of AccessToken.
func (s *LoginResponse) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *LoginResponse) SetRefreshToken(val string) {
	s.RefreshToken = val
}

// SetExpiresIn sets the value of ExpiresIn.
func (s *LoginResponse) SetExpiresIn(val int) {
	s.ExpiresIn = val
}

// SetIsTmpPassword sets the value of IsTmpPassword.
func (s *LoginResponse) SetIsTmpPassword(val bool) {
	s.IsTmpPassword = val
}

func (*LoginResponse) loginRes() {}

// MarkAllNotificationsAsReadNoContent is response for MarkAllNotificationsAsRead operation.
type MarkAllNotificationsAsReadNoContent struct{}

func (*MarkAllNotificationsAsReadNoContent) markAllNotificationsAsReadRes() {}

// MarkNotificationAsReadNoContent is response for MarkNotificationAsRead operation.
type MarkNotificationAsReadNoContent struct{}

func (*MarkNotificationAsReadNoContent) markNotificationAsReadRes() {}

// Type of notification channel (email, mattermost, slack, etc.).
// Ref: #/components/schemas/NotificationChannelType
type NotificationChannelType string

const (
	NotificationChannelTypeEmail      NotificationChannelType = "email"
	NotificationChannelTypeTelegram   NotificationChannelType = "telegram"
	NotificationChannelTypeSlack      NotificationChannelType = "slack"
	NotificationChannelTypeMattermost NotificationChannelType = "mattermost"
	NotificationChannelTypeWebhook    NotificationChannelType = "webhook"
	NotificationChannelTypePachca     NotificationChannelType = "pachca"
)

// AllValues returns all NotificationChannelType values.
func (NotificationChannelType) AllValues() []NotificationChannelType {
	return []NotificationChannelType{
		NotificationChannelTypeEmail,
		NotificationChannelTypeTelegram,
		NotificationChannelTypeSlack,
		NotificationChannelTypeMattermost,
		NotificationChannelTypeWebhook,
		NotificationChannelTypePachca,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NotificationChannelType) MarshalText() ([]byte, error) {
	switch s {
	case NotificationChannelTypeEmail:
		return []byte(s), nil
	case NotificationChannelTypeTelegram:
		return []byte(s), nil
	case NotificationChannelTypeSlack:
		return []byte(s), nil
	case NotificationChannelTypeMattermost:
		return []byte(s), nil
	case NotificationChannelTypeWebhook:
		return []byte(s), nil
	case NotificationChannelTypePachca:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NotificationChannelType) UnmarshalText(data []byte) error {
	switch NotificationChannelType(data) {
	case NotificationChannelTypeEmail:
		*s = NotificationChannelTypeEmail
		return nil
	case NotificationChannelTypeTelegram:
		*s = NotificationChannelTypeTelegram
		return nil
	case NotificationChannelTypeSlack:
		*s = NotificationChannelTypeSlack
		return nil
	case NotificationChannelTypeMattermost:
		*s = NotificationChannelTypeMattermost
		return nil
	case NotificationChannelTypeWebhook:
		*s = NotificationChannelTypeWebhook
		return nil
	case NotificationChannelTypePachca:
		*s = NotificationChannelTypePachca
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/NotificationRule
type NotificationRule struct {
	ID                    uint `json:"id"`
	NotificationSettingID uint `json:"notification_setting_id"`
	// Level of event to trigger notification (error, warning, info, etc.).
	EventLevel OptNilString `json:"event_level"`
	// Specific error fingerprint to trigger notification.
	Fingerprint OptNilString `json:"fingerprint"`
	// Trigger only for new errors.
	IsNewError OptNilBool `json:"is_new_error"`
	// Trigger only for regressions (resolved -> unresolved).
	IsRegression OptNilBool `json:"is_regression"`
	CreatedAt    time.Time  `json:"created_at"`
}

// GetID returns the value of ID.
func (s *NotificationRule) GetID() uint {
	return s.ID
}

// GetNotificationSettingID returns the value of NotificationSettingID.
func (s *NotificationRule) GetNotificationSettingID() uint {
	return s.NotificationSettingID
}

// GetEventLevel returns the value of EventLevel.
func (s *NotificationRule) GetEventLevel() OptNilString {
	return s.EventLevel
}

// GetFingerprint returns the value of Fingerprint.
func (s *NotificationRule) GetFingerprint() OptNilString {
	return s.Fingerprint
}

// GetIsNewError returns the value of IsNewError.
func (s *NotificationRule) GetIsNewError() OptNilBool {
	return s.IsNewError
}

// GetIsRegression returns the value of IsRegression.
func (s *NotificationRule) GetIsRegression() OptNilBool {
	return s.IsRegression
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NotificationRule) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *NotificationRule) SetID(val uint) {
	s.ID = val
}

// SetNotificationSettingID sets the value of NotificationSettingID.
func (s *NotificationRule) SetNotificationSettingID(val uint) {
	s.NotificationSettingID = val
}

// SetEventLevel sets the value of EventLevel.
func (s *NotificationRule) SetEventLevel(val OptNilString) {
	s.EventLevel = val
}

// SetFingerprint sets the value of Fingerprint.
func (s *NotificationRule) SetFingerprint(val OptNilString) {
	s.Fingerprint = val
}

// SetIsNewError sets the value of IsNewError.
func (s *NotificationRule) SetIsNewError(val OptNilBool) {
	s.IsNewError = val
}

// SetIsRegression sets the value of IsRegression.
func (s *NotificationRule) SetIsRegression(val OptNilBool) {
	s.IsRegression = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NotificationRule) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

func (*NotificationRule) createNotificationRuleRes() {}
func (*NotificationRule) getNotificationRuleRes()    {}
func (*NotificationRule) updateNotificationRuleRes() {}

// Ref: #/components/schemas/NotificationSetting
type NotificationSetting struct {
	ID        uint `json:"id"`
	ProjectID uint `json:"project_id"`
	// Type of notification channel (email, mattermost, slack, etc.).
	Type string `json:"type"`
	// Configuration for the notification channel (JSONB in database).
	Config    string    `json:"config"`
	Enabled   bool      `json:"enabled"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *NotificationSetting) GetID() uint {
	return s.ID
}

// GetProjectID returns the value of ProjectID.
func (s *NotificationSetting) GetProjectID() uint {
	return s.ProjectID
}

// GetType returns the value of Type.
func (s *NotificationSetting) GetType() string {
	return s.Type
}

// GetConfig returns the value of Config.
func (s *NotificationSetting) GetConfig() string {
	return s.Config
}

// GetEnabled returns the value of Enabled.
func (s *NotificationSetting) GetEnabled() bool {
	return s.Enabled
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NotificationSetting) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *NotificationSetting) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *NotificationSetting) SetID(val uint) {
	s.ID = val
}

// SetProjectID sets the value of ProjectID.
func (s *NotificationSetting) SetProjectID(val uint) {
	s.ProjectID = val
}

// SetType sets the value of Type.
func (s *NotificationSetting) SetType(val string) {
	s.Type = val
}

// SetConfig sets the value of Config.
func (s *NotificationSetting) SetConfig(val string) {
	s.Config = val
}

// SetEnabled sets the value of Enabled.
func (s *NotificationSetting) SetEnabled(val bool) {
	s.Enabled = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NotificationSetting) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *NotificationSetting) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*NotificationSetting) createNotificationSettingRes() {}
func (*NotificationSetting) getNotificationSettingRes()    {}
func (*NotificationSetting) updateNotificationSettingRes() {}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat32 returns new OptFloat32 with value set to v.
func NewOptFloat32(v float32) OptFloat32 {
	return OptFloat32{
		Value: v,
		Set:   true,
	}
}

// OptFloat32 is optional float32.
type OptFloat32 struct {
	Value float32
	Set   bool
}

// IsSet returns true if OptFloat32 was set.
func (o OptFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32) SetTo(v float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32) Get() (v float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetProjectReleaseErrorsTimeseriesGroupBy returns new OptGetProjectReleaseErrorsTimeseriesGroupBy with value set to v.
func NewOptGetProjectReleaseErrorsTimeseriesGroupBy(v GetProjectReleaseErrorsTimeseriesGroupBy) OptGetProjectReleaseErrorsTimeseriesGroupBy {
	return OptGetProjectReleaseErrorsTimeseriesGroupBy{
		Value: v,
		Set:   true,
	}
}

// OptGetProjectReleaseErrorsTimeseriesGroupBy is optional GetProjectReleaseErrorsTimeseriesGroupBy.
type OptGetProjectReleaseErrorsTimeseriesGroupBy struct {
	Value GetProjectReleaseErrorsTimeseriesGroupBy
	Set   bool
}

// IsSet returns true if OptGetProjectReleaseErrorsTimeseriesGroupBy was set.
func (o OptGetProjectReleaseErrorsTimeseriesGroupBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetProjectReleaseErrorsTimeseriesGroupBy) Reset() {
	var v GetProjectReleaseErrorsTimeseriesGroupBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetProjectReleaseErrorsTimeseriesGroupBy) SetTo(v GetProjectReleaseErrorsTimeseriesGroupBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetProjectReleaseErrorsTimeseriesGroupBy) Get() (v GetProjectReleaseErrorsTimeseriesGroupBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetProjectReleaseErrorsTimeseriesGroupBy) Or(d GetProjectReleaseErrorsTimeseriesGroupBy) GetProjectReleaseErrorsTimeseriesGroupBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueEventPayload returns new OptIssueEventPayload with value set to v.
func NewOptIssueEventPayload(v IssueEventPayload) OptIssueEventPayload {
	return OptIssueEventPayload{
		Value: v,
		Set:   true,
	}
}

// OptIssueEventPayload is optional IssueEventPayload.
type OptIssueEventPayload struct {
	Value IssueEventPayload
	Set   bool
}

// IsSet returns true if OptIssueEventPayload was set.
func (o OptIssueEventPayload) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueEventPayload) Reset() {
	var v IssueEventPayload
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueEventPayload) SetTo(v IssueEventPayload) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueEventPayload) Get() (v IssueEventPayload, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueEventPayload) Or(d IssueEventPayload) IssueEventPayload {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueEventTags returns new OptIssueEventTags with value set to v.
func NewOptIssueEventTags(v IssueEventTags) OptIssueEventTags {
	return OptIssueEventTags{
		Value: v,
		Set:   true,
	}
}

// OptIssueEventTags is optional IssueEventTags.
type OptIssueEventTags struct {
	Value IssueEventTags
	Set   bool
}

// IsSet returns true if OptIssueEventTags was set.
func (o OptIssueEventTags) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueEventTags) Reset() {
	var v IssueEventTags
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueEventTags) SetTo(v IssueEventTags) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueEventTags) Get() (v IssueEventTags, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueEventTags) Or(d IssueEventTags) IssueEventTags {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueLevel returns new OptIssueLevel with value set to v.
func NewOptIssueLevel(v IssueLevel) OptIssueLevel {
	return OptIssueLevel{
		Value: v,
		Set:   true,
	}
}

// OptIssueLevel is optional IssueLevel.
type OptIssueLevel struct {
	Value IssueLevel
	Set   bool
}

// IsSet returns true if OptIssueLevel was set.
func (o OptIssueLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueLevel) Reset() {
	var v IssueLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueLevel) SetTo(v IssueLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueLevel) Get() (v IssueLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueLevel) Or(d IssueLevel) IssueLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueSortColumn returns new OptIssueSortColumn with value set to v.
func NewOptIssueSortColumn(v IssueSortColumn) OptIssueSortColumn {
	return OptIssueSortColumn{
		Value: v,
		Set:   true,
	}
}

// OptIssueSortColumn is optional IssueSortColumn.
type OptIssueSortColumn struct {
	Value IssueSortColumn
	Set   bool
}

// IsSet returns true if OptIssueSortColumn was set.
func (o OptIssueSortColumn) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueSortColumn) Reset() {
	var v IssueSortColumn
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueSortColumn) SetTo(v IssueSortColumn) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueSortColumn) Get() (v IssueSortColumn, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueSortColumn) Or(d IssueSortColumn) IssueSortColumn {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueStatus returns new OptIssueStatus with value set to v.
func NewOptIssueStatus(v IssueStatus) OptIssueStatus {
	return OptIssueStatus{
		Value: v,
		Set:   true,
	}
}

// OptIssueStatus is optional IssueStatus.
type OptIssueStatus struct {
	Value IssueStatus
	Set   bool
}

// IsSet returns true if OptIssueStatus was set.
func (o OptIssueStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueStatus) Reset() {
	var v IssueStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueStatus) SetTo(v IssueStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueStatus) Get() (v IssueStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueStatus) Or(d IssueStatus) IssueStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilBool) SetToNull() {
	o.Set = true
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIssueEventRequestHeaders returns new OptNilIssueEventRequestHeaders with value set to v.
func NewOptNilIssueEventRequestHeaders(v IssueEventRequestHeaders) OptNilIssueEventRequestHeaders {
	return OptNilIssueEventRequestHeaders{
		Value: v,
		Set:   true,
	}
}

// OptNilIssueEventRequestHeaders is optional nullable IssueEventRequestHeaders.
type OptNilIssueEventRequestHeaders struct {
	Value IssueEventRequestHeaders
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIssueEventRequestHeaders was set.
func (o OptNilIssueEventRequestHeaders) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIssueEventRequestHeaders) Reset() {
	var v IssueEventRequestHeaders
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIssueEventRequestHeaders) SetTo(v IssueEventRequestHeaders) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIssueEventRequestHeaders) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIssueEventRequestHeaders) SetToNull() {
	o.Set = true
	o.Null = true
	var v IssueEventRequestHeaders
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIssueEventRequestHeaders) Get() (v IssueEventRequestHeaders, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIssueEventRequestHeaders) Or(d IssueEventRequestHeaders) IssueEventRequestHeaders {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUint returns new OptNilUint with value set to v.
func NewOptNilUint(v uint) OptNilUint {
	return OptNilUint{
		Value: v,
		Set:   true,
	}
}

// OptNilUint is optional nullable uint.
type OptNilUint struct {
	Value uint
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUint was set.
func (o OptNilUint) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUint) Reset() {
	var v uint
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUint) SetTo(v uint) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilUint) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilUint) SetToNull() {
	o.Set = true
	o.Null = true
	var v uint
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUint) Get() (v uint, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUint) Or(d uint) uint {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReleaseAnalyticsDetailsSegmentsBrowserName returns new OptReleaseAnalyticsDetailsSegmentsBrowserName with value set to v.
func NewOptReleaseAnalyticsDetailsSegmentsBrowserName(v ReleaseAnalyticsDetailsSegmentsBrowserName) OptReleaseAnalyticsDetailsSegmentsBrowserName {
	return OptReleaseAnalyticsDetailsSegmentsBrowserName{
		Value: v,
		Set:   true,
	}
}

// OptReleaseAnalyticsDetailsSegmentsBrowserName is optional ReleaseAnalyticsDetailsSegmentsBrowserName.
type OptReleaseAnalyticsDetailsSegmentsBrowserName struct {
	Value ReleaseAnalyticsDetailsSegmentsBrowserName
	Set   bool
}

// IsSet returns true if OptReleaseAnalyticsDetailsSegmentsBrowserName was set.
func (o OptReleaseAnalyticsDetailsSegmentsBrowserName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReleaseAnalyticsDetailsSegmentsBrowserName) Reset() {
	var v ReleaseAnalyticsDetailsSegmentsBrowserName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReleaseAnalyticsDetailsSegmentsBrowserName) SetTo(v ReleaseAnalyticsDetailsSegmentsBrowserName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReleaseAnalyticsDetailsSegmentsBrowserName) Get() (v ReleaseAnalyticsDetailsSegmentsBrowserName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReleaseAnalyticsDetailsSegmentsBrowserName) Or(d ReleaseAnalyticsDetailsSegmentsBrowserName) ReleaseAnalyticsDetailsSegmentsBrowserName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReleaseAnalyticsDetailsSegmentsDeviceArch returns new OptReleaseAnalyticsDetailsSegmentsDeviceArch with value set to v.
func NewOptReleaseAnalyticsDetailsSegmentsDeviceArch(v ReleaseAnalyticsDetailsSegmentsDeviceArch) OptReleaseAnalyticsDetailsSegmentsDeviceArch {
	return OptReleaseAnalyticsDetailsSegmentsDeviceArch{
		Value: v,
		Set:   true,
	}
}

// OptReleaseAnalyticsDetailsSegmentsDeviceArch is optional ReleaseAnalyticsDetailsSegmentsDeviceArch.
type OptReleaseAnalyticsDetailsSegmentsDeviceArch struct {
	Value ReleaseAnalyticsDetailsSegmentsDeviceArch
	Set   bool
}

// IsSet returns true if OptReleaseAnalyticsDetailsSegmentsDeviceArch was set.
func (o OptReleaseAnalyticsDetailsSegmentsDeviceArch) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReleaseAnalyticsDetailsSegmentsDeviceArch) Reset() {
	var v ReleaseAnalyticsDetailsSegmentsDeviceArch
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReleaseAnalyticsDetailsSegmentsDeviceArch) SetTo(v ReleaseAnalyticsDetailsSegmentsDeviceArch) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReleaseAnalyticsDetailsSegmentsDeviceArch) Get() (v ReleaseAnalyticsDetailsSegmentsDeviceArch, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReleaseAnalyticsDetailsSegmentsDeviceArch) Or(d ReleaseAnalyticsDetailsSegmentsDeviceArch) ReleaseAnalyticsDetailsSegmentsDeviceArch {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReleaseAnalyticsDetailsSegmentsOsName returns new OptReleaseAnalyticsDetailsSegmentsOsName with value set to v.
func NewOptReleaseAnalyticsDetailsSegmentsOsName(v ReleaseAnalyticsDetailsSegmentsOsName) OptReleaseAnalyticsDetailsSegmentsOsName {
	return OptReleaseAnalyticsDetailsSegmentsOsName{
		Value: v,
		Set:   true,
	}
}

// OptReleaseAnalyticsDetailsSegmentsOsName is optional ReleaseAnalyticsDetailsSegmentsOsName.
type OptReleaseAnalyticsDetailsSegmentsOsName struct {
	Value ReleaseAnalyticsDetailsSegmentsOsName
	Set   bool
}

// IsSet returns true if OptReleaseAnalyticsDetailsSegmentsOsName was set.
func (o OptReleaseAnalyticsDetailsSegmentsOsName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReleaseAnalyticsDetailsSegmentsOsName) Reset() {
	var v ReleaseAnalyticsDetailsSegmentsOsName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReleaseAnalyticsDetailsSegmentsOsName) SetTo(v ReleaseAnalyticsDetailsSegmentsOsName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReleaseAnalyticsDetailsSegmentsOsName) Get() (v ReleaseAnalyticsDetailsSegmentsOsName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReleaseAnalyticsDetailsSegmentsOsName) Or(d ReleaseAnalyticsDetailsSegmentsOsName) ReleaseAnalyticsDetailsSegmentsOsName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReleaseAnalyticsDetailsSegmentsPlatform returns new OptReleaseAnalyticsDetailsSegmentsPlatform with value set to v.
func NewOptReleaseAnalyticsDetailsSegmentsPlatform(v ReleaseAnalyticsDetailsSegmentsPlatform) OptReleaseAnalyticsDetailsSegmentsPlatform {
	return OptReleaseAnalyticsDetailsSegmentsPlatform{
		Value: v,
		Set:   true,
	}
}

// OptReleaseAnalyticsDetailsSegmentsPlatform is optional ReleaseAnalyticsDetailsSegmentsPlatform.
type OptReleaseAnalyticsDetailsSegmentsPlatform struct {
	Value ReleaseAnalyticsDetailsSegmentsPlatform
	Set   bool
}

// IsSet returns true if OptReleaseAnalyticsDetailsSegmentsPlatform was set.
func (o OptReleaseAnalyticsDetailsSegmentsPlatform) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReleaseAnalyticsDetailsSegmentsPlatform) Reset() {
	var v ReleaseAnalyticsDetailsSegmentsPlatform
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReleaseAnalyticsDetailsSegmentsPlatform) SetTo(v ReleaseAnalyticsDetailsSegmentsPlatform) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReleaseAnalyticsDetailsSegmentsPlatform) Get() (v ReleaseAnalyticsDetailsSegmentsPlatform, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReleaseAnalyticsDetailsSegmentsPlatform) Or(d ReleaseAnalyticsDetailsSegmentsPlatform) ReleaseAnalyticsDetailsSegmentsPlatform {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReleaseAnalyticsDetailsSegmentsRuntimeName returns new OptReleaseAnalyticsDetailsSegmentsRuntimeName with value set to v.
func NewOptReleaseAnalyticsDetailsSegmentsRuntimeName(v ReleaseAnalyticsDetailsSegmentsRuntimeName) OptReleaseAnalyticsDetailsSegmentsRuntimeName {
	return OptReleaseAnalyticsDetailsSegmentsRuntimeName{
		Value: v,
		Set:   true,
	}
}

// OptReleaseAnalyticsDetailsSegmentsRuntimeName is optional ReleaseAnalyticsDetailsSegmentsRuntimeName.
type OptReleaseAnalyticsDetailsSegmentsRuntimeName struct {
	Value ReleaseAnalyticsDetailsSegmentsRuntimeName
	Set   bool
}

// IsSet returns true if OptReleaseAnalyticsDetailsSegmentsRuntimeName was set.
func (o OptReleaseAnalyticsDetailsSegmentsRuntimeName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReleaseAnalyticsDetailsSegmentsRuntimeName) Reset() {
	var v ReleaseAnalyticsDetailsSegmentsRuntimeName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReleaseAnalyticsDetailsSegmentsRuntimeName) SetTo(v ReleaseAnalyticsDetailsSegmentsRuntimeName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReleaseAnalyticsDetailsSegmentsRuntimeName) Get() (v ReleaseAnalyticsDetailsSegmentsRuntimeName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReleaseAnalyticsDetailsSegmentsRuntimeName) Or(d ReleaseAnalyticsDetailsSegmentsRuntimeName) ReleaseAnalyticsDetailsSegmentsRuntimeName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSortOrder returns new OptSortOrder with value set to v.
func NewOptSortOrder(v SortOrder) OptSortOrder {
	return OptSortOrder{
		Value: v,
		Set:   true,
	}
}

// OptSortOrder is optional SortOrder.
type OptSortOrder struct {
	Value SortOrder
	Set   bool
}

// IsSet returns true if OptSortOrder was set.
func (o OptSortOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSortOrder) Reset() {
	var v SortOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSortOrder) SetTo(v SortOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSortOrder) Get() (v SortOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSortOrder) Or(d SortOrder) SortOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUint returns new OptUint with value set to v.
func NewOptUint(v uint) OptUint {
	return OptUint{
		Value: v,
		Set:   true,
	}
}

// OptUint is optional uint.
type OptUint struct {
	Value uint
	Set   bool
}

// IsSet returns true if OptUint was set.
func (o OptUint) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUint) Reset() {
	var v uint
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUint) SetTo(v uint) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUint) Get() (v uint, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUint) Or(d uint) uint {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Period
type Period struct {
	Interval    string `json:"interval"`
	Granularity string `json:"granularity"`
}

// GetInterval returns the value of Interval.
func (s *Period) GetInterval() string {
	return s.Interval
}

// GetGranularity returns the value of Granularity.
func (s *Period) GetGranularity() string {
	return s.Granularity
}

// SetInterval sets the value of Interval.
func (s *Period) SetInterval(val string) {
	s.Interval = val
}

// SetGranularity sets the value of Granularity.
func (s *Period) SetGranularity(val string) {
	s.Granularity = val
}

// Ref: #/components/schemas/Project
type Project struct {
	ID          uint         `json:"id"`
	Name        string       `json:"name"`
	Description string       `json:"description"`
	TeamID      OptNilUint   `json:"team_id"`
	TeamName    OptNilString `json:"team_name"`
	PublicKey   string       `json:"public_key"`
	CreatedAt   time.Time    `json:"created_at"`
}

// GetID returns the value of ID.
func (s *Project) GetID() uint {
	return s.ID
}

// GetName returns the value of Name.
func (s *Project) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Project) GetDescription() string {
	return s.Description
}

// GetTeamID returns the value of TeamID.
func (s *Project) GetTeamID() OptNilUint {
	return s.TeamID
}

// GetTeamName returns the value of TeamName.
func (s *Project) GetTeamName() OptNilString {
	return s.TeamName
}

// GetPublicKey returns the value of PublicKey.
func (s *Project) GetPublicKey() string {
	return s.PublicKey
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Project) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *Project) SetID(val uint) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Project) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Project) SetDescription(val string) {
	s.Description = val
}

// SetTeamID sets the value of TeamID.
func (s *Project) SetTeamID(val OptNilUint) {
	s.TeamID = val
}

// SetTeamName sets the value of TeamName.
func (s *Project) SetTeamName(val OptNilString) {
	s.TeamName = val
}

// SetPublicKey sets the value of PublicKey.
func (s *Project) SetPublicKey(val string) {
	s.PublicKey = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Project) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// Ref: #/components/schemas/ProjectResponse
type ProjectResponse struct {
	Project Project `json:"project"`
}

// GetProject returns the value of Project.
func (s *ProjectResponse) GetProject() Project {
	return s.Project
}

// SetProject sets the value of Project.
func (s *ProjectResponse) SetProject(val Project) {
	s.Project = val
}

func (*ProjectResponse) getProjectRes()    {}
func (*ProjectResponse) updateProjectRes() {}

// Ref: #/components/schemas/ProjectStatsResponse
type ProjectStatsResponse struct {
	TotalIssues        uint                              `json:"total_issues"`
	IssuesByLevel      ProjectStatsResponseIssuesByLevel `json:"issues_by_level"`
	MostFrequentIssues []IssueSummary                    `json:"most_frequent_issues"`
}

// GetTotalIssues returns the value of TotalIssues.
func (s *ProjectStatsResponse) GetTotalIssues() uint {
	return s.TotalIssues
}

// GetIssuesByLevel returns the value of IssuesByLevel.
func (s *ProjectStatsResponse) GetIssuesByLevel() ProjectStatsResponseIssuesByLevel {
	return s.IssuesByLevel
}

// GetMostFrequentIssues returns the value of MostFrequentIssues.
func (s *ProjectStatsResponse) GetMostFrequentIssues() []IssueSummary {
	return s.MostFrequentIssues
}

// SetTotalIssues sets the value of TotalIssues.
func (s *ProjectStatsResponse) SetTotalIssues(val uint) {
	s.TotalIssues = val
}

// SetIssuesByLevel sets the value of IssuesByLevel.
func (s *ProjectStatsResponse) SetIssuesByLevel(val ProjectStatsResponseIssuesByLevel) {
	s.IssuesByLevel = val
}

// SetMostFrequentIssues sets the value of MostFrequentIssues.
func (s *ProjectStatsResponse) SetMostFrequentIssues(val []IssueSummary) {
	s.MostFrequentIssues = val
}

func (*ProjectStatsResponse) getProjectStatsRes() {}

type ProjectStatsResponseIssuesByLevel struct {
	Fatal     uint `json:"fatal"`
	Exception uint `json:"exception"`
	Error     uint `json:"error"`
	Warning   uint `json:"warning"`
	Info      uint `json:"info"`
	Debug     uint `json:"debug"`
}

// GetFatal returns the value of Fatal.
func (s *ProjectStatsResponseIssuesByLevel) GetFatal() uint {
	return s.Fatal
}

// GetException returns the value of Exception.
func (s *ProjectStatsResponseIssuesByLevel) GetException() uint {
	return s.Exception
}

// GetError returns the value of Error.
func (s *ProjectStatsResponseIssuesByLevel) GetError() uint {
	return s.Error
}

// GetWarning returns the value of Warning.
func (s *ProjectStatsResponseIssuesByLevel) GetWarning() uint {
	return s.Warning
}

// GetInfo returns the value of Info.
func (s *ProjectStatsResponseIssuesByLevel) GetInfo() uint {
	return s.Info
}

// GetDebug returns the value of Debug.
func (s *ProjectStatsResponseIssuesByLevel) GetDebug() uint {
	return s.Debug
}

// SetFatal sets the value of Fatal.
func (s *ProjectStatsResponseIssuesByLevel) SetFatal(val uint) {
	s.Fatal = val
}

// SetException sets the value of Exception.
func (s *ProjectStatsResponseIssuesByLevel) SetException(val uint) {
	s.Exception = val
}

// SetError sets the value of Error.
func (s *ProjectStatsResponseIssuesByLevel) SetError(val uint) {
	s.Error = val
}

// SetWarning sets the value of Warning.
func (s *ProjectStatsResponseIssuesByLevel) SetWarning(val uint) {
	s.Warning = val
}

// SetInfo sets the value of Info.
func (s *ProjectStatsResponseIssuesByLevel) SetInfo(val uint) {
	s.Info = val
}

// SetDebug sets the value of Debug.
func (s *ProjectStatsResponseIssuesByLevel) SetDebug(val uint) {
	s.Debug = val
}

// Ref: #/components/schemas/RefreshTokenRequest
type RefreshTokenRequest struct {
	RefreshToken string `json:"refresh_token"`
}

// GetRefreshToken returns the value of RefreshToken.
func (s *RefreshTokenRequest) GetRefreshToken() string {
	return s.RefreshToken
}

// SetRefreshToken sets the value of RefreshToken.
func (s *RefreshTokenRequest) SetRefreshToken(val string) {
	s.RefreshToken = val
}

// Ref: #/components/schemas/RefreshTokenResponse
type RefreshTokenResponse struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
	ExpiresIn    int    `json:"expires_in"`
}

// GetAccessToken returns the value of AccessToken.
func (s *RefreshTokenResponse) GetAccessToken() string {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *RefreshTokenResponse) GetRefreshToken() string {
	return s.RefreshToken
}

// GetExpiresIn returns the value of ExpiresIn.
func (s *RefreshTokenResponse) GetExpiresIn() int {
	return s.ExpiresIn
}

// SetAccessToken sets the value of AccessToken.
func (s *RefreshTokenResponse) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *RefreshTokenResponse) SetRefreshToken(val string) {
	s.RefreshToken = val
}

// SetExpiresIn sets the value of ExpiresIn.
func (s *RefreshTokenResponse) SetExpiresIn(val int) {
	s.ExpiresIn = val
}

func (*RefreshTokenResponse) refreshTokenRes() {}

// Ref: #/components/schemas/ReleaseAnalyticsDetails
type ReleaseAnalyticsDetails struct {
	Version              string                                      `json:"version"`
	CreatedAt            time.Time                                   `json:"created_at"`
	Stats                ReleaseAnalyticsSummary                     `json:"stats"`
	TopIssues            []IssueSummary                              `json:"top_issues"`
	SeverityDistribution ReleaseAnalyticsDetailsSeverityDistribution `json:"severity_distribution"`
	FixTime              ReleaseAnalyticsDetailsFixTime              `json:"fix_time"`
	Segments             ReleaseAnalyticsDetailsSegments             `json:"segments"`
}

// GetVersion returns the value of Version.
func (s *ReleaseAnalyticsDetails) GetVersion() string {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ReleaseAnalyticsDetails) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetStats returns the value of Stats.
func (s *ReleaseAnalyticsDetails) GetStats() ReleaseAnalyticsSummary {
	return s.Stats
}

// GetTopIssues returns the value of TopIssues.
func (s *ReleaseAnalyticsDetails) GetTopIssues() []IssueSummary {
	return s.TopIssues
}

// GetSeverityDistribution returns the value of SeverityDistribution.
func (s *ReleaseAnalyticsDetails) GetSeverityDistribution() ReleaseAnalyticsDetailsSeverityDistribution {
	return s.SeverityDistribution
}

// GetFixTime returns the value of FixTime.
func (s *ReleaseAnalyticsDetails) GetFixTime() ReleaseAnalyticsDetailsFixTime {
	return s.FixTime
}

// GetSegments returns the value of Segments.
func (s *ReleaseAnalyticsDetails) GetSegments() ReleaseAnalyticsDetailsSegments {
	return s.Segments
}

// SetVersion sets the value of Version.
func (s *ReleaseAnalyticsDetails) SetVersion(val string) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ReleaseAnalyticsDetails) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetStats sets the value of Stats.
func (s *ReleaseAnalyticsDetails) SetStats(val ReleaseAnalyticsSummary) {
	s.Stats = val
}

// SetTopIssues sets the value of TopIssues.
func (s *ReleaseAnalyticsDetails) SetTopIssues(val []IssueSummary) {
	s.TopIssues = val
}

// SetSeverityDistribution sets the value of SeverityDistribution.
func (s *ReleaseAnalyticsDetails) SetSeverityDistribution(val ReleaseAnalyticsDetailsSeverityDistribution) {
	s.SeverityDistribution = val
}

// SetFixTime sets the value of FixTime.
func (s *ReleaseAnalyticsDetails) SetFixTime(val ReleaseAnalyticsDetailsFixTime) {
	s.FixTime = val
}

// SetSegments sets the value of Segments.
func (s *ReleaseAnalyticsDetails) SetSegments(val ReleaseAnalyticsDetailsSegments) {
	s.Segments = val
}

func (*ReleaseAnalyticsDetails) getProjectReleaseAnalyticsDetailsRes() {}

type ReleaseAnalyticsDetailsFixTime struct {
	Avg    OptFloat32 `json:"avg"`
	Median OptFloat32 `json:"median"`
	P95    OptFloat32 `json:"p95"`
}

// GetAvg returns the value of Avg.
func (s *ReleaseAnalyticsDetailsFixTime) GetAvg() OptFloat32 {
	return s.Avg
}

// GetMedian returns the value of Median.
func (s *ReleaseAnalyticsDetailsFixTime) GetMedian() OptFloat32 {
	return s.Median
}

// GetP95 returns the value of P95.
func (s *ReleaseAnalyticsDetailsFixTime) GetP95() OptFloat32 {
	return s.P95
}

// SetAvg sets the value of Avg.
func (s *ReleaseAnalyticsDetailsFixTime) SetAvg(val OptFloat32) {
	s.Avg = val
}

// SetMedian sets the value of Median.
func (s *ReleaseAnalyticsDetailsFixTime) SetMedian(val OptFloat32) {
	s.Median = val
}

// SetP95 sets the value of P95.
func (s *ReleaseAnalyticsDetailsFixTime) SetP95(val OptFloat32) {
	s.P95 = val
}

type ReleaseAnalyticsDetailsSegments struct {
	Platform    OptReleaseAnalyticsDetailsSegmentsPlatform    `json:"platform"`
	BrowserName OptReleaseAnalyticsDetailsSegmentsBrowserName `json:"browser_name"`
	OsName      OptReleaseAnalyticsDetailsSegmentsOsName      `json:"os_name"`
	DeviceArch  OptReleaseAnalyticsDetailsSegmentsDeviceArch  `json:"device_arch"`
	RuntimeName OptReleaseAnalyticsDetailsSegmentsRuntimeName `json:"runtime_name"`
}

// GetPlatform returns the value of Platform.
func (s *ReleaseAnalyticsDetailsSegments) GetPlatform() OptReleaseAnalyticsDetailsSegmentsPlatform {
	return s.Platform
}

// GetBrowserName returns the value of BrowserName.
func (s *ReleaseAnalyticsDetailsSegments) GetBrowserName() OptReleaseAnalyticsDetailsSegmentsBrowserName {
	return s.BrowserName
}

// GetOsName returns the value of OsName.
func (s *ReleaseAnalyticsDetailsSegments) GetOsName() OptReleaseAnalyticsDetailsSegmentsOsName {
	return s.OsName
}

// GetDeviceArch returns the value of DeviceArch.
func (s *ReleaseAnalyticsDetailsSegments) GetDeviceArch() OptReleaseAnalyticsDetailsSegmentsDeviceArch {
	return s.DeviceArch
}

// GetRuntimeName returns the value of RuntimeName.
func (s *ReleaseAnalyticsDetailsSegments) GetRuntimeName() OptReleaseAnalyticsDetailsSegmentsRuntimeName {
	return s.RuntimeName
}

// SetPlatform sets the value of Platform.
func (s *ReleaseAnalyticsDetailsSegments) SetPlatform(val OptReleaseAnalyticsDetailsSegmentsPlatform) {
	s.Platform = val
}

// SetBrowserName sets the value of BrowserName.
func (s *ReleaseAnalyticsDetailsSegments) SetBrowserName(val OptReleaseAnalyticsDetailsSegmentsBrowserName) {
	s.BrowserName = val
}

// SetOsName sets the value of OsName.
func (s *ReleaseAnalyticsDetailsSegments) SetOsName(val OptReleaseAnalyticsDetailsSegmentsOsName) {
	s.OsName = val
}

// SetDeviceArch sets the value of DeviceArch.
func (s *ReleaseAnalyticsDetailsSegments) SetDeviceArch(val OptReleaseAnalyticsDetailsSegmentsDeviceArch) {
	s.DeviceArch = val
}

// SetRuntimeName sets the value of RuntimeName.
func (s *ReleaseAnalyticsDetailsSegments) SetRuntimeName(val OptReleaseAnalyticsDetailsSegmentsRuntimeName) {
	s.RuntimeName = val
}

type ReleaseAnalyticsDetailsSegmentsBrowserName map[string]uint

func (s *ReleaseAnalyticsDetailsSegmentsBrowserName) init() ReleaseAnalyticsDetailsSegmentsBrowserName {
	m := *s
	if m == nil {
		m = map[string]uint{}
		*s = m
	}
	return m
}

type ReleaseAnalyticsDetailsSegmentsDeviceArch map[string]uint

func (s *ReleaseAnalyticsDetailsSegmentsDeviceArch) init() ReleaseAnalyticsDetailsSegmentsDeviceArch {
	m := *s
	if m == nil {
		m = map[string]uint{}
		*s = m
	}
	return m
}

type ReleaseAnalyticsDetailsSegmentsOsName map[string]uint

func (s *ReleaseAnalyticsDetailsSegmentsOsName) init() ReleaseAnalyticsDetailsSegmentsOsName {
	m := *s
	if m == nil {
		m = map[string]uint{}
		*s = m
	}
	return m
}

type ReleaseAnalyticsDetailsSegmentsPlatform map[string]uint

func (s *ReleaseAnalyticsDetailsSegmentsPlatform) init() ReleaseAnalyticsDetailsSegmentsPlatform {
	m := *s
	if m == nil {
		m = map[string]uint{}
		*s = m
	}
	return m
}

type ReleaseAnalyticsDetailsSegmentsRuntimeName map[string]uint

func (s *ReleaseAnalyticsDetailsSegmentsRuntimeName) init() ReleaseAnalyticsDetailsSegmentsRuntimeName {
	m := *s
	if m == nil {
		m = map[string]uint{}
		*s = m
	}
	return m
}

type ReleaseAnalyticsDetailsSeverityDistribution map[string]uint

func (s *ReleaseAnalyticsDetailsSeverityDistribution) init() ReleaseAnalyticsDetailsSeverityDistribution {
	m := *s
	if m == nil {
		m = map[string]uint{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/ReleaseAnalyticsSummary
type ReleaseAnalyticsSummary struct {
	Version                string    `json:"version"`
	CreatedAt              time.Time `json:"created_at"`
	KnownIssuesTotal       uint      `json:"known_issues_total"`
	NewIssuesTotal         uint      `json:"new_issues_total"`
	RegressionsTotal       uint      `json:"regressions_total"`
	ResolvedInVersionTotal uint      `json:"resolved_in_version_total"`
	UsersAffected          uint      `json:"users_affected"`
}

// GetVersion returns the value of Version.
func (s *ReleaseAnalyticsSummary) GetVersion() string {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ReleaseAnalyticsSummary) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetKnownIssuesTotal returns the value of KnownIssuesTotal.
func (s *ReleaseAnalyticsSummary) GetKnownIssuesTotal() uint {
	return s.KnownIssuesTotal
}

// GetNewIssuesTotal returns the value of NewIssuesTotal.
func (s *ReleaseAnalyticsSummary) GetNewIssuesTotal() uint {
	return s.NewIssuesTotal
}

// GetRegressionsTotal returns the value of RegressionsTotal.
func (s *ReleaseAnalyticsSummary) GetRegressionsTotal() uint {
	return s.RegressionsTotal
}

// GetResolvedInVersionTotal returns the value of ResolvedInVersionTotal.
func (s *ReleaseAnalyticsSummary) GetResolvedInVersionTotal() uint {
	return s.ResolvedInVersionTotal
}

// GetUsersAffected returns the value of UsersAffected.
func (s *ReleaseAnalyticsSummary) GetUsersAffected() uint {
	return s.UsersAffected
}

// SetVersion sets the value of Version.
func (s *ReleaseAnalyticsSummary) SetVersion(val string) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ReleaseAnalyticsSummary) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetKnownIssuesTotal sets the value of KnownIssuesTotal.
func (s *ReleaseAnalyticsSummary) SetKnownIssuesTotal(val uint) {
	s.KnownIssuesTotal = val
}

// SetNewIssuesTotal sets the value of NewIssuesTotal.
func (s *ReleaseAnalyticsSummary) SetNewIssuesTotal(val uint) {
	s.NewIssuesTotal = val
}

// SetRegressionsTotal sets the value of RegressionsTotal.
func (s *ReleaseAnalyticsSummary) SetRegressionsTotal(val uint) {
	s.RegressionsTotal = val
}

// SetResolvedInVersionTotal sets the value of ResolvedInVersionTotal.
func (s *ReleaseAnalyticsSummary) SetResolvedInVersionTotal(val uint) {
	s.ResolvedInVersionTotal = val
}

// SetUsersAffected sets the value of UsersAffected.
func (s *ReleaseAnalyticsSummary) SetUsersAffected(val uint) {
	s.UsersAffected = val
}

// Ref: #/components/schemas/ReleaseComparison
type ReleaseComparison struct {
	Base   ReleaseAnalyticsSummary `json:"base"`
	Target ReleaseAnalyticsSummary `json:"target"`
	Delta  ReleaseComparisonDelta  `json:"delta"`
}

// GetBase returns the value of Base.
func (s *ReleaseComparison) GetBase() ReleaseAnalyticsSummary {
	return s.Base
}

// GetTarget returns the value of Target.
func (s *ReleaseComparison) GetTarget() ReleaseAnalyticsSummary {
	return s.Target
}

// GetDelta returns the value of Delta.
func (s *ReleaseComparison) GetDelta() ReleaseComparisonDelta {
	return s.Delta
}

// SetBase sets the value of Base.
func (s *ReleaseComparison) SetBase(val ReleaseAnalyticsSummary) {
	s.Base = val
}

// SetTarget sets the value of Target.
func (s *ReleaseComparison) SetTarget(val ReleaseAnalyticsSummary) {
	s.Target = val
}

// SetDelta sets the value of Delta.
func (s *ReleaseComparison) SetDelta(val ReleaseComparisonDelta) {
	s.Delta = val
}

func (*ReleaseComparison) compareProjectReleasesAnalyticsRes() {}

type ReleaseComparisonDelta struct {
	KnownIssuesTotal       OptUint `json:"known_issues_total"`
	NewIssuesTotal         OptUint `json:"new_issues_total"`
	RegressionsTotal       OptUint `json:"regressions_total"`
	ResolvedInVersionTotal OptUint `json:"resolved_in_version_total"`
	UsersAffected          OptUint `json:"users_affected"`
}

// GetKnownIssuesTotal returns the value of KnownIssuesTotal.
func (s *ReleaseComparisonDelta) GetKnownIssuesTotal() OptUint {
	return s.KnownIssuesTotal
}

// GetNewIssuesTotal returns the value of NewIssuesTotal.
func (s *ReleaseComparisonDelta) GetNewIssuesTotal() OptUint {
	return s.NewIssuesTotal
}

// GetRegressionsTotal returns the value of RegressionsTotal.
func (s *ReleaseComparisonDelta) GetRegressionsTotal() OptUint {
	return s.RegressionsTotal
}

// GetResolvedInVersionTotal returns the value of ResolvedInVersionTotal.
func (s *ReleaseComparisonDelta) GetResolvedInVersionTotal() OptUint {
	return s.ResolvedInVersionTotal
}

// GetUsersAffected returns the value of UsersAffected.
func (s *ReleaseComparisonDelta) GetUsersAffected() OptUint {
	return s.UsersAffected
}

// SetKnownIssuesTotal sets the value of KnownIssuesTotal.
func (s *ReleaseComparisonDelta) SetKnownIssuesTotal(val OptUint) {
	s.KnownIssuesTotal = val
}

// SetNewIssuesTotal sets the value of NewIssuesTotal.
func (s *ReleaseComparisonDelta) SetNewIssuesTotal(val OptUint) {
	s.NewIssuesTotal = val
}

// SetRegressionsTotal sets the value of RegressionsTotal.
func (s *ReleaseComparisonDelta) SetRegressionsTotal(val OptUint) {
	s.RegressionsTotal = val
}

// SetResolvedInVersionTotal sets the value of ResolvedInVersionTotal.
func (s *ReleaseComparisonDelta) SetResolvedInVersionTotal(val OptUint) {
	s.ResolvedInVersionTotal = val
}

// SetUsersAffected sets the value of UsersAffected.
func (s *ReleaseComparisonDelta) SetUsersAffected(val OptUint) {
	s.UsersAffected = val
}

// Ref: #/components/schemas/ReleaseSegmentsResponse
type ReleaseSegmentsResponse struct {
	Segment string                        `json:"segment"`
	Values  ReleaseSegmentsResponseValues `json:"values"`
}

// GetSegment returns the value of Segment.
func (s *ReleaseSegmentsResponse) GetSegment() string {
	return s.Segment
}

// GetValues returns the value of Values.
func (s *ReleaseSegmentsResponse) GetValues() ReleaseSegmentsResponseValues {
	return s.Values
}

// SetSegment sets the value of Segment.
func (s *ReleaseSegmentsResponse) SetSegment(val string) {
	s.Segment = val
}

// SetValues sets the value of Values.
func (s *ReleaseSegmentsResponse) SetValues(val ReleaseSegmentsResponseValues) {
	s.Values = val
}

func (*ReleaseSegmentsResponse) getProjectReleaseSegmentsRes() {}

type ReleaseSegmentsResponseValues map[string]uint

func (s *ReleaseSegmentsResponseValues) init() ReleaseSegmentsResponseValues {
	m := *s
	if m == nil {
		m = map[string]uint{}
		*s = m
	}
	return m
}

// RemoveTeamMemberNoContent is response for RemoveTeamMember operation.
type RemoveTeamMemberNoContent struct{}

func (*RemoveTeamMemberNoContent) removeTeamMemberRes() {}

// ResetPasswordNoContent is response for ResetPassword operation.
type ResetPasswordNoContent struct{}

func (*ResetPasswordNoContent) resetPasswordRes() {}

// Ref: #/components/schemas/ResetPasswordRequest
type ResetPasswordRequest struct {
	Token       string `json:"token"`
	NewPassword string `json:"new_password"`
}

// GetToken returns the value of Token.
func (s *ResetPasswordRequest) GetToken() string {
	return s.Token
}

// GetNewPassword returns the value of NewPassword.
func (s *ResetPasswordRequest) GetNewPassword() string {
	return s.NewPassword
}

// SetToken sets the value of Token.
func (s *ResetPasswordRequest) SetToken(val string) {
	s.Token = val
}

// SetNewPassword sets the value of NewPassword.
func (s *ResetPasswordRequest) SetNewPassword(val string) {
	s.NewPassword = val
}

// Send2FACodeNoContent is response for Send2FACode operation.
type Send2FACodeNoContent struct{}

func (*Send2FACodeNoContent) send2FACodeRes() {}

// SendTestNotificationNoContent is response for SendTestNotification operation.
type SendTestNotificationNoContent struct{}

func (*SendTestNotificationNoContent) sendTestNotificationRes() {}

// Ref: #/components/schemas/SetSuperuserStatusRequest
type SetSuperuserStatusRequest struct {
	IsSuperuser bool `json:"is_superuser"`
}

// GetIsSuperuser returns the value of IsSuperuser.
func (s *SetSuperuserStatusRequest) GetIsSuperuser() bool {
	return s.IsSuperuser
}

// SetIsSuperuser sets the value of IsSuperuser.
func (s *SetSuperuserStatusRequest) SetIsSuperuser(val bool) {
	s.IsSuperuser = val
}

// Ref: #/components/schemas/SetUserActiveStatusRequest
type SetUserActiveStatusRequest struct {
	IsActive bool `json:"is_active"`
}

// GetIsActive returns the value of IsActive.
func (s *SetUserActiveStatusRequest) GetIsActive() bool {
	return s.IsActive
}

// SetIsActive sets the value of IsActive.
func (s *SetUserActiveStatusRequest) SetIsActive(val bool) {
	s.IsActive = val
}

// Sort order (ascending or descending).
// Ref: #/components/schemas/SortOrder
type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

// AllValues returns all SortOrder values.
func (SortOrder) AllValues() []SortOrder {
	return []SortOrder{
		SortOrderAsc,
		SortOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SortOrder) MarshalText() ([]byte, error) {
	switch s {
	case SortOrderAsc:
		return []byte(s), nil
	case SortOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SortOrder) UnmarshalText(data []byte) error {
	switch SortOrder(data) {
	case SortOrderAsc:
		*s = SortOrderAsc
		return nil
	case SortOrderDesc:
		*s = SortOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Team
type Team struct {
	ID        uint         `json:"id"`
	Name      string       `json:"name"`
	CreatedAt time.Time    `json:"created_at"`
	Members   []TeamMember `json:"members"`
}

// GetID returns the value of ID.
func (s *Team) GetID() uint {
	return s.ID
}

// GetName returns the value of Name.
func (s *Team) GetName() string {
	return s.Name
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Team) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetMembers returns the value of Members.
func (s *Team) GetMembers() []TeamMember {
	return s.Members
}

// SetID sets the value of ID.
func (s *Team) SetID(val uint) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Team) SetName(val string) {
	s.Name = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Team) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetMembers sets the value of Members.
func (s *Team) SetMembers(val []TeamMember) {
	s.Members = val
}

func (*Team) getTeamRes() {}

// Ref: #/components/schemas/TeamExistsResponse
type TeamExistsResponse struct {
	Exists bool `json:"exists"`
}

// GetExists returns the value of Exists.
func (s *TeamExistsResponse) GetExists() bool {
	return s.Exists
}

// SetExists sets the value of Exists.
func (s *TeamExistsResponse) SetExists(val bool) {
	s.Exists = val
}

func (*TeamExistsResponse) checkTeamExistsRes() {}

// Ref: #/components/schemas/TeamMember
type TeamMember struct {
	UserID uint           `json:"user_id"`
	Role   TeamMemberRole `json:"role"`
}

// GetUserID returns the value of UserID.
func (s *TeamMember) GetUserID() uint {
	return s.UserID
}

// GetRole returns the value of Role.
func (s *TeamMember) GetRole() TeamMemberRole {
	return s.Role
}

// SetUserID sets the value of UserID.
func (s *TeamMember) SetUserID(val uint) {
	s.UserID = val
}

// SetRole sets the value of Role.
func (s *TeamMember) SetRole(val TeamMemberRole) {
	s.Role = val
}

type TeamMemberRole string

const (
	TeamMemberRoleOwner  TeamMemberRole = "owner"
	TeamMemberRoleAdmin  TeamMemberRole = "admin"
	TeamMemberRoleMember TeamMemberRole = "member"
)

// AllValues returns all TeamMemberRole values.
func (TeamMemberRole) AllValues() []TeamMemberRole {
	return []TeamMemberRole{
		TeamMemberRoleOwner,
		TeamMemberRoleAdmin,
		TeamMemberRoleMember,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TeamMemberRole) MarshalText() ([]byte, error) {
	switch s {
	case TeamMemberRoleOwner:
		return []byte(s), nil
	case TeamMemberRoleAdmin:
		return []byte(s), nil
	case TeamMemberRoleMember:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamMemberRole) UnmarshalText(data []byte) error {
	switch TeamMemberRole(data) {
	case TeamMemberRoleOwner:
		*s = TeamMemberRoleOwner
		return nil
	case TeamMemberRoleAdmin:
		*s = TeamMemberRoleAdmin
		return nil
	case TeamMemberRoleMember:
		*s = TeamMemberRoleMember
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TeamResponse
type TeamResponse struct {
	Team Team `json:"team"`
}

// GetTeam returns the value of Team.
func (s *TeamResponse) GetTeam() Team {
	return s.Team
}

// SetTeam sets the value of Team.
func (s *TeamResponse) SetTeam(val Team) {
	s.Team = val
}

func (*TeamResponse) getProjectTeamRes() {}

// Ref: #/components/schemas/TimeseriesData
type TimeseriesData struct {
	Period      Period `json:"period"`
	Name        string `json:"name"`
	Occurrences []uint `json:"occurrences"`
}

// GetPeriod returns the value of Period.
func (s *TimeseriesData) GetPeriod() Period {
	return s.Period
}

// GetName returns the value of Name.
func (s *TimeseriesData) GetName() string {
	return s.Name
}

// GetOccurrences returns the value of Occurrences.
func (s *TimeseriesData) GetOccurrences() []uint {
	return s.Occurrences
}

// SetPeriod sets the value of Period.
func (s *TimeseriesData) SetPeriod(val Period) {
	s.Period = val
}

// SetName sets the value of Name.
func (s *TimeseriesData) SetName(val string) {
	s.Name = val
}

// SetOccurrences sets the value of Occurrences.
func (s *TimeseriesData) SetOccurrences(val []uint) {
	s.Occurrences = val
}

type TimeseriesResponse []TimeseriesData

func (*TimeseriesResponse) getEventsTimeseriesRes()               {}
func (*TimeseriesResponse) getIssuesTimeseriesRes()               {}
func (*TimeseriesResponse) getProjectIssueEventsTimeseriesRes()   {}
func (*TimeseriesResponse) getProjectIssueTimeseriesRes()         {}
func (*TimeseriesResponse) getProjectReleaseErrorsTimeseriesRes() {}

// Ref: #/components/schemas/TwoFAConfirmRequest
type TwoFAConfirmRequest struct {
	Code string `json:"code"`
}

// GetCode returns the value of Code.
func (s *TwoFAConfirmRequest) GetCode() string {
	return s.Code
}

// SetCode sets the value of Code.
func (s *TwoFAConfirmRequest) SetCode(val string) {
	s.Code = val
}

// Ref: #/components/schemas/TwoFADisableRequest
type TwoFADisableRequest struct {
	EmailCode string `json:"email_code"`
}

// GetEmailCode returns the value of EmailCode.
func (s *TwoFADisableRequest) GetEmailCode() string {
	return s.EmailCode
}

// SetEmailCode sets the value of EmailCode.
func (s *TwoFADisableRequest) SetEmailCode(val string) {
	s.EmailCode = val
}

// Ref: #/components/schemas/TwoFAResetRequest
type TwoFAResetRequest struct {
	EmailCode string `json:"email_code"`
}

// GetEmailCode returns the value of EmailCode.
func (s *TwoFAResetRequest) GetEmailCode() string {
	return s.EmailCode
}

// SetEmailCode sets the value of EmailCode.
func (s *TwoFAResetRequest) SetEmailCode(val string) {
	s.EmailCode = val
}

// Ref: #/components/schemas/TwoFASetupResponse
type TwoFASetupResponse struct {
	Secret string `json:"secret"`
	QrURL  string `json:"qr_url"`
	// Base64 PNG QR image.
	QrImage string `json:"qr_image"`
}

// GetSecret returns the value of Secret.
func (s *TwoFASetupResponse) GetSecret() string {
	return s.Secret
}

// GetQrURL returns the value of QrURL.
func (s *TwoFASetupResponse) GetQrURL() string {
	return s.QrURL
}

// GetQrImage returns the value of QrImage.
func (s *TwoFASetupResponse) GetQrImage() string {
	return s.QrImage
}

// SetSecret sets the value of Secret.
func (s *TwoFASetupResponse) SetSecret(val string) {
	s.Secret = val
}

// SetQrURL sets the value of QrURL.
func (s *TwoFASetupResponse) SetQrURL(val string) {
	s.QrURL = val
}

// SetQrImage sets the value of QrImage.
func (s *TwoFASetupResponse) SetQrImage(val string) {
	s.QrImage = val
}

func (*TwoFASetupResponse) reset2FARes() {}
func (*TwoFASetupResponse) setup2FARes() {}

// Ref: #/components/schemas/TwoFAVerifyRequest
type TwoFAVerifyRequest struct {
	Code      string `json:"code"`
	SessionID string `json:"session_id"`
}

// GetCode returns the value of Code.
func (s *TwoFAVerifyRequest) GetCode() string {
	return s.Code
}

// GetSessionID returns the value of SessionID.
func (s *TwoFAVerifyRequest) GetSessionID() string {
	return s.SessionID
}

// SetCode sets the value of Code.
func (s *TwoFAVerifyRequest) SetCode(val string) {
	s.Code = val
}

// SetSessionID sets the value of SessionID.
func (s *TwoFAVerifyRequest) SetSessionID(val string) {
	s.SessionID = val
}

// Ref: #/components/schemas/TwoFAVerifyResponse
type TwoFAVerifyResponse struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
	ExpiresIn    int    `json:"expires_in"`
}

// GetAccessToken returns the value of AccessToken.
func (s *TwoFAVerifyResponse) GetAccessToken() string {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *TwoFAVerifyResponse) GetRefreshToken() string {
	return s.RefreshToken
}

// GetExpiresIn returns the value of ExpiresIn.
func (s *TwoFAVerifyResponse) GetExpiresIn() int {
	return s.ExpiresIn
}

// SetAccessToken sets the value of AccessToken.
func (s *TwoFAVerifyResponse) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *TwoFAVerifyResponse) SetRefreshToken(val string) {
	s.RefreshToken = val
}

// SetExpiresIn sets the value of ExpiresIn.
func (s *TwoFAVerifyResponse) SetExpiresIn(val int) {
	s.ExpiresIn = val
}

func (*TwoFAVerifyResponse) verify2FARes() {}

// Ref: #/components/schemas/UnreadCountResponse
type UnreadCountResponse struct {
	Count uint `json:"count"`
}

// GetCount returns the value of Count.
func (s *UnreadCountResponse) GetCount() uint {
	return s.Count
}

// SetCount sets the value of Count.
func (s *UnreadCountResponse) SetCount(val uint) {
	s.Count = val
}

func (*UnreadCountResponse) getUnreadNotificationsCountRes() {}

// Ref: #/components/schemas/UpdateNotificationRuleRequest
type UpdateNotificationRuleRequest struct {
	// Level of event to trigger notification (error, warning, info, etc.).
	EventLevel OptNilString `json:"event_level"`
	// Specific error fingerprint to trigger notification.
	Fingerprint OptNilString `json:"fingerprint"`
	// Trigger only for new errors.
	IsNewError OptNilBool `json:"is_new_error"`
	// Trigger only for regressions (resolved -> unresolved).
	IsRegression OptNilBool `json:"is_regression"`
}

// GetEventLevel returns the value of EventLevel.
func (s *UpdateNotificationRuleRequest) GetEventLevel() OptNilString {
	return s.EventLevel
}

// GetFingerprint returns the value of Fingerprint.
func (s *UpdateNotificationRuleRequest) GetFingerprint() OptNilString {
	return s.Fingerprint
}

// GetIsNewError returns the value of IsNewError.
func (s *UpdateNotificationRuleRequest) GetIsNewError() OptNilBool {
	return s.IsNewError
}

// GetIsRegression returns the value of IsRegression.
func (s *UpdateNotificationRuleRequest) GetIsRegression() OptNilBool {
	return s.IsRegression
}

// SetEventLevel sets the value of EventLevel.
func (s *UpdateNotificationRuleRequest) SetEventLevel(val OptNilString) {
	s.EventLevel = val
}

// SetFingerprint sets the value of Fingerprint.
func (s *UpdateNotificationRuleRequest) SetFingerprint(val OptNilString) {
	s.Fingerprint = val
}

// SetIsNewError sets the value of IsNewError.
func (s *UpdateNotificationRuleRequest) SetIsNewError(val OptNilBool) {
	s.IsNewError = val
}

// SetIsRegression sets the value of IsRegression.
func (s *UpdateNotificationRuleRequest) SetIsRegression(val OptNilBool) {
	s.IsRegression = val
}

// Ref: #/components/schemas/UpdateNotificationSettingRequest
type UpdateNotificationSettingRequest struct {
	// Type of notification channel (email, mattermost, slack, etc.).
	Type OptString `json:"type"`
	// Configuration for the notification channel (JSONB in database).
	Config  OptString `json:"config"`
	Enabled OptBool   `json:"enabled"`
}

// GetType returns the value of Type.
func (s *UpdateNotificationSettingRequest) GetType() OptString {
	return s.Type
}

// GetConfig returns the value of Config.
func (s *UpdateNotificationSettingRequest) GetConfig() OptString {
	return s.Config
}

// GetEnabled returns the value of Enabled.
func (s *UpdateNotificationSettingRequest) GetEnabled() OptBool {
	return s.Enabled
}

// SetType sets the value of Type.
func (s *UpdateNotificationSettingRequest) SetType(val OptString) {
	s.Type = val
}

// SetConfig sets the value of Config.
func (s *UpdateNotificationSettingRequest) SetConfig(val OptString) {
	s.Config = val
}

// SetEnabled sets the value of Enabled.
func (s *UpdateNotificationSettingRequest) SetEnabled(val OptBool) {
	s.Enabled = val
}

// Ref: #/components/schemas/UpdateProjectRequest
type UpdateProjectRequest struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

// GetName returns the value of Name.
func (s *UpdateProjectRequest) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *UpdateProjectRequest) GetDescription() string {
	return s.Description
}

// SetName sets the value of Name.
func (s *UpdateProjectRequest) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *UpdateProjectRequest) SetDescription(val string) {
	s.Description = val
}

// Ref: #/components/schemas/User
type User struct {
	ID            uint        `json:"id"`
	Username      string      `json:"username"`
	Email         string      `json:"email"`
	IsSuperuser   bool        `json:"is_superuser"`
	IsActive      bool        `json:"is_active"`
	IsTmpPassword bool        `json:"is_tmp_password"`
	TwoFaEnabled  bool        `json:"two_fa_enabled"`
	CreatedAt     time.Time   `json:"created_at"`
	LastLogin     OptDateTime `json:"last_login"`
	Teams         []UserTeam  `json:"teams"`
}

// GetID returns the value of ID.
func (s *User) GetID() uint {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *User) GetUsername() string {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// GetIsSuperuser returns the value of IsSuperuser.
func (s *User) GetIsSuperuser() bool {
	return s.IsSuperuser
}

// GetIsActive returns the value of IsActive.
func (s *User) GetIsActive() bool {
	return s.IsActive
}

// GetIsTmpPassword returns the value of IsTmpPassword.
func (s *User) GetIsTmpPassword() bool {
	return s.IsTmpPassword
}

// GetTwoFaEnabled returns the value of TwoFaEnabled.
func (s *User) GetTwoFaEnabled() bool {
	return s.TwoFaEnabled
}

// GetCreatedAt returns the value of CreatedAt.
func (s *User) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetLastLogin returns the value of LastLogin.
func (s *User) GetLastLogin() OptDateTime {
	return s.LastLogin
}

// GetTeams returns the value of Teams.
func (s *User) GetTeams() []UserTeam {
	return s.Teams
}

// SetID sets the value of ID.
func (s *User) SetID(val uint) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *User) SetUsername(val string) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}

// SetIsSuperuser sets the value of IsSuperuser.
func (s *User) SetIsSuperuser(val bool) {
	s.IsSuperuser = val
}

// SetIsActive sets the value of IsActive.
func (s *User) SetIsActive(val bool) {
	s.IsActive = val
}

// SetIsTmpPassword sets the value of IsTmpPassword.
func (s *User) SetIsTmpPassword(val bool) {
	s.IsTmpPassword = val
}

// SetTwoFaEnabled sets the value of TwoFaEnabled.
func (s *User) SetTwoFaEnabled(val bool) {
	s.TwoFaEnabled = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *User) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetLastLogin sets the value of LastLogin.
func (s *User) SetLastLogin(val OptDateTime) {
	s.LastLogin = val
}

// SetTeams sets the value of Teams.
func (s *User) SetTeams(val []UserTeam) {
	s.Teams = val
}

func (*User) getCurrentUserRes()      {}
func (*User) setSuperuserStatusRes()  {}
func (*User) setUserActiveStatusRes() {}

// UserChangeMyPasswordNoContent is response for UserChangeMyPassword operation.
type UserChangeMyPasswordNoContent struct{}

func (*UserChangeMyPasswordNoContent) userChangeMyPasswordRes() {}

// Ref: #/components/schemas/UserNotification
type UserNotification struct {
	ID        uint                    `json:"id"`
	UserID    uint                    `json:"user_id"`
	Type      UserNotificationType    `json:"type"`
	Content   UserNotificationContent `json:"content"`
	IsRead    bool                    `json:"is_read"`
	EmailSent bool                    `json:"email_sent"`
	CreatedAt time.Time               `json:"created_at"`
	UpdatedAt time.Time               `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *UserNotification) GetID() uint {
	return s.ID
}

// GetUserID returns the value of UserID.
func (s *UserNotification) GetUserID() uint {
	return s.UserID
}

// GetType returns the value of Type.
func (s *UserNotification) GetType() UserNotificationType {
	return s.Type
}

// GetContent returns the value of Content.
func (s *UserNotification) GetContent() UserNotificationContent {
	return s.Content
}

// GetIsRead returns the value of IsRead.
func (s *UserNotification) GetIsRead() bool {
	return s.IsRead
}

// GetEmailSent returns the value of EmailSent.
func (s *UserNotification) GetEmailSent() bool {
	return s.EmailSent
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserNotification) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UserNotification) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *UserNotification) SetID(val uint) {
	s.ID = val
}

// SetUserID sets the value of UserID.
func (s *UserNotification) SetUserID(val uint) {
	s.UserID = val
}

// SetType sets the value of Type.
func (s *UserNotification) SetType(val UserNotificationType) {
	s.Type = val
}

// SetContent sets the value of Content.
func (s *UserNotification) SetContent(val UserNotificationContent) {
	s.Content = val
}

// SetIsRead sets the value of IsRead.
func (s *UserNotification) SetIsRead(val bool) {
	s.IsRead = val
}

// SetEmailSent sets the value of EmailSent.
func (s *UserNotification) SetEmailSent(val bool) {
	s.EmailSent = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserNotification) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UserNotification) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

type UserNotificationContent map[string]jx.Raw

func (s *UserNotificationContent) init() UserNotificationContent {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type UserNotificationType string

const (
	UserNotificationTypeTeamAdded       UserNotificationType = "team_added"
	UserNotificationTypeTeamRemoved     UserNotificationType = "team_removed"
	UserNotificationTypeRoleChanged     UserNotificationType = "role_changed"
	UserNotificationTypeIssueRegression UserNotificationType = "issue_regression"
)

// AllValues returns all UserNotificationType values.
func (UserNotificationType) AllValues() []UserNotificationType {
	return []UserNotificationType{
		UserNotificationTypeTeamAdded,
		UserNotificationTypeTeamRemoved,
		UserNotificationTypeRoleChanged,
		UserNotificationTypeIssueRegression,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserNotificationType) MarshalText() ([]byte, error) {
	switch s {
	case UserNotificationTypeTeamAdded:
		return []byte(s), nil
	case UserNotificationTypeTeamRemoved:
		return []byte(s), nil
	case UserNotificationTypeRoleChanged:
		return []byte(s), nil
	case UserNotificationTypeIssueRegression:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserNotificationType) UnmarshalText(data []byte) error {
	switch UserNotificationType(data) {
	case UserNotificationTypeTeamAdded:
		*s = UserNotificationTypeTeamAdded
		return nil
	case UserNotificationTypeTeamRemoved:
		*s = UserNotificationTypeTeamRemoved
		return nil
	case UserNotificationTypeRoleChanged:
		*s = UserNotificationTypeRoleChanged
		return nil
	case UserNotificationTypeIssueRegression:
		*s = UserNotificationTypeIssueRegression
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UserNotificationsResponse
type UserNotificationsResponse struct {
	Notifications []UserNotification `json:"notifications"`
	Total         int                `json:"total"`
}

// GetNotifications returns the value of Notifications.
func (s *UserNotificationsResponse) GetNotifications() []UserNotification {
	return s.Notifications
}

// GetTotal returns the value of Total.
func (s *UserNotificationsResponse) GetTotal() int {
	return s.Total
}

// SetNotifications sets the value of Notifications.
func (s *UserNotificationsResponse) SetNotifications(val []UserNotification) {
	s.Notifications = val
}

// SetTotal sets the value of Total.
func (s *UserNotificationsResponse) SetTotal(val int) {
	s.Total = val
}

func (*UserNotificationsResponse) getUserNotificationsRes() {}

// Ref: #/components/schemas/UserTeam
type UserTeam struct {
	ID   uint         `json:"id"`
	Name string       `json:"name"`
	Role UserTeamRole `json:"role"`
	// Whether user can leave this team.
	CanLeave OptBool `json:"can_leave"`
}

// GetID returns the value of ID.
func (s *UserTeam) GetID() uint {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserTeam) GetName() string {
	return s.Name
}

// GetRole returns the value of Role.
func (s *UserTeam) GetRole() UserTeamRole {
	return s.Role
}

// GetCanLeave returns the value of CanLeave.
func (s *UserTeam) GetCanLeave() OptBool {
	return s.CanLeave
}

// SetID sets the value of ID.
func (s *UserTeam) SetID(val uint) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserTeam) SetName(val string) {
	s.Name = val
}

// SetRole sets the value of Role.
func (s *UserTeam) SetRole(val UserTeamRole) {
	s.Role = val
}

// SetCanLeave sets the value of CanLeave.
func (s *UserTeam) SetCanLeave(val OptBool) {
	s.CanLeave = val
}

type UserTeamRole string

const (
	UserTeamRoleOwner  UserTeamRole = "owner"
	UserTeamRoleAdmin  UserTeamRole = "admin"
	UserTeamRoleMember UserTeamRole = "member"
)

// AllValues returns all UserTeamRole values.
func (UserTeamRole) AllValues() []UserTeamRole {
	return []UserTeamRole{
		UserTeamRoleOwner,
		UserTeamRoleAdmin,
		UserTeamRoleMember,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserTeamRole) MarshalText() ([]byte, error) {
	switch s {
	case UserTeamRoleOwner:
		return []byte(s), nil
	case UserTeamRoleAdmin:
		return []byte(s), nil
	case UserTeamRoleMember:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserTeamRole) UnmarshalText(data []byte) error {
	switch UserTeamRole(data) {
	case UserTeamRoleOwner:
		*s = UserTeamRoleOwner
		return nil
	case UserTeamRoleAdmin:
		*s = UserTeamRoleAdmin
		return nil
	case UserTeamRoleMember:
		*s = UserTeamRoleMember
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/VersionsResponse
type VersionsResponse struct {
	// List of all system components with their versions.
	Components []ComponentVersion `json:"components"`
	// Timestamp when the versions were collected.
	CollectedAt time.Time `json:"collected_at"`
}

// GetComponents returns the value of Components.
func (s *VersionsResponse) GetComponents() []ComponentVersion {
	return s.Components
}

// GetCollectedAt returns the value of CollectedAt.
func (s *VersionsResponse) GetCollectedAt() time.Time {
	return s.CollectedAt
}

// SetComponents sets the value of Components.
func (s *VersionsResponse) SetComponents(val []ComponentVersion) {
	s.Components = val
}

// SetCollectedAt sets the value of CollectedAt.
func (s *VersionsResponse) SetCollectedAt(val time.Time) {
	s.CollectedAt = val
}

func (*VersionsResponse) getVersionsRes() {}
