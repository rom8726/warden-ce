// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddProject implements addProject operation.
	//
	// Add new project.
	//
	// POST /api/v1/projects/add
	AddProject(ctx context.Context, req *AddProjectRequest) (AddProjectRes, error)
	// AddTeamMember implements AddTeamMember operation.
	//
	// Add a user to a team.
	//
	// POST /api/v1/teams/{team_id}/members
	AddTeamMember(ctx context.Context, req *AddTeamMemberRequest, params AddTeamMemberParams) (AddTeamMemberRes, error)
	// ArchiveProject implements ArchiveProject operation.
	//
	// Archive a project.
	//
	// DELETE /api/v1/projects/{project_id}
	ArchiveProject(ctx context.Context, params ArchiveProjectParams) (ArchiveProjectRes, error)
	// ChangeIssueStatus implements changeIssueStatus operation.
	//
	// Change issue status.
	//
	// PUT /api/v1/projects/{project_id}/issues/{issue_id}/change-status
	ChangeIssueStatus(ctx context.Context, req *ChangeIssueStatusReq, params ChangeIssueStatusParams) (ChangeIssueStatusRes, error)
	// ChangeTeamMemberRole implements ChangeTeamMemberRole operation.
	//
	// Change team member role.
	//
	// PUT /api/v1/teams/{team_id}/members/{user_id}/role
	ChangeTeamMemberRole(ctx context.Context, req *ChangeTeamMemberRoleRequest, params ChangeTeamMemberRoleParams) (ChangeTeamMemberRoleRes, error)
	// CheckTeamExists implements CheckTeamExists operation.
	//
	// Check if a team exists by name.
	//
	// GET /api/v1/teams/check-exists/{team_name}
	CheckTeamExists(ctx context.Context, params CheckTeamExistsParams) (CheckTeamExistsRes, error)
	// CompareProjectReleasesAnalytics implements CompareProjectReleasesAnalytics operation.
	//
	// Compare two releases analytics.
	//
	// POST /api/v1/projects/{project_id}/analytics/releases/compare
	CompareProjectReleasesAnalytics(ctx context.Context, req *CompareProjectReleasesAnalyticsReq, params CompareProjectReleasesAnalyticsParams) (CompareProjectReleasesAnalyticsRes, error)
	// Confirm2FA implements Confirm2FA operation.
	//
	// Approve enable 2FA (code from app).
	//
	// POST /api/v1/users/me/2fa/confirm
	Confirm2FA(ctx context.Context, req *TwoFAConfirmRequest) (Confirm2FARes, error)
	// CreateNotificationRule implements CreateNotificationRule operation.
	//
	// Create a new notification rule.
	//
	// POST /api/v1/projects/{project_id}/notification-settings/{setting_id}/rules
	CreateNotificationRule(ctx context.Context, req *CreateNotificationRuleRequest, params CreateNotificationRuleParams) (CreateNotificationRuleRes, error)
	// CreateNotificationSetting implements CreateNotificationSetting operation.
	//
	// Create a new notification setting.
	//
	// POST /api/v1/projects/{project_id}/notification-settings
	CreateNotificationSetting(ctx context.Context, req *CreateNotificationSettingRequest, params CreateNotificationSettingParams) (CreateNotificationSettingRes, error)
	// CreateTeam implements CreateTeam operation.
	//
	// Create a new team.
	//
	// POST /api/v1/teams
	CreateTeam(ctx context.Context, req *CreateTeamRequest) (CreateTeamRes, error)
	// CreateUser implements CreateUser operation.
	//
	// Create a new user (superuser only).
	//
	// POST /api/v1/users
	CreateUser(ctx context.Context, req *CreateUserRequest) (CreateUserRes, error)
	// DeleteNotificationRule implements DeleteNotificationRule operation.
	//
	// Delete a notification rule.
	//
	// DELETE /api/v1/projects/{project_id}/notification-settings/{setting_id}/rules/{rule_id}
	DeleteNotificationRule(ctx context.Context, params DeleteNotificationRuleParams) (DeleteNotificationRuleRes, error)
	// DeleteNotificationSetting implements DeleteNotificationSetting operation.
	//
	// Delete a notification setting.
	//
	// DELETE /api/v1/projects/{project_id}/notification-settings/{setting_id}
	DeleteNotificationSetting(ctx context.Context, params DeleteNotificationSettingParams) (DeleteNotificationSettingRes, error)
	// DeleteTeam implements DeleteTeam operation.
	//
	// Delete a team.
	//
	// DELETE /api/v1/teams/{team_id}
	DeleteTeam(ctx context.Context, params DeleteTeamParams) (DeleteTeamRes, error)
	// DeleteUser implements DeleteUser operation.
	//
	// Delete a user (superuser only, cannot delete superusers).
	//
	// DELETE /api/v1/users/{user_id}
	DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error)
	// Disable2FA implements Disable2FA operation.
	//
	// Disable 2FA (using email-confirmation).
	//
	// POST /api/v1/users/me/2fa/disable
	Disable2FA(ctx context.Context, req *TwoFADisableRequest) (Disable2FARes, error)
	// ForgotPassword implements ForgotPassword operation.
	//
	// Request a password reset.
	//
	// POST /api/v1/auth/forgot-password
	ForgotPassword(ctx context.Context, req *ForgotPasswordRequest) (ForgotPasswordRes, error)
	// GetCurrentUser implements GetCurrentUser operation.
	//
	// Get current user information.
	//
	// GET /api/v1/users/me
	GetCurrentUser(ctx context.Context) (GetCurrentUserRes, error)
	// GetEventsTimeseries implements GetEventsTimeseries operation.
	//
	// Get events timeseries.
	//
	// GET /api/v1/events/timeseries
	GetEventsTimeseries(ctx context.Context, params GetEventsTimeseriesParams) (GetEventsTimeseriesRes, error)
	// GetIssue implements GetIssue operation.
	//
	// Get details of a specific issue.
	//
	// GET /api/v1/projects/{project_id}/issues/{issue_id}
	GetIssue(ctx context.Context, params GetIssueParams) (GetIssueRes, error)
	// GetIssuesTimeseries implements GetIssuesTimeseries operation.
	//
	// Get issues timeseries.
	//
	// GET /api/v1/issues/timeseries
	GetIssuesTimeseries(ctx context.Context, params GetIssuesTimeseriesParams) (GetIssuesTimeseriesRes, error)
	// GetNotificationRule implements GetNotificationRule operation.
	//
	// Get a specific notification rule.
	//
	// GET /api/v1/projects/{project_id}/notification-settings/{setting_id}/rules/{rule_id}
	GetNotificationRule(ctx context.Context, params GetNotificationRuleParams) (GetNotificationRuleRes, error)
	// GetNotificationSetting implements GetNotificationSetting operation.
	//
	// Get a specific notification setting.
	//
	// GET /api/v1/projects/{project_id}/notification-settings/{setting_id}
	GetNotificationSetting(ctx context.Context, params GetNotificationSettingParams) (GetNotificationSettingRes, error)
	// GetProject implements GetProject operation.
	//
	// Get project details.
	//
	// GET /api/v1/projects/{project_id}
	GetProject(ctx context.Context, params GetProjectParams) (GetProjectRes, error)
	// GetProjectIssueEventsTimeseries implements GetProjectIssueEventsTimeseries operation.
	//
	// Get timeseries of events for a specific issue inside a project.
	//
	// GET /api/v1/projects/{project_id}/issues/{issue_id}/events/timeseries
	GetProjectIssueEventsTimeseries(ctx context.Context, params GetProjectIssueEventsTimeseriesParams) (GetProjectIssueEventsTimeseriesRes, error)
	// GetProjectIssueTimeseries implements GetProjectIssueTimeseries operation.
	//
	// Get timeseries for a specific issue inside a project.
	//
	// GET /api/v1/projects/{project_id}/issues/{issue_id}/timeseries
	GetProjectIssueTimeseries(ctx context.Context, params GetProjectIssueTimeseriesParams) (GetProjectIssueTimeseriesRes, error)
	// GetProjectReleaseAnalyticsDetails implements GetProjectReleaseAnalyticsDetails operation.
	//
	// Get analytics details for a specific release.
	//
	// GET /api/v1/projects/{project_id}/analytics/releases/{version}
	GetProjectReleaseAnalyticsDetails(ctx context.Context, params GetProjectReleaseAnalyticsDetailsParams) (GetProjectReleaseAnalyticsDetailsRes, error)
	// GetProjectReleaseErrorsTimeseries implements GetProjectReleaseErrorsTimeseries operation.
	//
	// Get errors timeseries for a release.
	//
	// GET /api/v1/projects/{project_id}/analytics/traffic
	GetProjectReleaseErrorsTimeseries(ctx context.Context, params GetProjectReleaseErrorsTimeseriesParams) (GetProjectReleaseErrorsTimeseriesRes, error)
	// GetProjectReleaseSegments implements GetProjectReleaseSegments operation.
	//
	// Get user segments analytics for a release.
	//
	// GET /api/v1/projects/{project_id}/analytics/segments
	GetProjectReleaseSegments(ctx context.Context, params GetProjectReleaseSegmentsParams) (GetProjectReleaseSegmentsRes, error)
	// GetProjectReleasesAnalytics implements GetProjectReleasesAnalytics operation.
	//
	// Get analytics summary for all releases in project.
	//
	// GET /api/v1/projects/{project_id}/analytics/releases
	GetProjectReleasesAnalytics(ctx context.Context, params GetProjectReleasesAnalyticsParams) (GetProjectReleasesAnalyticsRes, error)
	// GetProjectStats implements GetProjectStats operation.
	//
	// Get project statistics.
	//
	// GET /api/v1/projects/{project_id}/stats
	GetProjectStats(ctx context.Context, params GetProjectStatsParams) (GetProjectStatsRes, error)
	// GetProjectTeam implements GetProjectTeam operation.
	//
	// Get project team.
	//
	// GET /api/v1/projects/{project_id}/team
	GetProjectTeam(ctx context.Context, params GetProjectTeamParams) (GetProjectTeamRes, error)
	// GetRecentIssues implements GetRecentIssues operation.
	//
	// Get recent issues across all projects.
	//
	// GET /api/v1/issues/recent
	GetRecentIssues(ctx context.Context, params GetRecentIssuesParams) (GetRecentIssuesRes, error)
	// GetTeam implements GetTeam operation.
	//
	// Get team details.
	//
	// GET /api/v1/teams/{team_id}
	GetTeam(ctx context.Context, params GetTeamParams) (GetTeamRes, error)
	// GetUnreadNotificationsCount implements GetUnreadNotificationsCount operation.
	//
	// Get unread notifications count.
	//
	// GET /api/v1/notifications/unread-count
	GetUnreadNotificationsCount(ctx context.Context) (GetUnreadNotificationsCountRes, error)
	// GetUserNotifications implements GetUserNotifications operation.
	//
	// Get user notifications.
	//
	// GET /api/v1/notifications
	GetUserNotifications(ctx context.Context, params GetUserNotificationsParams) (GetUserNotificationsRes, error)
	// GetVersions implements GetVersions operation.
	//
	// Returns versions and build times of all Warden system components by collecting data from their
	// tech servers.
	//
	// GET /api/v1/versions
	GetVersions(ctx context.Context) (GetVersionsRes, error)
	// ListIssues implements ListIssues operation.
	//
	// Get all issues across all projects.
	//
	// GET /api/v1/issues
	ListIssues(ctx context.Context, params ListIssuesParams) (ListIssuesRes, error)
	// ListNotificationRules implements ListNotificationRules operation.
	//
	// List all notification rules for notification settings of project.
	//
	// GET /api/v1/projects/{project_id}/notification-settings/{setting_id}/rules
	ListNotificationRules(ctx context.Context, params ListNotificationRulesParams) (ListNotificationRulesRes, error)
	// ListNotificationSettings implements ListNotificationSettings operation.
	//
	// List all notification settings for a project.
	//
	// GET /api/v1/projects/{project_id}/notification-settings
	ListNotificationSettings(ctx context.Context, params ListNotificationSettingsParams) (ListNotificationSettingsRes, error)
	// ListProjects implements ListProjects operation.
	//
	// Get projects list.
	//
	// GET /api/v1/projects
	ListProjects(ctx context.Context) (ListProjectsRes, error)
	// ListTeams implements ListTeams operation.
	//
	// List all teams.
	//
	// GET /api/v1/teams
	ListTeams(ctx context.Context) (ListTeamsRes, error)
	// ListUsers implements ListUsers operation.
	//
	// List all users (superuser only).
	//
	// GET /api/v1/users
	ListUsers(ctx context.Context) (ListUsersRes, error)
	// ListUsersForTeam implements ListUsersForTeam operation.
	//
	// List all users for team admin.
	//
	// GET /api/v1/users/team/{team_id}/list
	ListUsersForTeam(ctx context.Context, params ListUsersForTeamParams) (ListUsersForTeamRes, error)
	// Login implements Login operation.
	//
	// Authenticate user and get access token.
	//
	// POST /api/v1/auth/login
	Login(ctx context.Context, req *LoginRequest) (LoginRes, error)
	// MarkAllNotificationsAsRead implements MarkAllNotificationsAsRead operation.
	//
	// Mark all notifications as read.
	//
	// PUT /api/v1/notifications/read-all
	MarkAllNotificationsAsRead(ctx context.Context) (MarkAllNotificationsAsReadRes, error)
	// MarkNotificationAsRead implements MarkNotificationAsRead operation.
	//
	// Mark notification as read.
	//
	// PUT /api/v1/notifications/{notification_id}/read
	MarkNotificationAsRead(ctx context.Context, params MarkNotificationAsReadParams) (MarkNotificationAsReadRes, error)
	// RecentProjectsList implements RecentProjectsList operation.
	//
	// Get recent projects list.
	//
	// GET /api/v1/projects/recent
	RecentProjectsList(ctx context.Context) (RecentProjectsListRes, error)
	// RefreshToken implements RefreshToken operation.
	//
	// Refresh access token.
	//
	// POST /api/v1/auth/refresh
	RefreshToken(ctx context.Context, req *RefreshTokenRequest) (RefreshTokenRes, error)
	// RemoveTeamMember implements RemoveTeamMember operation.
	//
	// Removes a user from a team. If user_id matches the current user's id, the operation is treated as
	// self-leave (the user leaves the team).
	// Scenarios:
	// - Admin/owner removes another user
	// - User removes themselves (leave)
	// Restrictions:
	// - A user cannot leave the team if they are the only owner
	// - A superuser cannot leave the team if restricted by security policy.
	//
	// DELETE /api/v1/teams/{team_id}/members/{user_id}
	RemoveTeamMember(ctx context.Context, params RemoveTeamMemberParams) (RemoveTeamMemberRes, error)
	// Reset2FA implements Reset2FA operation.
	//
	// Reset/generate secret 2FA (using email-confirmation).
	//
	// POST /api/v1/users/me/2fa/reset
	Reset2FA(ctx context.Context, req *TwoFAResetRequest) (Reset2FARes, error)
	// ResetPassword implements ResetPassword operation.
	//
	// Reset password using token.
	//
	// POST /api/v1/auth/reset-password
	ResetPassword(ctx context.Context, req *ResetPasswordRequest) (ResetPasswordRes, error)
	// Send2FACode implements send2FACode operation.
	//
	// Send 2FA email code for disable/reset.
	//
	// POST /api/v1/users/me/2fa/send_code
	Send2FACode(ctx context.Context) (Send2FACodeRes, error)
	// SendTestNotification implements sendTestNotification operation.
	//
	// Send test notification.
	//
	// POST /api/v1/projects/{project_id}/notification-settings/{setting_id}/test
	SendTestNotification(ctx context.Context, params SendTestNotificationParams) (SendTestNotificationRes, error)
	// SetSuperuserStatus implements SetSuperuserStatus operation.
	//
	// Set or unset superuser status (superuser only, cannot modify admin user).
	//
	// PUT /api/v1/users/{user_id}/superuser
	SetSuperuserStatus(ctx context.Context, req *SetSuperuserStatusRequest, params SetSuperuserStatusParams) (SetSuperuserStatusRes, error)
	// SetUserActiveStatus implements SetUserActiveStatus operation.
	//
	// Set or unset user active status (superuser only).
	//
	// PUT /api/v1/users/{user_id}/active
	SetUserActiveStatus(ctx context.Context, req *SetUserActiveStatusRequest, params SetUserActiveStatusParams) (SetUserActiveStatusRes, error)
	// Setup2FA implements Setup2FA operation.
	//
	// Begin setup 2FA (generate secret and QR-code).
	//
	// POST /api/v1/users/me/2fa/setup
	Setup2FA(ctx context.Context) (Setup2FARes, error)
	// UpdateNotificationRule implements UpdateNotificationRule operation.
	//
	// Update a notification rule.
	//
	// PUT /api/v1/projects/{project_id}/notification-settings/{setting_id}/rules/{rule_id}
	UpdateNotificationRule(ctx context.Context, req *UpdateNotificationRuleRequest, params UpdateNotificationRuleParams) (UpdateNotificationRuleRes, error)
	// UpdateNotificationSetting implements UpdateNotificationSetting operation.
	//
	// Update a notification setting.
	//
	// PUT /api/v1/projects/{project_id}/notification-settings/{setting_id}
	UpdateNotificationSetting(ctx context.Context, req *UpdateNotificationSettingRequest, params UpdateNotificationSettingParams) (UpdateNotificationSettingRes, error)
	// UpdateProject implements UpdateProject operation.
	//
	// Update project name and description.
	//
	// PUT /api/v1/projects/{project_id}
	UpdateProject(ctx context.Context, req *UpdateProjectRequest, params UpdateProjectParams) (UpdateProjectRes, error)
	// UserChangeMyPassword implements userChangeMyPassword operation.
	//
	// Change my password.
	//
	// POST /api/v1/users/me/change-password
	UserChangeMyPassword(ctx context.Context, req *ChangeUserPasswordRequest) (UserChangeMyPasswordRes, error)
	// Verify2FA implements Verify2FA operation.
	//
	// Verify 2FA-code on login.
	//
	// POST /api/v1/auth/2fa/verify
	Verify2FA(ctx context.Context, req *TwoFAVerifyRequest) (Verify2FARes, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
