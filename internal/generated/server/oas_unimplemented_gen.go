// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// AddProject implements addProject operation.
//
// Add new project.
//
// POST /api/v1/projects/add
func (UnimplementedHandler) AddProject(ctx context.Context, req *AddProjectRequest) (r AddProjectRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AddTeamMember implements AddTeamMember operation.
//
// Add a user to a team.
//
// POST /api/v1/teams/{team_id}/members
func (UnimplementedHandler) AddTeamMember(ctx context.Context, req *AddTeamMemberRequest, params AddTeamMemberParams) (r AddTeamMemberRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ArchiveProject implements ArchiveProject operation.
//
// Archive a project.
//
// DELETE /api/v1/projects/{project_id}
func (UnimplementedHandler) ArchiveProject(ctx context.Context, params ArchiveProjectParams) (r ArchiveProjectRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ChangeIssueStatus implements changeIssueStatus operation.
//
// Change issue status.
//
// PUT /api/v1/projects/{project_id}/issues/{issue_id}/change-status
func (UnimplementedHandler) ChangeIssueStatus(ctx context.Context, req *ChangeIssueStatusReq, params ChangeIssueStatusParams) (r ChangeIssueStatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ChangeTeamMemberRole implements ChangeTeamMemberRole operation.
//
// Change team member role.
//
// PUT /api/v1/teams/{team_id}/members/{user_id}/role
func (UnimplementedHandler) ChangeTeamMemberRole(ctx context.Context, req *ChangeTeamMemberRoleRequest, params ChangeTeamMemberRoleParams) (r ChangeTeamMemberRoleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CheckTeamExists implements CheckTeamExists operation.
//
// Check if a team exists by name.
//
// GET /api/v1/teams/check-exists/{team_name}
func (UnimplementedHandler) CheckTeamExists(ctx context.Context, params CheckTeamExistsParams) (r CheckTeamExistsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CompareProjectReleasesAnalytics implements CompareProjectReleasesAnalytics operation.
//
// Compare two releases analytics.
//
// POST /api/v1/projects/{project_id}/analytics/releases/compare
func (UnimplementedHandler) CompareProjectReleasesAnalytics(ctx context.Context, req *CompareProjectReleasesAnalyticsReq, params CompareProjectReleasesAnalyticsParams) (r CompareProjectReleasesAnalyticsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Confirm2FA implements Confirm2FA operation.
//
// Approve enable 2FA (code from app).
//
// POST /api/v1/users/me/2fa/confirm
func (UnimplementedHandler) Confirm2FA(ctx context.Context, req *TwoFAConfirmRequest) (r Confirm2FARes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateNotificationRule implements CreateNotificationRule operation.
//
// Create a new notification rule.
//
// POST /api/v1/projects/{project_id}/notification-settings/{setting_id}/rules
func (UnimplementedHandler) CreateNotificationRule(ctx context.Context, req *CreateNotificationRuleRequest, params CreateNotificationRuleParams) (r CreateNotificationRuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateNotificationSetting implements CreateNotificationSetting operation.
//
// Create a new notification setting.
//
// POST /api/v1/projects/{project_id}/notification-settings
func (UnimplementedHandler) CreateNotificationSetting(ctx context.Context, req *CreateNotificationSettingRequest, params CreateNotificationSettingParams) (r CreateNotificationSettingRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateTeam implements CreateTeam operation.
//
// Create a new team.
//
// POST /api/v1/teams
func (UnimplementedHandler) CreateTeam(ctx context.Context, req *CreateTeamRequest) (r CreateTeamRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateUser implements CreateUser operation.
//
// Create a new user (superuser only).
//
// POST /api/v1/users
func (UnimplementedHandler) CreateUser(ctx context.Context, req *CreateUserRequest) (r CreateUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteNotificationRule implements DeleteNotificationRule operation.
//
// Delete a notification rule.
//
// DELETE /api/v1/projects/{project_id}/notification-settings/{setting_id}/rules/{rule_id}
func (UnimplementedHandler) DeleteNotificationRule(ctx context.Context, params DeleteNotificationRuleParams) (r DeleteNotificationRuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteNotificationSetting implements DeleteNotificationSetting operation.
//
// Delete a notification setting.
//
// DELETE /api/v1/projects/{project_id}/notification-settings/{setting_id}
func (UnimplementedHandler) DeleteNotificationSetting(ctx context.Context, params DeleteNotificationSettingParams) (r DeleteNotificationSettingRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteTeam implements DeleteTeam operation.
//
// Delete a team.
//
// DELETE /api/v1/teams/{team_id}
func (UnimplementedHandler) DeleteTeam(ctx context.Context, params DeleteTeamParams) (r DeleteTeamRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteUser implements DeleteUser operation.
//
// Delete a user (superuser only, cannot delete superusers).
//
// DELETE /api/v1/users/{user_id}
func (UnimplementedHandler) DeleteUser(ctx context.Context, params DeleteUserParams) (r DeleteUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Disable2FA implements Disable2FA operation.
//
// Disable 2FA (using email-confirmation).
//
// POST /api/v1/users/me/2fa/disable
func (UnimplementedHandler) Disable2FA(ctx context.Context, req *TwoFADisableRequest) (r Disable2FARes, _ error) {
	return r, ht.ErrNotImplemented
}

// ForgotPassword implements ForgotPassword operation.
//
// Request a password reset.
//
// POST /api/v1/auth/forgot-password
func (UnimplementedHandler) ForgotPassword(ctx context.Context, req *ForgotPasswordRequest) (r ForgotPasswordRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCurrentUser implements GetCurrentUser operation.
//
// Get current user information.
//
// GET /api/v1/users/me
func (UnimplementedHandler) GetCurrentUser(ctx context.Context) (r GetCurrentUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetEventsTimeseries implements GetEventsTimeseries operation.
//
// Get events timeseries.
//
// GET /api/v1/events/timeseries
func (UnimplementedHandler) GetEventsTimeseries(ctx context.Context, params GetEventsTimeseriesParams) (r GetEventsTimeseriesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetIssue implements GetIssue operation.
//
// Get details of a specific issue.
//
// GET /api/v1/projects/{project_id}/issues/{issue_id}
func (UnimplementedHandler) GetIssue(ctx context.Context, params GetIssueParams) (r GetIssueRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetIssuesTimeseries implements GetIssuesTimeseries operation.
//
// Get issues timeseries.
//
// GET /api/v1/issues/timeseries
func (UnimplementedHandler) GetIssuesTimeseries(ctx context.Context, params GetIssuesTimeseriesParams) (r GetIssuesTimeseriesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNotificationRule implements GetNotificationRule operation.
//
// Get a specific notification rule.
//
// GET /api/v1/projects/{project_id}/notification-settings/{setting_id}/rules/{rule_id}
func (UnimplementedHandler) GetNotificationRule(ctx context.Context, params GetNotificationRuleParams) (r GetNotificationRuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNotificationSetting implements GetNotificationSetting operation.
//
// Get a specific notification setting.
//
// GET /api/v1/projects/{project_id}/notification-settings/{setting_id}
func (UnimplementedHandler) GetNotificationSetting(ctx context.Context, params GetNotificationSettingParams) (r GetNotificationSettingRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProject implements GetProject operation.
//
// Get project details.
//
// GET /api/v1/projects/{project_id}
func (UnimplementedHandler) GetProject(ctx context.Context, params GetProjectParams) (r GetProjectRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProjectIssueEventsTimeseries implements GetProjectIssueEventsTimeseries operation.
//
// Get timeseries of events for a specific issue inside a project.
//
// GET /api/v1/projects/{project_id}/issues/{issue_id}/events/timeseries
func (UnimplementedHandler) GetProjectIssueEventsTimeseries(ctx context.Context, params GetProjectIssueEventsTimeseriesParams) (r GetProjectIssueEventsTimeseriesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProjectIssueTimeseries implements GetProjectIssueTimeseries operation.
//
// Get timeseries for a specific issue inside a project.
//
// GET /api/v1/projects/{project_id}/issues/{issue_id}/timeseries
func (UnimplementedHandler) GetProjectIssueTimeseries(ctx context.Context, params GetProjectIssueTimeseriesParams) (r GetProjectIssueTimeseriesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProjectReleaseAnalyticsDetails implements GetProjectReleaseAnalyticsDetails operation.
//
// Get analytics details for a specific release.
//
// GET /api/v1/projects/{project_id}/analytics/releases/{version}
func (UnimplementedHandler) GetProjectReleaseAnalyticsDetails(ctx context.Context, params GetProjectReleaseAnalyticsDetailsParams) (r GetProjectReleaseAnalyticsDetailsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProjectReleaseErrorsTimeseries implements GetProjectReleaseErrorsTimeseries operation.
//
// Get errors timeseries for a release.
//
// GET /api/v1/projects/{project_id}/analytics/traffic
func (UnimplementedHandler) GetProjectReleaseErrorsTimeseries(ctx context.Context, params GetProjectReleaseErrorsTimeseriesParams) (r GetProjectReleaseErrorsTimeseriesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProjectReleaseSegments implements GetProjectReleaseSegments operation.
//
// Get user segments analytics for a release.
//
// GET /api/v1/projects/{project_id}/analytics/segments
func (UnimplementedHandler) GetProjectReleaseSegments(ctx context.Context, params GetProjectReleaseSegmentsParams) (r GetProjectReleaseSegmentsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProjectReleasesAnalytics implements GetProjectReleasesAnalytics operation.
//
// Get analytics summary for all releases in project.
//
// GET /api/v1/projects/{project_id}/analytics/releases
func (UnimplementedHandler) GetProjectReleasesAnalytics(ctx context.Context, params GetProjectReleasesAnalyticsParams) (r GetProjectReleasesAnalyticsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProjectStats implements GetProjectStats operation.
//
// Get project statistics.
//
// GET /api/v1/projects/{project_id}/stats
func (UnimplementedHandler) GetProjectStats(ctx context.Context, params GetProjectStatsParams) (r GetProjectStatsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProjectTeam implements GetProjectTeam operation.
//
// Get project team.
//
// GET /api/v1/projects/{project_id}/team
func (UnimplementedHandler) GetProjectTeam(ctx context.Context, params GetProjectTeamParams) (r GetProjectTeamRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetRecentIssues implements GetRecentIssues operation.
//
// Get recent issues across all projects.
//
// GET /api/v1/issues/recent
func (UnimplementedHandler) GetRecentIssues(ctx context.Context, params GetRecentIssuesParams) (r GetRecentIssuesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTeam implements GetTeam operation.
//
// Get team details.
//
// GET /api/v1/teams/{team_id}
func (UnimplementedHandler) GetTeam(ctx context.Context, params GetTeamParams) (r GetTeamRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUnreadNotificationsCount implements GetUnreadNotificationsCount operation.
//
// Get unread notifications count.
//
// GET /api/v1/notifications/unread-count
func (UnimplementedHandler) GetUnreadNotificationsCount(ctx context.Context) (r GetUnreadNotificationsCountRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUserNotifications implements GetUserNotifications operation.
//
// Get user notifications.
//
// GET /api/v1/notifications
func (UnimplementedHandler) GetUserNotifications(ctx context.Context, params GetUserNotificationsParams) (r GetUserNotificationsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVersions implements GetVersions operation.
//
// Returns versions and build times of all Warden system components by collecting data from their
// tech servers.
//
// GET /api/v1/versions
func (UnimplementedHandler) GetVersions(ctx context.Context) (r GetVersionsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListIssues implements ListIssues operation.
//
// Get all issues across all projects.
//
// GET /api/v1/issues
func (UnimplementedHandler) ListIssues(ctx context.Context, params ListIssuesParams) (r ListIssuesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListNotificationRules implements ListNotificationRules operation.
//
// List all notification rules for notification settings of project.
//
// GET /api/v1/projects/{project_id}/notification-settings/{setting_id}/rules
func (UnimplementedHandler) ListNotificationRules(ctx context.Context, params ListNotificationRulesParams) (r ListNotificationRulesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListNotificationSettings implements ListNotificationSettings operation.
//
// List all notification settings for a project.
//
// GET /api/v1/projects/{project_id}/notification-settings
func (UnimplementedHandler) ListNotificationSettings(ctx context.Context, params ListNotificationSettingsParams) (r ListNotificationSettingsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListProjects implements ListProjects operation.
//
// Get projects list.
//
// GET /api/v1/projects
func (UnimplementedHandler) ListProjects(ctx context.Context) (r ListProjectsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListTeams implements ListTeams operation.
//
// List all teams.
//
// GET /api/v1/teams
func (UnimplementedHandler) ListTeams(ctx context.Context) (r ListTeamsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListUsers implements ListUsers operation.
//
// List all users (superuser only).
//
// GET /api/v1/users
func (UnimplementedHandler) ListUsers(ctx context.Context) (r ListUsersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListUsersForTeam implements ListUsersForTeam operation.
//
// List all users for team admin.
//
// GET /api/v1/users/team/{team_id}/list
func (UnimplementedHandler) ListUsersForTeam(ctx context.Context, params ListUsersForTeamParams) (r ListUsersForTeamRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Login implements Login operation.
//
// Authenticate user and get access token.
//
// POST /api/v1/auth/login
func (UnimplementedHandler) Login(ctx context.Context, req *LoginRequest) (r LoginRes, _ error) {
	return r, ht.ErrNotImplemented
}

// MarkAllNotificationsAsRead implements MarkAllNotificationsAsRead operation.
//
// Mark all notifications as read.
//
// PUT /api/v1/notifications/read-all
func (UnimplementedHandler) MarkAllNotificationsAsRead(ctx context.Context) (r MarkAllNotificationsAsReadRes, _ error) {
	return r, ht.ErrNotImplemented
}

// MarkNotificationAsRead implements MarkNotificationAsRead operation.
//
// Mark notification as read.
//
// PUT /api/v1/notifications/{notification_id}/read
func (UnimplementedHandler) MarkNotificationAsRead(ctx context.Context, params MarkNotificationAsReadParams) (r MarkNotificationAsReadRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RecentProjectsList implements RecentProjectsList operation.
//
// Get recent projects list.
//
// GET /api/v1/projects/recent
func (UnimplementedHandler) RecentProjectsList(ctx context.Context) (r RecentProjectsListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RefreshToken implements RefreshToken operation.
//
// Refresh access token.
//
// POST /api/v1/auth/refresh
func (UnimplementedHandler) RefreshToken(ctx context.Context, req *RefreshTokenRequest) (r RefreshTokenRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveTeamMember implements RemoveTeamMember operation.
//
// Removes a user from a team. If user_id matches the current user's id, the operation is treated as
// self-leave (the user leaves the team).
// Scenarios:
// - Admin/owner removes another user
// - User removes themselves (leave)
// Restrictions:
// - A user cannot leave the team if they are the only owner
// - A superuser cannot leave the team if restricted by security policy.
//
// DELETE /api/v1/teams/{team_id}/members/{user_id}
func (UnimplementedHandler) RemoveTeamMember(ctx context.Context, params RemoveTeamMemberParams) (r RemoveTeamMemberRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Reset2FA implements Reset2FA operation.
//
// Reset/generate secret 2FA (using email-confirmation).
//
// POST /api/v1/users/me/2fa/reset
func (UnimplementedHandler) Reset2FA(ctx context.Context, req *TwoFAResetRequest) (r Reset2FARes, _ error) {
	return r, ht.ErrNotImplemented
}

// ResetPassword implements ResetPassword operation.
//
// Reset password using token.
//
// POST /api/v1/auth/reset-password
func (UnimplementedHandler) ResetPassword(ctx context.Context, req *ResetPasswordRequest) (r ResetPasswordRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Send2FACode implements send2FACode operation.
//
// Send 2FA email code for disable/reset.
//
// POST /api/v1/users/me/2fa/send_code
func (UnimplementedHandler) Send2FACode(ctx context.Context) (r Send2FACodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SendTestNotification implements sendTestNotification operation.
//
// Send test notification.
//
// POST /api/v1/projects/{project_id}/notification-settings/{setting_id}/test
func (UnimplementedHandler) SendTestNotification(ctx context.Context, params SendTestNotificationParams) (r SendTestNotificationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SetSuperuserStatus implements SetSuperuserStatus operation.
//
// Set or unset superuser status (superuser only, cannot modify admin user).
//
// PUT /api/v1/users/{user_id}/superuser
func (UnimplementedHandler) SetSuperuserStatus(ctx context.Context, req *SetSuperuserStatusRequest, params SetSuperuserStatusParams) (r SetSuperuserStatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SetUserActiveStatus implements SetUserActiveStatus operation.
//
// Set or unset user active status (superuser only).
//
// PUT /api/v1/users/{user_id}/active
func (UnimplementedHandler) SetUserActiveStatus(ctx context.Context, req *SetUserActiveStatusRequest, params SetUserActiveStatusParams) (r SetUserActiveStatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Setup2FA implements Setup2FA operation.
//
// Begin setup 2FA (generate secret and QR-code).
//
// POST /api/v1/users/me/2fa/setup
func (UnimplementedHandler) Setup2FA(ctx context.Context) (r Setup2FARes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateNotificationRule implements UpdateNotificationRule operation.
//
// Update a notification rule.
//
// PUT /api/v1/projects/{project_id}/notification-settings/{setting_id}/rules/{rule_id}
func (UnimplementedHandler) UpdateNotificationRule(ctx context.Context, req *UpdateNotificationRuleRequest, params UpdateNotificationRuleParams) (r UpdateNotificationRuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateNotificationSetting implements UpdateNotificationSetting operation.
//
// Update a notification setting.
//
// PUT /api/v1/projects/{project_id}/notification-settings/{setting_id}
func (UnimplementedHandler) UpdateNotificationSetting(ctx context.Context, req *UpdateNotificationSettingRequest, params UpdateNotificationSettingParams) (r UpdateNotificationSettingRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateProject implements UpdateProject operation.
//
// Update project name and description.
//
// PUT /api/v1/projects/{project_id}
func (UnimplementedHandler) UpdateProject(ctx context.Context, req *UpdateProjectRequest, params UpdateProjectParams) (r UpdateProjectRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UserChangeMyPassword implements userChangeMyPassword operation.
//
// Change my password.
//
// POST /api/v1/users/me/change-password
func (UnimplementedHandler) UserChangeMyPassword(ctx context.Context, req *ChangeUserPasswordRequest) (r UserChangeMyPasswordRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Verify2FA implements Verify2FA operation.
//
// Verify 2FA-code on login.
//
// POST /api/v1/auth/2fa/verify
func (UnimplementedHandler) Verify2FA(ctx context.Context, req *TwoFAVerifyRequest) (r Verify2FARes, _ error) {
	return r, ht.ErrNotImplemented
}

// NewError creates *ErrorStatusCode from error returned by handler.
//
// Used for common default response.
func (UnimplementedHandler) NewError(ctx context.Context, err error) (r *ErrorStatusCode) {
	r = new(ErrorStatusCode)
	return r
}
