version: '3.8'

services:
  warden-reverse-proxy:
    build:
      context: ../reverse-proxy
      dockerfile: Dockerfile
    container_name: warden-reverse-proxy
    ports:
      - "443:443"
      - "8090:8090"
    environment:
      - DOMAIN=${DOMAIN}
      - BACKEND_URL=http://warden-backend:8080
      - FRONTEND_URL=http://warden-frontend
      - INGEST_SERVER_URL=http://warden-ingest-server:8080
      - SSL_CERT=${SSL_CERT}
      - SSL_CERT_KEY=${SSL_CERT_KEY}
      - SECURE_LINK_MD5=${SECURE_LINK_MD5}
    volumes:
      - "./nginx/ssl:/etc/nginx/ssl"
    depends_on:
      warden-frontend:
        condition: service_healthy
      warden-ingest-server:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "netstat", "-tln", "|", "grep", "443 && netstat", "-tln", "|", "grep", "8090"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  warden-frontend:
    build:
      context: ../ui
      dockerfile: Dockerfile
    container_name: warden-frontend
    environment:
      - WARDEN_API_BASE_URL=https://${DOMAIN}
    restart: always
    depends_on:
      warden-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--silent", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  warden-backend:
    container_name: warden-backend
    build:
      context: ../
      target: prod
      dockerfile: Dockerfile.backend
#    ports:
#      - "8080:8080"
#      - "8081:8081"
    env_file:
      - compose.env
    volumes:
      - "./secrets:/opt/warden/secrets"
    command: ["/bin/app", "server"]
    depends_on:
      warden-postgresql:
        condition: service_healthy
      warden-pgbouncer:
        condition: service_healthy
      warden-redis:
        condition: service_healthy
      warden-clickhouse:
        condition: service_healthy
      warden-kafka:
        condition: service_healthy
      warden-envelope-consumer:
        condition: service_healthy
      warden-ingest-server:
        condition: service_healthy
      warden-issue-notificator:
        condition: service_healthy
      warden-user-notificator:
        condition: service_healthy
      warden-scheduler:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--silent", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  warden-ingest-server:
    container_name: warden-ingest-server
    build:
      context: ../
      target: prod
      dockerfile: Dockerfile.ingest_server
    ports:
      - "8095:8080"
    env_file:
      - compose.env
    command: ["/bin/app", "server"]
    depends_on:
      warden-postgresql:
        condition: service_healthy
      warden-pgbouncer:
        condition: service_healthy
      warden-kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--silent", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  warden-envelope-consumer:
    container_name: warden-envelope-consumer
    build:
      context: ../
      target: prod
      dockerfile: Dockerfile.envelope_consumer
    #    ports:
    #      - "8081:8081"
    env_file:
      - compose.env
    command: ["/bin/app", "consumer"]
    depends_on:
      warden-postgresql:
        condition: service_healthy
      warden-pgbouncer:
        condition: service_healthy
      warden-clickhouse:
        condition: service_healthy
      warden-kafka:
        condition: service_healthy
      warden-ingest-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--silent", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  warden-issue-notificator:
    container_name: warden-issue-notificator
    build:
      context: ../
      target: prod
      dockerfile: Dockerfile.issue_notificator
    #    ports:
    #      - "8081:8081"
    env_file:
      - compose.env
    command: ["/bin/app", "notificator"]
    depends_on:
      warden-postgresql:
        condition: service_healthy
      warden-pgbouncer:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--silent", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  warden-user-notificator:
    container_name: warden-user-notificator
    build:
      context: ../
      target: prod
      dockerfile: Dockerfile.user_notificator
    #    ports:
    #      - "8081:8081"
    env_file:
      - compose.env
    command: ["/bin/app", "notificator"]
    depends_on:
      warden-postgresql:
        condition: service_healthy
      warden-pgbouncer:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--silent", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  warden-scheduler:
    container_name: warden-scheduler
    build:
      context: ../
      target: prod
      dockerfile: Dockerfile.scheduler
    #    ports:
    #      - "8081:8081"
    env_file:
      - compose.env
    command: ["/bin/app", "run"]
    depends_on:
      warden-postgresql:
        condition: service_healthy
      warden-pgbouncer:
        condition: service_healthy
      warden-clickhouse:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--silent", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  warden-postgresql:
    image: postgres:16
    container_name: warden-postgresql
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db-ce
      PGDATA: /var/lib/postgresql/data/main
    volumes:
      - "postgresql_warden_ce:/var/lib/postgresql/data/main"
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d db-ce"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  warden-pgbouncer:
    build:
      context: ../pgbouncer
      dockerfile: Dockerfile
    container_name: warden-pgbouncer
    restart: always
    ports:
      - "6432:6432"
    environment:
      - DB_HOST=warden-postgresql
      - DB_PORT=5432
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_NAME=db-ce
      - LISTEN_PORT=6432
      - MAX_CLIENT_CONN=1000
      - DEFAULT_POOL_SIZE=20
      - MIN_POOL_SIZE=5
      - RESERVE_POOL_SIZE=5
      - MAX_DB_CONNECTIONS=100
      - MAX_USER_CONNECTIONS=100
      - VERBOSE=0
      - IGNORE_STARTUP_PARAMETERS=extra_float_digits
    depends_on:
      warden-postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-p", "6432", "-U", "user"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  warden-redis:
    image: 'redis'
    container_name: warden-redis
    volumes:
      - "redis_warden:/data"
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  warden-clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: warden-clickhouse
    environment:
      CLICKHOUSE_DB: warden
      CLICKHOUSE_USER: default
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_PASSWORD: password
    volumes:
      - "clickhouse_warden_ce:/var/lib/clickhouse"
    ports:
      - "9000:9000"
      - "8123:8123"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  warden-zookeeper:
    container_name: warden-zookeper
    image: 'bitnami/zookeeper:3.9.3'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 | grep -q 'Zookeeper version' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  warden-kafka:
    container_name: warden-kafka
    image: 'bitnami/kafka:3.6.0'
    ports:
      - '9093:9093'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=warden-zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://warden-kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_ENABLE_KRAFT=no
      - ALLOW_PLAINTEXT_LISTENER=yes
      - BITNAMI_DEBUG=true
    volumes:
      - "kafka_warden:/var/lib/kafka/data"
    depends_on:
      warden-zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  warden-kafka-ui:
    container_name: warden-kafka-ui
    image: 'provectuslabs/kafka-ui'
    ports:
      - 9094:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=warden-kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=warden-zookeeper:2181
    depends_on:
      warden-kafka:
        condition: service_healthy

  warden-mailhog:
    container_name: warden-mailhog
    image: mailhog/mailhog
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
    postgresql_warden_ce:
    redis_warden:
    clickhouse_warden_ce:
    kafka_warden:
