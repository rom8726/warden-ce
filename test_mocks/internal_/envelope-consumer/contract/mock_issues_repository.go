// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockIssuesRepository is an autogenerated mock type for the IssuesRepository type
type MockIssuesRepository struct {
	mock.Mock
}

type MockIssuesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIssuesRepository) EXPECT() *MockIssuesRepository_Expecter {
	return &MockIssuesRepository_Expecter{mock: &_m.Mock}
}

// UpsertIssue provides a mock function with given fields: ctx, issue
func (_m *MockIssuesRepository) UpsertIssue(ctx context.Context, issue domain.IssueDTO) (domain.IssueUpsertResult, error) {
	ret := _m.Called(ctx, issue)

	if len(ret) == 0 {
		panic("no return value specified for UpsertIssue")
	}

	var r0 domain.IssueUpsertResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueDTO) (domain.IssueUpsertResult, error)); ok {
		return rf(ctx, issue)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueDTO) domain.IssueUpsertResult); ok {
		r0 = rf(ctx, issue)
	} else {
		r0 = ret.Get(0).(domain.IssueUpsertResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.IssueDTO) error); ok {
		r1 = rf(ctx, issue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuesRepository_UpsertIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertIssue'
type MockIssuesRepository_UpsertIssue_Call struct {
	*mock.Call
}

// UpsertIssue is a helper method to define mock.On call
//   - ctx context.Context
//   - issue domain.IssueDTO
func (_e *MockIssuesRepository_Expecter) UpsertIssue(ctx interface{}, issue interface{}) *MockIssuesRepository_UpsertIssue_Call {
	return &MockIssuesRepository_UpsertIssue_Call{Call: _e.mock.On("UpsertIssue", ctx, issue)}
}

func (_c *MockIssuesRepository_UpsertIssue_Call) Run(run func(ctx context.Context, issue domain.IssueDTO)) *MockIssuesRepository_UpsertIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.IssueDTO))
	})
	return _c
}

func (_c *MockIssuesRepository_UpsertIssue_Call) Return(_a0 domain.IssueUpsertResult, _a1 error) *MockIssuesRepository_UpsertIssue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuesRepository_UpsertIssue_Call) RunAndReturn(run func(context.Context, domain.IssueDTO) (domain.IssueUpsertResult, error)) *MockIssuesRepository_UpsertIssue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIssuesRepository creates a new instance of MockIssuesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIssuesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIssuesRepository {
	mock := &MockIssuesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
