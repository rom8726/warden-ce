// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockEventUseCase is an autogenerated mock type for the EventUseCase type
type MockEventUseCase struct {
	mock.Mock
}

type MockEventUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventUseCase) EXPECT() *MockEventUseCase_Expecter {
	return &MockEventUseCase_Expecter{mock: &_m.Mock}
}

// ProcessEvent provides a mock function with given fields: ctx, projectID, eventData
func (_m *MockEventUseCase) ProcessEvent(ctx context.Context, projectID domain.ProjectID, eventData map[string]interface{}) (domain.EventID, error) {
	ret := _m.Called(ctx, projectID, eventData)

	if len(ret) == 0 {
		panic("no return value specified for ProcessEvent")
	}

	var r0 domain.EventID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, map[string]interface{}) (domain.EventID, error)); ok {
		return rf(ctx, projectID, eventData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, map[string]interface{}) domain.EventID); ok {
		r0 = rf(ctx, projectID, eventData)
	} else {
		r0 = ret.Get(0).(domain.EventID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, map[string]interface{}) error); ok {
		r1 = rf(ctx, projectID, eventData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventUseCase_ProcessEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessEvent'
type MockEventUseCase_ProcessEvent_Call struct {
	*mock.Call
}

// ProcessEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - eventData map[string]interface{}
func (_e *MockEventUseCase_Expecter) ProcessEvent(ctx interface{}, projectID interface{}, eventData interface{}) *MockEventUseCase_ProcessEvent_Call {
	return &MockEventUseCase_ProcessEvent_Call{Call: _e.mock.On("ProcessEvent", ctx, projectID, eventData)}
}

func (_c *MockEventUseCase_ProcessEvent_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, eventData map[string]interface{})) *MockEventUseCase_ProcessEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockEventUseCase_ProcessEvent_Call) Return(_a0 domain.EventID, _a1 error) *MockEventUseCase_ProcessEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventUseCase_ProcessEvent_Call) RunAndReturn(run func(context.Context, domain.ProjectID, map[string]interface{}) (domain.EventID, error)) *MockEventUseCase_ProcessEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventUseCase creates a new instance of MockEventUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventUseCase {
	mock := &MockEventUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
