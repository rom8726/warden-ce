// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockIssueReleasesRepository is an autogenerated mock type for the IssueReleasesRepository type
type MockIssueReleasesRepository struct {
	mock.Mock
}

type MockIssueReleasesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIssueReleasesRepository) EXPECT() *MockIssueReleasesRepository_Expecter {
	return &MockIssueReleasesRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, issueID, releaseID, firstSeenIn
func (_m *MockIssueReleasesRepository) Create(ctx context.Context, issueID domain.IssueID, releaseID domain.ReleaseID, firstSeenIn bool) error {
	ret := _m.Called(ctx, issueID, releaseID, firstSeenIn)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueID, domain.ReleaseID, bool) error); ok {
		r0 = rf(ctx, issueID, releaseID, firstSeenIn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIssueReleasesRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIssueReleasesRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - issueID domain.IssueID
//   - releaseID domain.ReleaseID
//   - firstSeenIn bool
func (_e *MockIssueReleasesRepository_Expecter) Create(ctx interface{}, issueID interface{}, releaseID interface{}, firstSeenIn interface{}) *MockIssueReleasesRepository_Create_Call {
	return &MockIssueReleasesRepository_Create_Call{Call: _e.mock.On("Create", ctx, issueID, releaseID, firstSeenIn)}
}

func (_c *MockIssueReleasesRepository_Create_Call) Run(run func(ctx context.Context, issueID domain.IssueID, releaseID domain.ReleaseID, firstSeenIn bool)) *MockIssueReleasesRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.IssueID), args[2].(domain.ReleaseID), args[3].(bool))
	})
	return _c
}

func (_c *MockIssueReleasesRepository_Create_Call) Return(_a0 error) *MockIssueReleasesRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIssueReleasesRepository_Create_Call) RunAndReturn(run func(context.Context, domain.IssueID, domain.ReleaseID, bool) error) *MockIssueReleasesRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIssueReleasesRepository creates a new instance of MockIssueReleasesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIssueReleasesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIssueReleasesRepository {
	mock := &MockIssueReleasesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
