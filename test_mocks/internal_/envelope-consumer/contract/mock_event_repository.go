// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockEventRepository is an autogenerated mock type for the EventRepository type
type MockEventRepository struct {
	mock.Mock
}

type MockEventRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventRepository) EXPECT() *MockEventRepository_Expecter {
	return &MockEventRepository_Expecter{mock: &_m.Mock}
}

// StoreWithFingerprints provides a mock function with given fields: ctx, event
func (_m *MockEventRepository) StoreWithFingerprints(ctx context.Context, event *domain.Event) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for StoreWithFingerprints")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventRepository_StoreWithFingerprints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreWithFingerprints'
type MockEventRepository_StoreWithFingerprints_Call struct {
	*mock.Call
}

// StoreWithFingerprints is a helper method to define mock.On call
//   - ctx context.Context
//   - event *domain.Event
func (_e *MockEventRepository_Expecter) StoreWithFingerprints(ctx interface{}, event interface{}) *MockEventRepository_StoreWithFingerprints_Call {
	return &MockEventRepository_StoreWithFingerprints_Call{Call: _e.mock.On("StoreWithFingerprints", ctx, event)}
}

func (_c *MockEventRepository_StoreWithFingerprints_Call) Run(run func(ctx context.Context, event *domain.Event)) *MockEventRepository_StoreWithFingerprints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Event))
	})
	return _c
}

func (_c *MockEventRepository_StoreWithFingerprints_Call) Return(_a0 error) *MockEventRepository_StoreWithFingerprints_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventRepository_StoreWithFingerprints_Call) RunAndReturn(run func(context.Context, *domain.Event) error) *MockEventRepository_StoreWithFingerprints_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventRepository creates a new instance of MockEventRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventRepository {
	mock := &MockEventRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
