// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockUserNotificationsUseCase is an autogenerated mock type for the UserNotificationsUseCase type
type MockUserNotificationsUseCase struct {
	mock.Mock
}

type MockUserNotificationsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserNotificationsUseCase) EXPECT() *MockUserNotificationsUseCase_Expecter {
	return &MockUserNotificationsUseCase_Expecter{mock: &_m.Mock}
}

// DeleteOldNotifications provides a mock function with given fields: ctx, maxAge, limit
func (_m *MockUserNotificationsUseCase) DeleteOldNotifications(ctx context.Context, maxAge time.Duration, limit uint) (uint, error) {
	ret := _m.Called(ctx, maxAge, limit)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOldNotifications")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, uint) (uint, error)); ok {
		return rf(ctx, maxAge, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, uint) uint); ok {
		r0 = rf(ctx, maxAge, limit)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration, uint) error); ok {
		r1 = rf(ctx, maxAge, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserNotificationsUseCase_DeleteOldNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOldNotifications'
type MockUserNotificationsUseCase_DeleteOldNotifications_Call struct {
	*mock.Call
}

// DeleteOldNotifications is a helper method to define mock.On call
//   - ctx context.Context
//   - maxAge time.Duration
//   - limit uint
func (_e *MockUserNotificationsUseCase_Expecter) DeleteOldNotifications(ctx interface{}, maxAge interface{}, limit interface{}) *MockUserNotificationsUseCase_DeleteOldNotifications_Call {
	return &MockUserNotificationsUseCase_DeleteOldNotifications_Call{Call: _e.mock.On("DeleteOldNotifications", ctx, maxAge, limit)}
}

func (_c *MockUserNotificationsUseCase_DeleteOldNotifications_Call) Run(run func(ctx context.Context, maxAge time.Duration, limit uint)) *MockUserNotificationsUseCase_DeleteOldNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(uint))
	})
	return _c
}

func (_c *MockUserNotificationsUseCase_DeleteOldNotifications_Call) Return(_a0 uint, _a1 error) *MockUserNotificationsUseCase_DeleteOldNotifications_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserNotificationsUseCase_DeleteOldNotifications_Call) RunAndReturn(run func(context.Context, time.Duration, uint) (uint, error)) *MockUserNotificationsUseCase_DeleteOldNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserNotificationsUseCase creates a new instance of MockUserNotificationsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserNotificationsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserNotificationsUseCase {
	mock := &MockUserNotificationsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
