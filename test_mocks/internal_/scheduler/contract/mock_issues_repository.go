// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockIssuesRepository is an autogenerated mock type for the IssuesRepository type
type MockIssuesRepository struct {
	mock.Mock
}

type MockIssuesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIssuesRepository) EXPECT() *MockIssuesRepository_Expecter {
	return &MockIssuesRepository_Expecter{mock: &_m.Mock}
}

// DeleteOld provides a mock function with given fields: ctx, maxAge, limit
func (_m *MockIssuesRepository) DeleteOld(ctx context.Context, maxAge time.Duration, limit uint) (uint, error) {
	ret := _m.Called(ctx, maxAge, limit)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOld")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, uint) (uint, error)); ok {
		return rf(ctx, maxAge, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, uint) uint); ok {
		r0 = rf(ctx, maxAge, limit)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration, uint) error); ok {
		r1 = rf(ctx, maxAge, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuesRepository_DeleteOld_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOld'
type MockIssuesRepository_DeleteOld_Call struct {
	*mock.Call
}

// DeleteOld is a helper method to define mock.On call
//   - ctx context.Context
//   - maxAge time.Duration
//   - limit uint
func (_e *MockIssuesRepository_Expecter) DeleteOld(ctx interface{}, maxAge interface{}, limit interface{}) *MockIssuesRepository_DeleteOld_Call {
	return &MockIssuesRepository_DeleteOld_Call{Call: _e.mock.On("DeleteOld", ctx, maxAge, limit)}
}

func (_c *MockIssuesRepository_DeleteOld_Call) Run(run func(ctx context.Context, maxAge time.Duration, limit uint)) *MockIssuesRepository_DeleteOld_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(uint))
	})
	return _c
}

func (_c *MockIssuesRepository_DeleteOld_Call) Return(_a0 uint, _a1 error) *MockIssuesRepository_DeleteOld_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuesRepository_DeleteOld_Call) RunAndReturn(run func(context.Context, time.Duration, uint) (uint, error)) *MockIssuesRepository_DeleteOld_Call {
	_c.Call.Return(run)
	return _c
}

// FixTimesForRelease provides a mock function with given fields: ctx, projectID, release
func (_m *MockIssuesRepository) FixTimesForRelease(ctx context.Context, projectID domain.ProjectID, release string) (map[string]time.Duration, error) {
	ret := _m.Called(ctx, projectID, release)

	if len(ret) == 0 {
		panic("no return value specified for FixTimesForRelease")
	}

	var r0 map[string]time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) (map[string]time.Duration, error)); ok {
		return rf(ctx, projectID, release)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) map[string]time.Duration); ok {
		r0 = rf(ctx, projectID, release)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]time.Duration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string) error); ok {
		r1 = rf(ctx, projectID, release)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuesRepository_FixTimesForRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FixTimesForRelease'
type MockIssuesRepository_FixTimesForRelease_Call struct {
	*mock.Call
}

// FixTimesForRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - release string
func (_e *MockIssuesRepository_Expecter) FixTimesForRelease(ctx interface{}, projectID interface{}, release interface{}) *MockIssuesRepository_FixTimesForRelease_Call {
	return &MockIssuesRepository_FixTimesForRelease_Call{Call: _e.mock.On("FixTimesForRelease", ctx, projectID, release)}
}

func (_c *MockIssuesRepository_FixTimesForRelease_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, release string)) *MockIssuesRepository_FixTimesForRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string))
	})
	return _c
}

func (_c *MockIssuesRepository_FixTimesForRelease_Call) Return(_a0 map[string]time.Duration, _a1 error) *MockIssuesRepository_FixTimesForRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuesRepository_FixTimesForRelease_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string) (map[string]time.Duration, error)) *MockIssuesRepository_FixTimesForRelease_Call {
	_c.Call.Return(run)
	return _c
}

// ListUnresolved provides a mock function with given fields: ctx
func (_m *MockIssuesRepository) ListUnresolved(ctx context.Context) ([]domain.IssueExtended, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListUnresolved")
	}

	var r0 []domain.IssueExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.IssueExtended, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.IssueExtended); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.IssueExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuesRepository_ListUnresolved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUnresolved'
type MockIssuesRepository_ListUnresolved_Call struct {
	*mock.Call
}

// ListUnresolved is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIssuesRepository_Expecter) ListUnresolved(ctx interface{}) *MockIssuesRepository_ListUnresolved_Call {
	return &MockIssuesRepository_ListUnresolved_Call{Call: _e.mock.On("ListUnresolved", ctx)}
}

func (_c *MockIssuesRepository_ListUnresolved_Call) Run(run func(ctx context.Context)) *MockIssuesRepository_ListUnresolved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIssuesRepository_ListUnresolved_Call) Return(_a0 []domain.IssueExtended, _a1 error) *MockIssuesRepository_ListUnresolved_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuesRepository_ListUnresolved_Call) RunAndReturn(run func(context.Context) ([]domain.IssueExtended, error)) *MockIssuesRepository_ListUnresolved_Call {
	_c.Call.Return(run)
	return _c
}

// NewIssuesForRelease provides a mock function with given fields: ctx, projectID, release
func (_m *MockIssuesRepository) NewIssuesForRelease(ctx context.Context, projectID domain.ProjectID, release string) ([]string, error) {
	ret := _m.Called(ctx, projectID, release)

	if len(ret) == 0 {
		panic("no return value specified for NewIssuesForRelease")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) ([]string, error)); ok {
		return rf(ctx, projectID, release)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) []string); ok {
		r0 = rf(ctx, projectID, release)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string) error); ok {
		r1 = rf(ctx, projectID, release)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuesRepository_NewIssuesForRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewIssuesForRelease'
type MockIssuesRepository_NewIssuesForRelease_Call struct {
	*mock.Call
}

// NewIssuesForRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - release string
func (_e *MockIssuesRepository_Expecter) NewIssuesForRelease(ctx interface{}, projectID interface{}, release interface{}) *MockIssuesRepository_NewIssuesForRelease_Call {
	return &MockIssuesRepository_NewIssuesForRelease_Call{Call: _e.mock.On("NewIssuesForRelease", ctx, projectID, release)}
}

func (_c *MockIssuesRepository_NewIssuesForRelease_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, release string)) *MockIssuesRepository_NewIssuesForRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string))
	})
	return _c
}

func (_c *MockIssuesRepository_NewIssuesForRelease_Call) Return(_a0 []string, _a1 error) *MockIssuesRepository_NewIssuesForRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuesRepository_NewIssuesForRelease_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string) ([]string, error)) *MockIssuesRepository_NewIssuesForRelease_Call {
	_c.Call.Return(run)
	return _c
}

// RegressionsForRelease provides a mock function with given fields: ctx, projectID, release
func (_m *MockIssuesRepository) RegressionsForRelease(ctx context.Context, projectID domain.ProjectID, release string) ([]string, error) {
	ret := _m.Called(ctx, projectID, release)

	if len(ret) == 0 {
		panic("no return value specified for RegressionsForRelease")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) ([]string, error)); ok {
		return rf(ctx, projectID, release)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) []string); ok {
		r0 = rf(ctx, projectID, release)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string) error); ok {
		r1 = rf(ctx, projectID, release)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuesRepository_RegressionsForRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegressionsForRelease'
type MockIssuesRepository_RegressionsForRelease_Call struct {
	*mock.Call
}

// RegressionsForRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - release string
func (_e *MockIssuesRepository_Expecter) RegressionsForRelease(ctx interface{}, projectID interface{}, release interface{}) *MockIssuesRepository_RegressionsForRelease_Call {
	return &MockIssuesRepository_RegressionsForRelease_Call{Call: _e.mock.On("RegressionsForRelease", ctx, projectID, release)}
}

func (_c *MockIssuesRepository_RegressionsForRelease_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, release string)) *MockIssuesRepository_RegressionsForRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string))
	})
	return _c
}

func (_c *MockIssuesRepository_RegressionsForRelease_Call) Return(_a0 []string, _a1 error) *MockIssuesRepository_RegressionsForRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuesRepository_RegressionsForRelease_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string) ([]string, error)) *MockIssuesRepository_RegressionsForRelease_Call {
	_c.Call.Return(run)
	return _c
}

// ResolvedInRelease provides a mock function with given fields: ctx, projectID, release
func (_m *MockIssuesRepository) ResolvedInRelease(ctx context.Context, projectID domain.ProjectID, release string) ([]string, error) {
	ret := _m.Called(ctx, projectID, release)

	if len(ret) == 0 {
		panic("no return value specified for ResolvedInRelease")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) ([]string, error)); ok {
		return rf(ctx, projectID, release)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) []string); ok {
		r0 = rf(ctx, projectID, release)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string) error); ok {
		r1 = rf(ctx, projectID, release)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuesRepository_ResolvedInRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolvedInRelease'
type MockIssuesRepository_ResolvedInRelease_Call struct {
	*mock.Call
}

// ResolvedInRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - release string
func (_e *MockIssuesRepository_Expecter) ResolvedInRelease(ctx interface{}, projectID interface{}, release interface{}) *MockIssuesRepository_ResolvedInRelease_Call {
	return &MockIssuesRepository_ResolvedInRelease_Call{Call: _e.mock.On("ResolvedInRelease", ctx, projectID, release)}
}

func (_c *MockIssuesRepository_ResolvedInRelease_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, release string)) *MockIssuesRepository_ResolvedInRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string))
	})
	return _c
}

func (_c *MockIssuesRepository_ResolvedInRelease_Call) Return(_a0 []string, _a1 error) *MockIssuesRepository_ResolvedInRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuesRepository_ResolvedInRelease_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string) ([]string, error)) *MockIssuesRepository_ResolvedInRelease_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIssuesRepository creates a new instance of MockIssuesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIssuesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIssuesRepository {
	mock := &MockIssuesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
