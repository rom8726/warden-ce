// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockTeamsRepository is an autogenerated mock type for the TeamsRepository type
type MockTeamsRepository struct {
	mock.Mock
}

type MockTeamsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTeamsRepository) EXPECT() *MockTeamsRepository_Expecter {
	return &MockTeamsRepository_Expecter{mock: &_m.Mock}
}

// GetMembers provides a mock function with given fields: ctx, teamID
func (_m *MockTeamsRepository) GetMembers(ctx context.Context, teamID domain.TeamID) ([]domain.TeamMember, error) {
	ret := _m.Called(ctx, teamID)

	if len(ret) == 0 {
		panic("no return value specified for GetMembers")
	}

	var r0 []domain.TeamMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamID) ([]domain.TeamMember, error)); ok {
		return rf(ctx, teamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamID) []domain.TeamMember); ok {
		r0 = rf(ctx, teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.TeamMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.TeamID) error); ok {
		r1 = rf(ctx, teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsRepository_GetMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMembers'
type MockTeamsRepository_GetMembers_Call struct {
	*mock.Call
}

// GetMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - teamID domain.TeamID
func (_e *MockTeamsRepository_Expecter) GetMembers(ctx interface{}, teamID interface{}) *MockTeamsRepository_GetMembers_Call {
	return &MockTeamsRepository_GetMembers_Call{Call: _e.mock.On("GetMembers", ctx, teamID)}
}

func (_c *MockTeamsRepository_GetMembers_Call) Run(run func(ctx context.Context, teamID domain.TeamID)) *MockTeamsRepository_GetMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TeamID))
	})
	return _c
}

func (_c *MockTeamsRepository_GetMembers_Call) Return(_a0 []domain.TeamMember, _a1 error) *MockTeamsRepository_GetMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsRepository_GetMembers_Call) RunAndReturn(run func(context.Context, domain.TeamID) ([]domain.TeamMember, error)) *MockTeamsRepository_GetMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamsByUserIDs provides a mock function with given fields: ctx, userIDs
func (_m *MockTeamsRepository) GetTeamsByUserIDs(ctx context.Context, userIDs []domain.UserID) (map[domain.UserID][]domain.Team, error) {
	ret := _m.Called(ctx, userIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamsByUserIDs")
	}

	var r0 map[domain.UserID][]domain.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.UserID) (map[domain.UserID][]domain.Team, error)); ok {
		return rf(ctx, userIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []domain.UserID) map[domain.UserID][]domain.Team); ok {
		r0 = rf(ctx, userIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[domain.UserID][]domain.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []domain.UserID) error); ok {
		r1 = rf(ctx, userIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsRepository_GetTeamsByUserIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamsByUserIDs'
type MockTeamsRepository_GetTeamsByUserIDs_Call struct {
	*mock.Call
}

// GetTeamsByUserIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - userIDs []domain.UserID
func (_e *MockTeamsRepository_Expecter) GetTeamsByUserIDs(ctx interface{}, userIDs interface{}) *MockTeamsRepository_GetTeamsByUserIDs_Call {
	return &MockTeamsRepository_GetTeamsByUserIDs_Call{Call: _e.mock.On("GetTeamsByUserIDs", ctx, userIDs)}
}

func (_c *MockTeamsRepository_GetTeamsByUserIDs_Call) Run(run func(ctx context.Context, userIDs []domain.UserID)) *MockTeamsRepository_GetTeamsByUserIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]domain.UserID))
	})
	return _c
}

func (_c *MockTeamsRepository_GetTeamsByUserIDs_Call) Return(_a0 map[domain.UserID][]domain.Team, _a1 error) *MockTeamsRepository_GetTeamsByUserIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsRepository_GetTeamsByUserIDs_Call) RunAndReturn(run func(context.Context, []domain.UserID) (map[domain.UserID][]domain.Team, error)) *MockTeamsRepository_GetTeamsByUserIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetUniqueUserIDsByTeamIDs provides a mock function with given fields: ctx, teamIDs
func (_m *MockTeamsRepository) GetUniqueUserIDsByTeamIDs(ctx context.Context, teamIDs []domain.TeamID) ([]domain.UserID, error) {
	ret := _m.Called(ctx, teamIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetUniqueUserIDsByTeamIDs")
	}

	var r0 []domain.UserID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.TeamID) ([]domain.UserID, error)); ok {
		return rf(ctx, teamIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []domain.TeamID) []domain.UserID); ok {
		r0 = rf(ctx, teamIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []domain.TeamID) error); ok {
		r1 = rf(ctx, teamIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsRepository_GetUniqueUserIDsByTeamIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUniqueUserIDsByTeamIDs'
type MockTeamsRepository_GetUniqueUserIDsByTeamIDs_Call struct {
	*mock.Call
}

// GetUniqueUserIDsByTeamIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - teamIDs []domain.TeamID
func (_e *MockTeamsRepository_Expecter) GetUniqueUserIDsByTeamIDs(ctx interface{}, teamIDs interface{}) *MockTeamsRepository_GetUniqueUserIDsByTeamIDs_Call {
	return &MockTeamsRepository_GetUniqueUserIDsByTeamIDs_Call{Call: _e.mock.On("GetUniqueUserIDsByTeamIDs", ctx, teamIDs)}
}

func (_c *MockTeamsRepository_GetUniqueUserIDsByTeamIDs_Call) Run(run func(ctx context.Context, teamIDs []domain.TeamID)) *MockTeamsRepository_GetUniqueUserIDsByTeamIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]domain.TeamID))
	})
	return _c
}

func (_c *MockTeamsRepository_GetUniqueUserIDsByTeamIDs_Call) Return(_a0 []domain.UserID, _a1 error) *MockTeamsRepository_GetUniqueUserIDsByTeamIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsRepository_GetUniqueUserIDsByTeamIDs_Call) RunAndReturn(run func(context.Context, []domain.TeamID) ([]domain.UserID, error)) *MockTeamsRepository_GetUniqueUserIDsByTeamIDs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTeamsRepository creates a new instance of MockTeamsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTeamsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTeamsRepository {
	mock := &MockTeamsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
