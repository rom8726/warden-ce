// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockEmailer is an autogenerated mock type for the Emailer type
type MockEmailer struct {
	mock.Mock
}

type MockEmailer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmailer) EXPECT() *MockEmailer_Expecter {
	return &MockEmailer_Expecter{mock: &_m.Mock}
}

// SendUnresolvedIssuesSummaryEmail provides a mock function with given fields: ctx, issues
func (_m *MockEmailer) SendUnresolvedIssuesSummaryEmail(ctx context.Context, issues []domain.IssueExtended) error {
	ret := _m.Called(ctx, issues)

	if len(ret) == 0 {
		panic("no return value specified for SendUnresolvedIssuesSummaryEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.IssueExtended) error); ok {
		r0 = rf(ctx, issues)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmailer_SendUnresolvedIssuesSummaryEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendUnresolvedIssuesSummaryEmail'
type MockEmailer_SendUnresolvedIssuesSummaryEmail_Call struct {
	*mock.Call
}

// SendUnresolvedIssuesSummaryEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - issues []domain.IssueExtended
func (_e *MockEmailer_Expecter) SendUnresolvedIssuesSummaryEmail(ctx interface{}, issues interface{}) *MockEmailer_SendUnresolvedIssuesSummaryEmail_Call {
	return &MockEmailer_SendUnresolvedIssuesSummaryEmail_Call{Call: _e.mock.On("SendUnresolvedIssuesSummaryEmail", ctx, issues)}
}

func (_c *MockEmailer_SendUnresolvedIssuesSummaryEmail_Call) Run(run func(ctx context.Context, issues []domain.IssueExtended)) *MockEmailer_SendUnresolvedIssuesSummaryEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]domain.IssueExtended))
	})
	return _c
}

func (_c *MockEmailer_SendUnresolvedIssuesSummaryEmail_Call) Return(_a0 error) *MockEmailer_SendUnresolvedIssuesSummaryEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEmailer_SendUnresolvedIssuesSummaryEmail_Call) RunAndReturn(run func(context.Context, []domain.IssueExtended) error) *MockEmailer_SendUnresolvedIssuesSummaryEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEmailer creates a new instance of MockEmailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailer {
	mock := &MockEmailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
