// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockNotificationsQueueRepository is an autogenerated mock type for the NotificationsQueueRepository type
type MockNotificationsQueueRepository struct {
	mock.Mock
}

type MockNotificationsQueueRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationsQueueRepository) EXPECT() *MockNotificationsQueueRepository_Expecter {
	return &MockNotificationsQueueRepository_Expecter{mock: &_m.Mock}
}

// AddNotification provides a mock function with given fields: ctx, projectID, issueID, level, isNew, wasReactivated
func (_m *MockNotificationsQueueRepository) AddNotification(ctx context.Context, projectID domain.ProjectID, issueID domain.IssueID, level domain.IssueLevel, isNew bool, wasReactivated bool) error {
	ret := _m.Called(ctx, projectID, issueID, level, isNew, wasReactivated)

	if len(ret) == 0 {
		panic("no return value specified for AddNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.IssueID, domain.IssueLevel, bool, bool) error); ok {
		r0 = rf(ctx, projectID, issueID, level, isNew, wasReactivated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationsQueueRepository_AddNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNotification'
type MockNotificationsQueueRepository_AddNotification_Call struct {
	*mock.Call
}

// AddNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - issueID domain.IssueID
//   - level domain.IssueLevel
//   - isNew bool
//   - wasReactivated bool
func (_e *MockNotificationsQueueRepository_Expecter) AddNotification(ctx interface{}, projectID interface{}, issueID interface{}, level interface{}, isNew interface{}, wasReactivated interface{}) *MockNotificationsQueueRepository_AddNotification_Call {
	return &MockNotificationsQueueRepository_AddNotification_Call{Call: _e.mock.On("AddNotification", ctx, projectID, issueID, level, isNew, wasReactivated)}
}

func (_c *MockNotificationsQueueRepository_AddNotification_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, issueID domain.IssueID, level domain.IssueLevel, isNew bool, wasReactivated bool)) *MockNotificationsQueueRepository_AddNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(domain.IssueID), args[3].(domain.IssueLevel), args[4].(bool), args[5].(bool))
	})
	return _c
}

func (_c *MockNotificationsQueueRepository_AddNotification_Call) Return(_a0 error) *MockNotificationsQueueRepository_AddNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationsQueueRepository_AddNotification_Call) RunAndReturn(run func(context.Context, domain.ProjectID, domain.IssueID, domain.IssueLevel, bool, bool) error) *MockNotificationsQueueRepository_AddNotification_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOld provides a mock function with given fields: ctx, maxAge, limit
func (_m *MockNotificationsQueueRepository) DeleteOld(ctx context.Context, maxAge time.Duration, limit uint) (uint, error) {
	ret := _m.Called(ctx, maxAge, limit)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOld")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, uint) (uint, error)); ok {
		return rf(ctx, maxAge, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, uint) uint); ok {
		r0 = rf(ctx, maxAge, limit)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration, uint) error); ok {
		r1 = rf(ctx, maxAge, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationsQueueRepository_DeleteOld_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOld'
type MockNotificationsQueueRepository_DeleteOld_Call struct {
	*mock.Call
}

// DeleteOld is a helper method to define mock.On call
//   - ctx context.Context
//   - maxAge time.Duration
//   - limit uint
func (_e *MockNotificationsQueueRepository_Expecter) DeleteOld(ctx interface{}, maxAge interface{}, limit interface{}) *MockNotificationsQueueRepository_DeleteOld_Call {
	return &MockNotificationsQueueRepository_DeleteOld_Call{Call: _e.mock.On("DeleteOld", ctx, maxAge, limit)}
}

func (_c *MockNotificationsQueueRepository_DeleteOld_Call) Run(run func(ctx context.Context, maxAge time.Duration, limit uint)) *MockNotificationsQueueRepository_DeleteOld_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(uint))
	})
	return _c
}

func (_c *MockNotificationsQueueRepository_DeleteOld_Call) Return(_a0 uint, _a1 error) *MockNotificationsQueueRepository_DeleteOld_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationsQueueRepository_DeleteOld_Call) RunAndReturn(run func(context.Context, time.Duration, uint) (uint, error)) *MockNotificationsQueueRepository_DeleteOld_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationsQueueRepository creates a new instance of MockNotificationsQueueRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationsQueueRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationsQueueRepository {
	mock := &MockNotificationsQueueRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
