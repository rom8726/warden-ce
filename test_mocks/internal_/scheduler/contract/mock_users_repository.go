// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockUsersRepository is an autogenerated mock type for the UsersRepository type
type MockUsersRepository struct {
	mock.Mock
}

type MockUsersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersRepository) EXPECT() *MockUsersRepository_Expecter {
	return &MockUsersRepository_Expecter{mock: &_m.Mock}
}

// FetchByIDs provides a mock function with given fields: ctx, ids
func (_m *MockUsersRepository) FetchByIDs(ctx context.Context, ids []domain.UserID) ([]domain.User, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for FetchByIDs")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.UserID) ([]domain.User, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []domain.UserID) []domain.User); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []domain.UserID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_FetchByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchByIDs'
type MockUsersRepository_FetchByIDs_Call struct {
	*mock.Call
}

// FetchByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []domain.UserID
func (_e *MockUsersRepository_Expecter) FetchByIDs(ctx interface{}, ids interface{}) *MockUsersRepository_FetchByIDs_Call {
	return &MockUsersRepository_FetchByIDs_Call{Call: _e.mock.On("FetchByIDs", ctx, ids)}
}

func (_c *MockUsersRepository_FetchByIDs_Call) Run(run func(ctx context.Context, ids []domain.UserID)) *MockUsersRepository_FetchByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]domain.UserID))
	})
	return _c
}

func (_c *MockUsersRepository_FetchByIDs_Call) Return(_a0 []domain.User, _a1 error) *MockUsersRepository_FetchByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_FetchByIDs_Call) RunAndReturn(run func(context.Context, []domain.UserID) ([]domain.User, error)) *MockUsersRepository_FetchByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersRepository creates a new instance of MockUsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersRepository {
	mock := &MockUsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
