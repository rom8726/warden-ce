// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockEventRepository is an autogenerated mock type for the EventRepository type
type MockEventRepository struct {
	mock.Mock
}

type MockEventRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventRepository) EXPECT() *MockEventRepository_Expecter {
	return &MockEventRepository_Expecter{mock: &_m.Mock}
}

// AggregateBySegment provides a mock function with given fields: ctx, projectID, release, segment
func (_m *MockEventRepository) AggregateBySegment(ctx context.Context, projectID domain.ProjectID, release string, segment domain.SegmentName) (map[string]uint, error) {
	ret := _m.Called(ctx, projectID, release, segment)

	if len(ret) == 0 {
		panic("no return value specified for AggregateBySegment")
	}

	var r0 map[string]uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, domain.SegmentName) (map[string]uint, error)); ok {
		return rf(ctx, projectID, release, segment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, domain.SegmentName) map[string]uint); ok {
		r0 = rf(ctx, projectID, release, segment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]uint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, domain.SegmentName) error); ok {
		r1 = rf(ctx, projectID, release, segment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventRepository_AggregateBySegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AggregateBySegment'
type MockEventRepository_AggregateBySegment_Call struct {
	*mock.Call
}

// AggregateBySegment is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - release string
//   - segment domain.SegmentName
func (_e *MockEventRepository_Expecter) AggregateBySegment(ctx interface{}, projectID interface{}, release interface{}, segment interface{}) *MockEventRepository_AggregateBySegment_Call {
	return &MockEventRepository_AggregateBySegment_Call{Call: _e.mock.On("AggregateBySegment", ctx, projectID, release, segment)}
}

func (_c *MockEventRepository_AggregateBySegment_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, release string, segment domain.SegmentName)) *MockEventRepository_AggregateBySegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string), args[3].(domain.SegmentName))
	})
	return _c
}

func (_c *MockEventRepository_AggregateBySegment_Call) Return(_a0 map[string]uint, _a1 error) *MockEventRepository_AggregateBySegment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventRepository_AggregateBySegment_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string, domain.SegmentName) (map[string]uint, error)) *MockEventRepository_AggregateBySegment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventRepository creates a new instance of MockEventRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventRepository {
	mock := &MockEventRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
