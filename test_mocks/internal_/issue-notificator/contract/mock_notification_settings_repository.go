// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockNotificationSettingsRepository is an autogenerated mock type for the NotificationSettingsRepository type
type MockNotificationSettingsRepository struct {
	mock.Mock
}

type MockNotificationSettingsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationSettingsRepository) EXPECT() *MockNotificationSettingsRepository_Expecter {
	return &MockNotificationSettingsRepository_Expecter{mock: &_m.Mock}
}

// GetSettingByID provides a mock function with given fields: ctx, id
func (_m *MockNotificationSettingsRepository) GetSettingByID(ctx context.Context, id domain.NotificationSettingID) (domain.NotificationSetting, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSettingByID")
	}

	var r0 domain.NotificationSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) (domain.NotificationSetting, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) domain.NotificationSetting); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.NotificationSetting)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.NotificationSettingID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationSettingsRepository_GetSettingByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSettingByID'
type MockNotificationSettingsRepository_GetSettingByID_Call struct {
	*mock.Call
}

// GetSettingByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationSettingID
func (_e *MockNotificationSettingsRepository_Expecter) GetSettingByID(ctx interface{}, id interface{}) *MockNotificationSettingsRepository_GetSettingByID_Call {
	return &MockNotificationSettingsRepository_GetSettingByID_Call{Call: _e.mock.On("GetSettingByID", ctx, id)}
}

func (_c *MockNotificationSettingsRepository_GetSettingByID_Call) Run(run func(ctx context.Context, id domain.NotificationSettingID)) *MockNotificationSettingsRepository_GetSettingByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationSettingID))
	})
	return _c
}

func (_c *MockNotificationSettingsRepository_GetSettingByID_Call) Return(_a0 domain.NotificationSetting, _a1 error) *MockNotificationSettingsRepository_GetSettingByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationSettingsRepository_GetSettingByID_Call) RunAndReturn(run func(context.Context, domain.NotificationSettingID) (domain.NotificationSetting, error)) *MockNotificationSettingsRepository_GetSettingByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListSettings provides a mock function with given fields: ctx, projectID
func (_m *MockNotificationSettingsRepository) ListSettings(ctx context.Context, projectID domain.ProjectID) ([]domain.NotificationSetting, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListSettings")
	}

	var r0 []domain.NotificationSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) ([]domain.NotificationSetting, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) []domain.NotificationSetting); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.NotificationSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationSettingsRepository_ListSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSettings'
type MockNotificationSettingsRepository_ListSettings_Call struct {
	*mock.Call
}

// ListSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockNotificationSettingsRepository_Expecter) ListSettings(ctx interface{}, projectID interface{}) *MockNotificationSettingsRepository_ListSettings_Call {
	return &MockNotificationSettingsRepository_ListSettings_Call{Call: _e.mock.On("ListSettings", ctx, projectID)}
}

func (_c *MockNotificationSettingsRepository_ListSettings_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockNotificationSettingsRepository_ListSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID))
	})
	return _c
}

func (_c *MockNotificationSettingsRepository_ListSettings_Call) Return(_a0 []domain.NotificationSetting, _a1 error) *MockNotificationSettingsRepository_ListSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationSettingsRepository_ListSettings_Call) RunAndReturn(run func(context.Context, domain.ProjectID) ([]domain.NotificationSetting, error)) *MockNotificationSettingsRepository_ListSettings_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationSettingsRepository creates a new instance of MockNotificationSettingsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationSettingsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationSettingsRepository {
	mock := &MockNotificationSettingsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
