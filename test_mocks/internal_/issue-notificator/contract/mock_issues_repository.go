// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockIssuesRepository is an autogenerated mock type for the IssuesRepository type
type MockIssuesRepository struct {
	mock.Mock
}

type MockIssuesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIssuesRepository) EXPECT() *MockIssuesRepository_Expecter {
	return &MockIssuesRepository_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockIssuesRepository) GetByID(ctx context.Context, id domain.IssueID) (domain.Issue, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Issue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueID) (domain.Issue, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueID) domain.Issue); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Issue)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.IssueID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuesRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIssuesRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.IssueID
func (_e *MockIssuesRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockIssuesRepository_GetByID_Call {
	return &MockIssuesRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockIssuesRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.IssueID)) *MockIssuesRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.IssueID))
	})
	return _c
}

func (_c *MockIssuesRepository_GetByID_Call) Return(_a0 domain.Issue, _a1 error) *MockIssuesRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuesRepository_GetByID_Call) RunAndReturn(run func(context.Context, domain.IssueID) (domain.Issue, error)) *MockIssuesRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsNotified provides a mock function with given fields: ctx, issueID
func (_m *MockIssuesRepository) MarkAsNotified(ctx context.Context, issueID domain.IssueID) error {
	ret := _m.Called(ctx, issueID)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsNotified")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueID) error); ok {
		r0 = rf(ctx, issueID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIssuesRepository_MarkAsNotified_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsNotified'
type MockIssuesRepository_MarkAsNotified_Call struct {
	*mock.Call
}

// MarkAsNotified is a helper method to define mock.On call
//   - ctx context.Context
//   - issueID domain.IssueID
func (_e *MockIssuesRepository_Expecter) MarkAsNotified(ctx interface{}, issueID interface{}) *MockIssuesRepository_MarkAsNotified_Call {
	return &MockIssuesRepository_MarkAsNotified_Call{Call: _e.mock.On("MarkAsNotified", ctx, issueID)}
}

func (_c *MockIssuesRepository_MarkAsNotified_Call) Run(run func(ctx context.Context, issueID domain.IssueID)) *MockIssuesRepository_MarkAsNotified_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.IssueID))
	})
	return _c
}

func (_c *MockIssuesRepository_MarkAsNotified_Call) Return(_a0 error) *MockIssuesRepository_MarkAsNotified_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIssuesRepository_MarkAsNotified_Call) RunAndReturn(run func(context.Context, domain.IssueID) error) *MockIssuesRepository_MarkAsNotified_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIssuesRepository creates a new instance of MockIssuesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIssuesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIssuesRepository {
	mock := &MockIssuesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
