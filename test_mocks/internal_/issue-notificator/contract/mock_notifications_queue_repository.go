// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockNotificationsQueueRepository is an autogenerated mock type for the NotificationsQueueRepository type
type MockNotificationsQueueRepository struct {
	mock.Mock
}

type MockNotificationsQueueRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationsQueueRepository) EXPECT() *MockNotificationsQueueRepository_Expecter {
	return &MockNotificationsQueueRepository_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockNotificationsQueueRepository) GetByID(ctx context.Context, id domain.NotificationID) (domain.Notification, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationID) (domain.Notification, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationID) domain.Notification); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Notification)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.NotificationID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationsQueueRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockNotificationsQueueRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationID
func (_e *MockNotificationsQueueRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockNotificationsQueueRepository_GetByID_Call {
	return &MockNotificationsQueueRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockNotificationsQueueRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.NotificationID)) *MockNotificationsQueueRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationID))
	})
	return _c
}

func (_c *MockNotificationsQueueRepository_GetByID_Call) Return(_a0 domain.Notification, _a1 error) *MockNotificationsQueueRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationsQueueRepository_GetByID_Call) RunAndReturn(run func(context.Context, domain.NotificationID) (domain.Notification, error)) *MockNotificationsQueueRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsFailed provides a mock function with given fields: ctx, id, reason
func (_m *MockNotificationsQueueRepository) MarkAsFailed(ctx context.Context, id domain.NotificationID, reason string) error {
	ret := _m.Called(ctx, id, reason)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsFailed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationID, string) error); ok {
		r0 = rf(ctx, id, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationsQueueRepository_MarkAsFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsFailed'
type MockNotificationsQueueRepository_MarkAsFailed_Call struct {
	*mock.Call
}

// MarkAsFailed is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationID
//   - reason string
func (_e *MockNotificationsQueueRepository_Expecter) MarkAsFailed(ctx interface{}, id interface{}, reason interface{}) *MockNotificationsQueueRepository_MarkAsFailed_Call {
	return &MockNotificationsQueueRepository_MarkAsFailed_Call{Call: _e.mock.On("MarkAsFailed", ctx, id, reason)}
}

func (_c *MockNotificationsQueueRepository_MarkAsFailed_Call) Run(run func(ctx context.Context, id domain.NotificationID, reason string)) *MockNotificationsQueueRepository_MarkAsFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationID), args[2].(string))
	})
	return _c
}

func (_c *MockNotificationsQueueRepository_MarkAsFailed_Call) Return(_a0 error) *MockNotificationsQueueRepository_MarkAsFailed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationsQueueRepository_MarkAsFailed_Call) RunAndReturn(run func(context.Context, domain.NotificationID, string) error) *MockNotificationsQueueRepository_MarkAsFailed_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsSent provides a mock function with given fields: ctx, id
func (_m *MockNotificationsQueueRepository) MarkAsSent(ctx context.Context, id domain.NotificationID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsSent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationsQueueRepository_MarkAsSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsSent'
type MockNotificationsQueueRepository_MarkAsSent_Call struct {
	*mock.Call
}

// MarkAsSent is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationID
func (_e *MockNotificationsQueueRepository_Expecter) MarkAsSent(ctx interface{}, id interface{}) *MockNotificationsQueueRepository_MarkAsSent_Call {
	return &MockNotificationsQueueRepository_MarkAsSent_Call{Call: _e.mock.On("MarkAsSent", ctx, id)}
}

func (_c *MockNotificationsQueueRepository_MarkAsSent_Call) Run(run func(ctx context.Context, id domain.NotificationID)) *MockNotificationsQueueRepository_MarkAsSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationID))
	})
	return _c
}

func (_c *MockNotificationsQueueRepository_MarkAsSent_Call) Return(_a0 error) *MockNotificationsQueueRepository_MarkAsSent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationsQueueRepository_MarkAsSent_Call) RunAndReturn(run func(context.Context, domain.NotificationID) error) *MockNotificationsQueueRepository_MarkAsSent_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsSkipped provides a mock function with given fields: ctx, id, reason
func (_m *MockNotificationsQueueRepository) MarkAsSkipped(ctx context.Context, id domain.NotificationID, reason string) error {
	ret := _m.Called(ctx, id, reason)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsSkipped")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationID, string) error); ok {
		r0 = rf(ctx, id, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationsQueueRepository_MarkAsSkipped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsSkipped'
type MockNotificationsQueueRepository_MarkAsSkipped_Call struct {
	*mock.Call
}

// MarkAsSkipped is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationID
//   - reason string
func (_e *MockNotificationsQueueRepository_Expecter) MarkAsSkipped(ctx interface{}, id interface{}, reason interface{}) *MockNotificationsQueueRepository_MarkAsSkipped_Call {
	return &MockNotificationsQueueRepository_MarkAsSkipped_Call{Call: _e.mock.On("MarkAsSkipped", ctx, id, reason)}
}

func (_c *MockNotificationsQueueRepository_MarkAsSkipped_Call) Run(run func(ctx context.Context, id domain.NotificationID, reason string)) *MockNotificationsQueueRepository_MarkAsSkipped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationID), args[2].(string))
	})
	return _c
}

func (_c *MockNotificationsQueueRepository_MarkAsSkipped_Call) Return(_a0 error) *MockNotificationsQueueRepository_MarkAsSkipped_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationsQueueRepository_MarkAsSkipped_Call) RunAndReturn(run func(context.Context, domain.NotificationID, string) error) *MockNotificationsQueueRepository_MarkAsSkipped_Call {
	_c.Call.Return(run)
	return _c
}

// TakePending provides a mock function with given fields: ctx, limit
func (_m *MockNotificationsQueueRepository) TakePending(ctx context.Context, limit uint) ([]domain.Notification, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for TakePending")
	}

	var r0 []domain.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]domain.Notification, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []domain.Notification); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationsQueueRepository_TakePending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakePending'
type MockNotificationsQueueRepository_TakePending_Call struct {
	*mock.Call
}

// TakePending is a helper method to define mock.On call
//   - ctx context.Context
//   - limit uint
func (_e *MockNotificationsQueueRepository_Expecter) TakePending(ctx interface{}, limit interface{}) *MockNotificationsQueueRepository_TakePending_Call {
	return &MockNotificationsQueueRepository_TakePending_Call{Call: _e.mock.On("TakePending", ctx, limit)}
}

func (_c *MockNotificationsQueueRepository_TakePending_Call) Run(run func(ctx context.Context, limit uint)) *MockNotificationsQueueRepository_TakePending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockNotificationsQueueRepository_TakePending_Call) Return(_a0 []domain.Notification, _a1 error) *MockNotificationsQueueRepository_TakePending_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationsQueueRepository_TakePending_Call) RunAndReturn(run func(context.Context, uint) ([]domain.Notification, error)) *MockNotificationsQueueRepository_TakePending_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationsQueueRepository creates a new instance of MockNotificationsQueueRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationsQueueRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationsQueueRepository {
	mock := &MockNotificationsQueueRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
