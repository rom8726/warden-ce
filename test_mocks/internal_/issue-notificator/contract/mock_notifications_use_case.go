// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockNotificationsUseCase is an autogenerated mock type for the NotificationsUseCase type
type MockNotificationsUseCase struct {
	mock.Mock
}

type MockNotificationsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationsUseCase) EXPECT() *MockNotificationsUseCase_Expecter {
	return &MockNotificationsUseCase_Expecter{mock: &_m.Mock}
}

// GetNotificationSetting provides a mock function with given fields: ctx, id
func (_m *MockNotificationsUseCase) GetNotificationSetting(ctx context.Context, id domain.NotificationSettingID) (domain.NotificationSetting, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationSetting")
	}

	var r0 domain.NotificationSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) (domain.NotificationSetting, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) domain.NotificationSetting); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.NotificationSetting)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.NotificationSettingID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationsUseCase_GetNotificationSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationSetting'
type MockNotificationsUseCase_GetNotificationSetting_Call struct {
	*mock.Call
}

// GetNotificationSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationSettingID
func (_e *MockNotificationsUseCase_Expecter) GetNotificationSetting(ctx interface{}, id interface{}) *MockNotificationsUseCase_GetNotificationSetting_Call {
	return &MockNotificationsUseCase_GetNotificationSetting_Call{Call: _e.mock.On("GetNotificationSetting", ctx, id)}
}

func (_c *MockNotificationsUseCase_GetNotificationSetting_Call) Run(run func(ctx context.Context, id domain.NotificationSettingID)) *MockNotificationsUseCase_GetNotificationSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationSettingID))
	})
	return _c
}

func (_c *MockNotificationsUseCase_GetNotificationSetting_Call) Return(_a0 domain.NotificationSetting, _a1 error) *MockNotificationsUseCase_GetNotificationSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationsUseCase_GetNotificationSetting_Call) RunAndReturn(run func(context.Context, domain.NotificationSettingID) (domain.NotificationSetting, error)) *MockNotificationsUseCase_GetNotificationSetting_Call {
	_c.Call.Return(run)
	return _c
}

// MarkNotificationAsFailed provides a mock function with given fields: ctx, id, reason
func (_m *MockNotificationsUseCase) MarkNotificationAsFailed(ctx context.Context, id domain.NotificationID, reason string) error {
	ret := _m.Called(ctx, id, reason)

	if len(ret) == 0 {
		panic("no return value specified for MarkNotificationAsFailed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationID, string) error); ok {
		r0 = rf(ctx, id, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationsUseCase_MarkNotificationAsFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkNotificationAsFailed'
type MockNotificationsUseCase_MarkNotificationAsFailed_Call struct {
	*mock.Call
}

// MarkNotificationAsFailed is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationID
//   - reason string
func (_e *MockNotificationsUseCase_Expecter) MarkNotificationAsFailed(ctx interface{}, id interface{}, reason interface{}) *MockNotificationsUseCase_MarkNotificationAsFailed_Call {
	return &MockNotificationsUseCase_MarkNotificationAsFailed_Call{Call: _e.mock.On("MarkNotificationAsFailed", ctx, id, reason)}
}

func (_c *MockNotificationsUseCase_MarkNotificationAsFailed_Call) Run(run func(ctx context.Context, id domain.NotificationID, reason string)) *MockNotificationsUseCase_MarkNotificationAsFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationID), args[2].(string))
	})
	return _c
}

func (_c *MockNotificationsUseCase_MarkNotificationAsFailed_Call) Return(_a0 error) *MockNotificationsUseCase_MarkNotificationAsFailed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationsUseCase_MarkNotificationAsFailed_Call) RunAndReturn(run func(context.Context, domain.NotificationID, string) error) *MockNotificationsUseCase_MarkNotificationAsFailed_Call {
	_c.Call.Return(run)
	return _c
}

// MarkNotificationAsSent provides a mock function with given fields: ctx, id
func (_m *MockNotificationsUseCase) MarkNotificationAsSent(ctx context.Context, id domain.NotificationID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for MarkNotificationAsSent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationsUseCase_MarkNotificationAsSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkNotificationAsSent'
type MockNotificationsUseCase_MarkNotificationAsSent_Call struct {
	*mock.Call
}

// MarkNotificationAsSent is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationID
func (_e *MockNotificationsUseCase_Expecter) MarkNotificationAsSent(ctx interface{}, id interface{}) *MockNotificationsUseCase_MarkNotificationAsSent_Call {
	return &MockNotificationsUseCase_MarkNotificationAsSent_Call{Call: _e.mock.On("MarkNotificationAsSent", ctx, id)}
}

func (_c *MockNotificationsUseCase_MarkNotificationAsSent_Call) Run(run func(ctx context.Context, id domain.NotificationID)) *MockNotificationsUseCase_MarkNotificationAsSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationID))
	})
	return _c
}

func (_c *MockNotificationsUseCase_MarkNotificationAsSent_Call) Return(_a0 error) *MockNotificationsUseCase_MarkNotificationAsSent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationsUseCase_MarkNotificationAsSent_Call) RunAndReturn(run func(context.Context, domain.NotificationID) error) *MockNotificationsUseCase_MarkNotificationAsSent_Call {
	_c.Call.Return(run)
	return _c
}

// MarkNotificationAsSkipped provides a mock function with given fields: ctx, id, reason
func (_m *MockNotificationsUseCase) MarkNotificationAsSkipped(ctx context.Context, id domain.NotificationID, reason string) error {
	ret := _m.Called(ctx, id, reason)

	if len(ret) == 0 {
		panic("no return value specified for MarkNotificationAsSkipped")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationID, string) error); ok {
		r0 = rf(ctx, id, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationsUseCase_MarkNotificationAsSkipped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkNotificationAsSkipped'
type MockNotificationsUseCase_MarkNotificationAsSkipped_Call struct {
	*mock.Call
}

// MarkNotificationAsSkipped is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationID
//   - reason string
func (_e *MockNotificationsUseCase_Expecter) MarkNotificationAsSkipped(ctx interface{}, id interface{}, reason interface{}) *MockNotificationsUseCase_MarkNotificationAsSkipped_Call {
	return &MockNotificationsUseCase_MarkNotificationAsSkipped_Call{Call: _e.mock.On("MarkNotificationAsSkipped", ctx, id, reason)}
}

func (_c *MockNotificationsUseCase_MarkNotificationAsSkipped_Call) Run(run func(ctx context.Context, id domain.NotificationID, reason string)) *MockNotificationsUseCase_MarkNotificationAsSkipped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationID), args[2].(string))
	})
	return _c
}

func (_c *MockNotificationsUseCase_MarkNotificationAsSkipped_Call) Return(_a0 error) *MockNotificationsUseCase_MarkNotificationAsSkipped_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationsUseCase_MarkNotificationAsSkipped_Call) RunAndReturn(run func(context.Context, domain.NotificationID, string) error) *MockNotificationsUseCase_MarkNotificationAsSkipped_Call {
	_c.Call.Return(run)
	return _c
}

// TakePendingNotificationsWithSettings provides a mock function with given fields: ctx, limit
func (_m *MockNotificationsUseCase) TakePendingNotificationsWithSettings(ctx context.Context, limit uint) ([]domain.NotificationWithSettings, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for TakePendingNotificationsWithSettings")
	}

	var r0 []domain.NotificationWithSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]domain.NotificationWithSettings, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []domain.NotificationWithSettings); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.NotificationWithSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationsUseCase_TakePendingNotificationsWithSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakePendingNotificationsWithSettings'
type MockNotificationsUseCase_TakePendingNotificationsWithSettings_Call struct {
	*mock.Call
}

// TakePendingNotificationsWithSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - limit uint
func (_e *MockNotificationsUseCase_Expecter) TakePendingNotificationsWithSettings(ctx interface{}, limit interface{}) *MockNotificationsUseCase_TakePendingNotificationsWithSettings_Call {
	return &MockNotificationsUseCase_TakePendingNotificationsWithSettings_Call{Call: _e.mock.On("TakePendingNotificationsWithSettings", ctx, limit)}
}

func (_c *MockNotificationsUseCase_TakePendingNotificationsWithSettings_Call) Run(run func(ctx context.Context, limit uint)) *MockNotificationsUseCase_TakePendingNotificationsWithSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockNotificationsUseCase_TakePendingNotificationsWithSettings_Call) Return(_a0 []domain.NotificationWithSettings, _a1 error) *MockNotificationsUseCase_TakePendingNotificationsWithSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationsUseCase_TakePendingNotificationsWithSettings_Call) RunAndReturn(run func(context.Context, uint) ([]domain.NotificationWithSettings, error)) *MockNotificationsUseCase_TakePendingNotificationsWithSettings_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationsUseCase creates a new instance of MockNotificationsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationsUseCase {
	mock := &MockNotificationsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
