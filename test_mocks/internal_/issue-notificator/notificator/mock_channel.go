// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocknotificator

import (
	context "context"
	json "encoding/json"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockChannel is an autogenerated mock type for the Channel type
type MockChannel struct {
	mock.Mock
}

type MockChannel_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChannel) EXPECT() *MockChannel_Expecter {
	return &MockChannel_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: ctx, issue, project, config, isRegress
func (_m *MockChannel) Send(ctx context.Context, issue *domain.Issue, project *domain.Project, config json.RawMessage, isRegress bool) error {
	ret := _m.Called(ctx, issue, project, config, isRegress)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Issue, *domain.Project, json.RawMessage, bool) error); ok {
		r0 = rf(ctx, issue, project, config, isRegress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChannel_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockChannel_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - issue *domain.Issue
//   - project *domain.Project
//   - config json.RawMessage
//   - isRegress bool
func (_e *MockChannel_Expecter) Send(ctx interface{}, issue interface{}, project interface{}, config interface{}, isRegress interface{}) *MockChannel_Send_Call {
	return &MockChannel_Send_Call{Call: _e.mock.On("Send", ctx, issue, project, config, isRegress)}
}

func (_c *MockChannel_Send_Call) Run(run func(ctx context.Context, issue *domain.Issue, project *domain.Project, config json.RawMessage, isRegress bool)) *MockChannel_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Issue), args[2].(*domain.Project), args[3].(json.RawMessage), args[4].(bool))
	})
	return _c
}

func (_c *MockChannel_Send_Call) Return(_a0 error) *MockChannel_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannel_Send_Call) RunAndReturn(run func(context.Context, *domain.Issue, *domain.Project, json.RawMessage, bool) error) *MockChannel_Send_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with no fields
func (_m *MockChannel) Type() domain.NotificationType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 domain.NotificationType
	if rf, ok := ret.Get(0).(func() domain.NotificationType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.NotificationType)
	}

	return r0
}

// MockChannel_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockChannel_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockChannel_Expecter) Type() *MockChannel_Type_Call {
	return &MockChannel_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockChannel_Type_Call) Run(run func()) *MockChannel_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChannel_Type_Call) Return(_a0 domain.NotificationType) *MockChannel_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannel_Type_Call) RunAndReturn(run func() domain.NotificationType) *MockChannel_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChannel creates a new instance of MockChannel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChannel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChannel {
	mock := &MockChannel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
