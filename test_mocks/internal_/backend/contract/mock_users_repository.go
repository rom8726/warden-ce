// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockUsersRepository is an autogenerated mock type for the UsersRepository type
type MockUsersRepository struct {
	mock.Mock
}

type MockUsersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersRepository) EXPECT() *MockUsersRepository_Expecter {
	return &MockUsersRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, user
func (_m *MockUsersRepository) Create(ctx context.Context, user domain.UserDTO) (domain.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserDTO) (domain.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserDTO) domain.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserDTO) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUsersRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user domain.UserDTO
func (_e *MockUsersRepository_Expecter) Create(ctx interface{}, user interface{}) *MockUsersRepository_Create_Call {
	return &MockUsersRepository_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockUsersRepository_Create_Call) Run(run func(ctx context.Context, user domain.UserDTO)) *MockUsersRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserDTO))
	})
	return _c
}

func (_c *MockUsersRepository_Create_Call) Return(_a0 domain.User, _a1 error) *MockUsersRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_Create_Call) RunAndReturn(run func(context.Context, domain.UserDTO) (domain.User, error)) *MockUsersRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockUsersRepository) Delete(ctx context.Context, id domain.UserID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUsersRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.UserID
func (_e *MockUsersRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockUsersRepository_Delete_Call {
	return &MockUsersRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockUsersRepository_Delete_Call) Run(run func(ctx context.Context, id domain.UserID)) *MockUsersRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID))
	})
	return _c
}

func (_c *MockUsersRepository_Delete_Call) Return(_a0 error) *MockUsersRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_Delete_Call) RunAndReturn(run func(context.Context, domain.UserID) error) *MockUsersRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsByID provides a mock function with given fields: ctx, id
func (_m *MockUsersRepository) ExistsByID(ctx context.Context, id domain.UserID) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_ExistsByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsByID'
type MockUsersRepository_ExistsByID_Call struct {
	*mock.Call
}

// ExistsByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.UserID
func (_e *MockUsersRepository_Expecter) ExistsByID(ctx interface{}, id interface{}) *MockUsersRepository_ExistsByID_Call {
	return &MockUsersRepository_ExistsByID_Call{Call: _e.mock.On("ExistsByID", ctx, id)}
}

func (_c *MockUsersRepository_ExistsByID_Call) Run(run func(ctx context.Context, id domain.UserID)) *MockUsersRepository_ExistsByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID))
	})
	return _c
}

func (_c *MockUsersRepository_ExistsByID_Call) Return(_a0 bool, _a1 error) *MockUsersRepository_ExistsByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_ExistsByID_Call) RunAndReturn(run func(context.Context, domain.UserID) (bool, error)) *MockUsersRepository_ExistsByID_Call {
	_c.Call.Return(run)
	return _c
}

// FetchByIDs provides a mock function with given fields: ctx, ids
func (_m *MockUsersRepository) FetchByIDs(ctx context.Context, ids []domain.UserID) ([]domain.User, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for FetchByIDs")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.UserID) ([]domain.User, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []domain.UserID) []domain.User); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []domain.UserID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_FetchByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchByIDs'
type MockUsersRepository_FetchByIDs_Call struct {
	*mock.Call
}

// FetchByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []domain.UserID
func (_e *MockUsersRepository_Expecter) FetchByIDs(ctx interface{}, ids interface{}) *MockUsersRepository_FetchByIDs_Call {
	return &MockUsersRepository_FetchByIDs_Call{Call: _e.mock.On("FetchByIDs", ctx, ids)}
}

func (_c *MockUsersRepository_FetchByIDs_Call) Run(run func(ctx context.Context, ids []domain.UserID)) *MockUsersRepository_FetchByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]domain.UserID))
	})
	return _c
}

func (_c *MockUsersRepository_FetchByIDs_Call) Return(_a0 []domain.User, _a1 error) *MockUsersRepository_FetchByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_FetchByIDs_Call) RunAndReturn(run func(context.Context, []domain.UserID) ([]domain.User, error)) *MockUsersRepository_FetchByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *MockUsersRepository) GetByEmail(ctx context.Context, email string) (domain.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUsersRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUsersRepository_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUsersRepository_GetByEmail_Call {
	return &MockUsersRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUsersRepository_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUsersRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUsersRepository_GetByEmail_Call) Return(_a0 domain.User, _a1 error) *MockUsersRepository_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (domain.User, error)) *MockUsersRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockUsersRepository) GetByID(ctx context.Context, id domain.UserID) (domain.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) (domain.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) domain.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUsersRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.UserID
func (_e *MockUsersRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockUsersRepository_GetByID_Call {
	return &MockUsersRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockUsersRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.UserID)) *MockUsersRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID))
	})
	return _c
}

func (_c *MockUsersRepository_GetByID_Call) Return(_a0 domain.User, _a1 error) *MockUsersRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_GetByID_Call) RunAndReturn(run func(context.Context, domain.UserID) (domain.User, error)) *MockUsersRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function with given fields: ctx, username
func (_m *MockUsersRepository) GetByUsername(ctx context.Context, username string) (domain.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type MockUsersRepository_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUsersRepository_Expecter) GetByUsername(ctx interface{}, username interface{}) *MockUsersRepository_GetByUsername_Call {
	return &MockUsersRepository_GetByUsername_Call{Call: _e.mock.On("GetByUsername", ctx, username)}
}

func (_c *MockUsersRepository_GetByUsername_Call) Run(run func(ctx context.Context, username string)) *MockUsersRepository_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUsersRepository_GetByUsername_Call) Return(_a0 domain.User, _a1 error) *MockUsersRepository_GetByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_GetByUsername_Call) RunAndReturn(run func(context.Context, string) (domain.User, error)) *MockUsersRepository_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockUsersRepository) List(ctx context.Context) ([]domain.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockUsersRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUsersRepository_Expecter) List(ctx interface{}) *MockUsersRepository_List_Call {
	return &MockUsersRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockUsersRepository_List_Call) Run(run func(ctx context.Context)) *MockUsersRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUsersRepository_List_Call) Return(_a0 []domain.User, _a1 error) *MockUsersRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_List_Call) RunAndReturn(run func(context.Context) ([]domain.User, error)) *MockUsersRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, user
func (_m *MockUsersRepository) Update(ctx context.Context, user *domain.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUsersRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user *domain.User
func (_e *MockUsersRepository_Expecter) Update(ctx interface{}, user interface{}) *MockUsersRepository_Update_Call {
	return &MockUsersRepository_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *MockUsersRepository_Update_Call) Run(run func(ctx context.Context, user *domain.User)) *MockUsersRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *MockUsersRepository_Update_Call) Return(_a0 error) *MockUsersRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_Update_Call) RunAndReturn(run func(context.Context, *domain.User) error) *MockUsersRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Update2FA provides a mock function with given fields: ctx, id, enabled, secret, confirmedAt
func (_m *MockUsersRepository) Update2FA(ctx context.Context, id domain.UserID, enabled bool, secret string, confirmedAt *time.Time) error {
	ret := _m.Called(ctx, id, enabled, secret, confirmedAt)

	if len(ret) == 0 {
		panic("no return value specified for Update2FA")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, bool, string, *time.Time) error); ok {
		r0 = rf(ctx, id, enabled, secret, confirmedAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_Update2FA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update2FA'
type MockUsersRepository_Update2FA_Call struct {
	*mock.Call
}

// Update2FA is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.UserID
//   - enabled bool
//   - secret string
//   - confirmedAt *time.Time
func (_e *MockUsersRepository_Expecter) Update2FA(ctx interface{}, id interface{}, enabled interface{}, secret interface{}, confirmedAt interface{}) *MockUsersRepository_Update2FA_Call {
	return &MockUsersRepository_Update2FA_Call{Call: _e.mock.On("Update2FA", ctx, id, enabled, secret, confirmedAt)}
}

func (_c *MockUsersRepository_Update2FA_Call) Run(run func(ctx context.Context, id domain.UserID, enabled bool, secret string, confirmedAt *time.Time)) *MockUsersRepository_Update2FA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(bool), args[3].(string), args[4].(*time.Time))
	})
	return _c
}

func (_c *MockUsersRepository_Update2FA_Call) Return(_a0 error) *MockUsersRepository_Update2FA_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_Update2FA_Call) RunAndReturn(run func(context.Context, domain.UserID, bool, string, *time.Time) error) *MockUsersRepository_Update2FA_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastLogin provides a mock function with given fields: ctx, id
func (_m *MockUsersRepository) UpdateLastLogin(ctx context.Context, id domain.UserID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastLogin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_UpdateLastLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastLogin'
type MockUsersRepository_UpdateLastLogin_Call struct {
	*mock.Call
}

// UpdateLastLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.UserID
func (_e *MockUsersRepository_Expecter) UpdateLastLogin(ctx interface{}, id interface{}) *MockUsersRepository_UpdateLastLogin_Call {
	return &MockUsersRepository_UpdateLastLogin_Call{Call: _e.mock.On("UpdateLastLogin", ctx, id)}
}

func (_c *MockUsersRepository_UpdateLastLogin_Call) Run(run func(ctx context.Context, id domain.UserID)) *MockUsersRepository_UpdateLastLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID))
	})
	return _c
}

func (_c *MockUsersRepository_UpdateLastLogin_Call) Return(_a0 error) *MockUsersRepository_UpdateLastLogin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_UpdateLastLogin_Call) RunAndReturn(run func(context.Context, domain.UserID) error) *MockUsersRepository_UpdateLastLogin_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, id, passwordHash
func (_m *MockUsersRepository) UpdatePassword(ctx context.Context, id domain.UserID, passwordHash string) error {
	ret := _m.Called(ctx, id, passwordHash)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, string) error); ok {
		r0 = rf(ctx, id, passwordHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type MockUsersRepository_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.UserID
//   - passwordHash string
func (_e *MockUsersRepository_Expecter) UpdatePassword(ctx interface{}, id interface{}, passwordHash interface{}) *MockUsersRepository_UpdatePassword_Call {
	return &MockUsersRepository_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, id, passwordHash)}
}

func (_c *MockUsersRepository_UpdatePassword_Call) Run(run func(ctx context.Context, id domain.UserID, passwordHash string)) *MockUsersRepository_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(string))
	})
	return _c
}

func (_c *MockUsersRepository_UpdatePassword_Call) Return(_a0 error) *MockUsersRepository_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_UpdatePassword_Call) RunAndReturn(run func(context.Context, domain.UserID, string) error) *MockUsersRepository_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersRepository creates a new instance of MockUsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersRepository {
	mock := &MockUsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
