// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockNotificationsUseCase is an autogenerated mock type for the NotificationsUseCase type
type MockNotificationsUseCase struct {
	mock.Mock
}

type MockNotificationsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationsUseCase) EXPECT() *MockNotificationsUseCase_Expecter {
	return &MockNotificationsUseCase_Expecter{mock: &_m.Mock}
}

// CreateNotificationRule provides a mock function with given fields: ctx, ruleDTO
func (_m *MockNotificationsUseCase) CreateNotificationRule(ctx context.Context, ruleDTO domain.NotificationRuleDTO) (domain.NotificationRule, error) {
	ret := _m.Called(ctx, ruleDTO)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationRule")
	}

	var r0 domain.NotificationRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationRuleDTO) (domain.NotificationRule, error)); ok {
		return rf(ctx, ruleDTO)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationRuleDTO) domain.NotificationRule); ok {
		r0 = rf(ctx, ruleDTO)
	} else {
		r0 = ret.Get(0).(domain.NotificationRule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.NotificationRuleDTO) error); ok {
		r1 = rf(ctx, ruleDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationsUseCase_CreateNotificationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationRule'
type MockNotificationsUseCase_CreateNotificationRule_Call struct {
	*mock.Call
}

// CreateNotificationRule is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleDTO domain.NotificationRuleDTO
func (_e *MockNotificationsUseCase_Expecter) CreateNotificationRule(ctx interface{}, ruleDTO interface{}) *MockNotificationsUseCase_CreateNotificationRule_Call {
	return &MockNotificationsUseCase_CreateNotificationRule_Call{Call: _e.mock.On("CreateNotificationRule", ctx, ruleDTO)}
}

func (_c *MockNotificationsUseCase_CreateNotificationRule_Call) Run(run func(ctx context.Context, ruleDTO domain.NotificationRuleDTO)) *MockNotificationsUseCase_CreateNotificationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationRuleDTO))
	})
	return _c
}

func (_c *MockNotificationsUseCase_CreateNotificationRule_Call) Return(_a0 domain.NotificationRule, _a1 error) *MockNotificationsUseCase_CreateNotificationRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationsUseCase_CreateNotificationRule_Call) RunAndReturn(run func(context.Context, domain.NotificationRuleDTO) (domain.NotificationRule, error)) *MockNotificationsUseCase_CreateNotificationRule_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNotificationSetting provides a mock function with given fields: ctx, settingDTO
func (_m *MockNotificationsUseCase) CreateNotificationSetting(ctx context.Context, settingDTO domain.NotificationSettingDTO) (domain.NotificationSetting, error) {
	ret := _m.Called(ctx, settingDTO)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationSetting")
	}

	var r0 domain.NotificationSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingDTO) (domain.NotificationSetting, error)); ok {
		return rf(ctx, settingDTO)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingDTO) domain.NotificationSetting); ok {
		r0 = rf(ctx, settingDTO)
	} else {
		r0 = ret.Get(0).(domain.NotificationSetting)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.NotificationSettingDTO) error); ok {
		r1 = rf(ctx, settingDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationsUseCase_CreateNotificationSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationSetting'
type MockNotificationsUseCase_CreateNotificationSetting_Call struct {
	*mock.Call
}

// CreateNotificationSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - settingDTO domain.NotificationSettingDTO
func (_e *MockNotificationsUseCase_Expecter) CreateNotificationSetting(ctx interface{}, settingDTO interface{}) *MockNotificationsUseCase_CreateNotificationSetting_Call {
	return &MockNotificationsUseCase_CreateNotificationSetting_Call{Call: _e.mock.On("CreateNotificationSetting", ctx, settingDTO)}
}

func (_c *MockNotificationsUseCase_CreateNotificationSetting_Call) Run(run func(ctx context.Context, settingDTO domain.NotificationSettingDTO)) *MockNotificationsUseCase_CreateNotificationSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationSettingDTO))
	})
	return _c
}

func (_c *MockNotificationsUseCase_CreateNotificationSetting_Call) Return(_a0 domain.NotificationSetting, _a1 error) *MockNotificationsUseCase_CreateNotificationSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationsUseCase_CreateNotificationSetting_Call) RunAndReturn(run func(context.Context, domain.NotificationSettingDTO) (domain.NotificationSetting, error)) *MockNotificationsUseCase_CreateNotificationSetting_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotificationRule provides a mock function with given fields: ctx, id
func (_m *MockNotificationsUseCase) DeleteNotificationRule(ctx context.Context, id domain.NotificationRuleID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationRule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationRuleID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationsUseCase_DeleteNotificationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationRule'
type MockNotificationsUseCase_DeleteNotificationRule_Call struct {
	*mock.Call
}

// DeleteNotificationRule is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationRuleID
func (_e *MockNotificationsUseCase_Expecter) DeleteNotificationRule(ctx interface{}, id interface{}) *MockNotificationsUseCase_DeleteNotificationRule_Call {
	return &MockNotificationsUseCase_DeleteNotificationRule_Call{Call: _e.mock.On("DeleteNotificationRule", ctx, id)}
}

func (_c *MockNotificationsUseCase_DeleteNotificationRule_Call) Run(run func(ctx context.Context, id domain.NotificationRuleID)) *MockNotificationsUseCase_DeleteNotificationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationRuleID))
	})
	return _c
}

func (_c *MockNotificationsUseCase_DeleteNotificationRule_Call) Return(_a0 error) *MockNotificationsUseCase_DeleteNotificationRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationsUseCase_DeleteNotificationRule_Call) RunAndReturn(run func(context.Context, domain.NotificationRuleID) error) *MockNotificationsUseCase_DeleteNotificationRule_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotificationSetting provides a mock function with given fields: ctx, id
func (_m *MockNotificationsUseCase) DeleteNotificationSetting(ctx context.Context, id domain.NotificationSettingID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationSetting")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationsUseCase_DeleteNotificationSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationSetting'
type MockNotificationsUseCase_DeleteNotificationSetting_Call struct {
	*mock.Call
}

// DeleteNotificationSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationSettingID
func (_e *MockNotificationsUseCase_Expecter) DeleteNotificationSetting(ctx interface{}, id interface{}) *MockNotificationsUseCase_DeleteNotificationSetting_Call {
	return &MockNotificationsUseCase_DeleteNotificationSetting_Call{Call: _e.mock.On("DeleteNotificationSetting", ctx, id)}
}

func (_c *MockNotificationsUseCase_DeleteNotificationSetting_Call) Run(run func(ctx context.Context, id domain.NotificationSettingID)) *MockNotificationsUseCase_DeleteNotificationSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationSettingID))
	})
	return _c
}

func (_c *MockNotificationsUseCase_DeleteNotificationSetting_Call) Return(_a0 error) *MockNotificationsUseCase_DeleteNotificationSetting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationsUseCase_DeleteNotificationSetting_Call) RunAndReturn(run func(context.Context, domain.NotificationSettingID) error) *MockNotificationsUseCase_DeleteNotificationSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationRule provides a mock function with given fields: ctx, id
func (_m *MockNotificationsUseCase) GetNotificationRule(ctx context.Context, id domain.NotificationRuleID) (domain.NotificationRule, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationRule")
	}

	var r0 domain.NotificationRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationRuleID) (domain.NotificationRule, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationRuleID) domain.NotificationRule); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.NotificationRule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.NotificationRuleID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationsUseCase_GetNotificationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationRule'
type MockNotificationsUseCase_GetNotificationRule_Call struct {
	*mock.Call
}

// GetNotificationRule is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationRuleID
func (_e *MockNotificationsUseCase_Expecter) GetNotificationRule(ctx interface{}, id interface{}) *MockNotificationsUseCase_GetNotificationRule_Call {
	return &MockNotificationsUseCase_GetNotificationRule_Call{Call: _e.mock.On("GetNotificationRule", ctx, id)}
}

func (_c *MockNotificationsUseCase_GetNotificationRule_Call) Run(run func(ctx context.Context, id domain.NotificationRuleID)) *MockNotificationsUseCase_GetNotificationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationRuleID))
	})
	return _c
}

func (_c *MockNotificationsUseCase_GetNotificationRule_Call) Return(_a0 domain.NotificationRule, _a1 error) *MockNotificationsUseCase_GetNotificationRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationsUseCase_GetNotificationRule_Call) RunAndReturn(run func(context.Context, domain.NotificationRuleID) (domain.NotificationRule, error)) *MockNotificationsUseCase_GetNotificationRule_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationSetting provides a mock function with given fields: ctx, id
func (_m *MockNotificationsUseCase) GetNotificationSetting(ctx context.Context, id domain.NotificationSettingID) (domain.NotificationSetting, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationSetting")
	}

	var r0 domain.NotificationSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) (domain.NotificationSetting, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) domain.NotificationSetting); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.NotificationSetting)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.NotificationSettingID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationsUseCase_GetNotificationSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationSetting'
type MockNotificationsUseCase_GetNotificationSetting_Call struct {
	*mock.Call
}

// GetNotificationSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationSettingID
func (_e *MockNotificationsUseCase_Expecter) GetNotificationSetting(ctx interface{}, id interface{}) *MockNotificationsUseCase_GetNotificationSetting_Call {
	return &MockNotificationsUseCase_GetNotificationSetting_Call{Call: _e.mock.On("GetNotificationSetting", ctx, id)}
}

func (_c *MockNotificationsUseCase_GetNotificationSetting_Call) Run(run func(ctx context.Context, id domain.NotificationSettingID)) *MockNotificationsUseCase_GetNotificationSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationSettingID))
	})
	return _c
}

func (_c *MockNotificationsUseCase_GetNotificationSetting_Call) Return(_a0 domain.NotificationSetting, _a1 error) *MockNotificationsUseCase_GetNotificationSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationsUseCase_GetNotificationSetting_Call) RunAndReturn(run func(context.Context, domain.NotificationSettingID) (domain.NotificationSetting, error)) *MockNotificationsUseCase_GetNotificationSetting_Call {
	_c.Call.Return(run)
	return _c
}

// ListNotificationRules provides a mock function with given fields: ctx, settingID
func (_m *MockNotificationsUseCase) ListNotificationRules(ctx context.Context, settingID domain.NotificationSettingID) ([]domain.NotificationRule, error) {
	ret := _m.Called(ctx, settingID)

	if len(ret) == 0 {
		panic("no return value specified for ListNotificationRules")
	}

	var r0 []domain.NotificationRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) ([]domain.NotificationRule, error)); ok {
		return rf(ctx, settingID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) []domain.NotificationRule); ok {
		r0 = rf(ctx, settingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.NotificationRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.NotificationSettingID) error); ok {
		r1 = rf(ctx, settingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationsUseCase_ListNotificationRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNotificationRules'
type MockNotificationsUseCase_ListNotificationRules_Call struct {
	*mock.Call
}

// ListNotificationRules is a helper method to define mock.On call
//   - ctx context.Context
//   - settingID domain.NotificationSettingID
func (_e *MockNotificationsUseCase_Expecter) ListNotificationRules(ctx interface{}, settingID interface{}) *MockNotificationsUseCase_ListNotificationRules_Call {
	return &MockNotificationsUseCase_ListNotificationRules_Call{Call: _e.mock.On("ListNotificationRules", ctx, settingID)}
}

func (_c *MockNotificationsUseCase_ListNotificationRules_Call) Run(run func(ctx context.Context, settingID domain.NotificationSettingID)) *MockNotificationsUseCase_ListNotificationRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationSettingID))
	})
	return _c
}

func (_c *MockNotificationsUseCase_ListNotificationRules_Call) Return(_a0 []domain.NotificationRule, _a1 error) *MockNotificationsUseCase_ListNotificationRules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationsUseCase_ListNotificationRules_Call) RunAndReturn(run func(context.Context, domain.NotificationSettingID) ([]domain.NotificationRule, error)) *MockNotificationsUseCase_ListNotificationRules_Call {
	_c.Call.Return(run)
	return _c
}

// ListNotificationSettings provides a mock function with given fields: ctx, projectID
func (_m *MockNotificationsUseCase) ListNotificationSettings(ctx context.Context, projectID domain.ProjectID) ([]domain.NotificationSetting, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListNotificationSettings")
	}

	var r0 []domain.NotificationSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) ([]domain.NotificationSetting, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) []domain.NotificationSetting); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.NotificationSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationsUseCase_ListNotificationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNotificationSettings'
type MockNotificationsUseCase_ListNotificationSettings_Call struct {
	*mock.Call
}

// ListNotificationSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockNotificationsUseCase_Expecter) ListNotificationSettings(ctx interface{}, projectID interface{}) *MockNotificationsUseCase_ListNotificationSettings_Call {
	return &MockNotificationsUseCase_ListNotificationSettings_Call{Call: _e.mock.On("ListNotificationSettings", ctx, projectID)}
}

func (_c *MockNotificationsUseCase_ListNotificationSettings_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockNotificationsUseCase_ListNotificationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID))
	})
	return _c
}

func (_c *MockNotificationsUseCase_ListNotificationSettings_Call) Return(_a0 []domain.NotificationSetting, _a1 error) *MockNotificationsUseCase_ListNotificationSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationsUseCase_ListNotificationSettings_Call) RunAndReturn(run func(context.Context, domain.ProjectID) ([]domain.NotificationSetting, error)) *MockNotificationsUseCase_ListNotificationSettings_Call {
	_c.Call.Return(run)
	return _c
}

// SendTestNotification provides a mock function with given fields: ctx, projectID, notificationSettingID
func (_m *MockNotificationsUseCase) SendTestNotification(ctx context.Context, projectID domain.ProjectID, notificationSettingID domain.NotificationSettingID) error {
	ret := _m.Called(ctx, projectID, notificationSettingID)

	if len(ret) == 0 {
		panic("no return value specified for SendTestNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.NotificationSettingID) error); ok {
		r0 = rf(ctx, projectID, notificationSettingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationsUseCase_SendTestNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTestNotification'
type MockNotificationsUseCase_SendTestNotification_Call struct {
	*mock.Call
}

// SendTestNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - notificationSettingID domain.NotificationSettingID
func (_e *MockNotificationsUseCase_Expecter) SendTestNotification(ctx interface{}, projectID interface{}, notificationSettingID interface{}) *MockNotificationsUseCase_SendTestNotification_Call {
	return &MockNotificationsUseCase_SendTestNotification_Call{Call: _e.mock.On("SendTestNotification", ctx, projectID, notificationSettingID)}
}

func (_c *MockNotificationsUseCase_SendTestNotification_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, notificationSettingID domain.NotificationSettingID)) *MockNotificationsUseCase_SendTestNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(domain.NotificationSettingID))
	})
	return _c
}

func (_c *MockNotificationsUseCase_SendTestNotification_Call) Return(_a0 error) *MockNotificationsUseCase_SendTestNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationsUseCase_SendTestNotification_Call) RunAndReturn(run func(context.Context, domain.ProjectID, domain.NotificationSettingID) error) *MockNotificationsUseCase_SendTestNotification_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotificationRule provides a mock function with given fields: ctx, rule
func (_m *MockNotificationsUseCase) UpdateNotificationRule(ctx context.Context, rule domain.NotificationRule) error {
	ret := _m.Called(ctx, rule)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationRule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationRule) error); ok {
		r0 = rf(ctx, rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationsUseCase_UpdateNotificationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationRule'
type MockNotificationsUseCase_UpdateNotificationRule_Call struct {
	*mock.Call
}

// UpdateNotificationRule is a helper method to define mock.On call
//   - ctx context.Context
//   - rule domain.NotificationRule
func (_e *MockNotificationsUseCase_Expecter) UpdateNotificationRule(ctx interface{}, rule interface{}) *MockNotificationsUseCase_UpdateNotificationRule_Call {
	return &MockNotificationsUseCase_UpdateNotificationRule_Call{Call: _e.mock.On("UpdateNotificationRule", ctx, rule)}
}

func (_c *MockNotificationsUseCase_UpdateNotificationRule_Call) Run(run func(ctx context.Context, rule domain.NotificationRule)) *MockNotificationsUseCase_UpdateNotificationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationRule))
	})
	return _c
}

func (_c *MockNotificationsUseCase_UpdateNotificationRule_Call) Return(_a0 error) *MockNotificationsUseCase_UpdateNotificationRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationsUseCase_UpdateNotificationRule_Call) RunAndReturn(run func(context.Context, domain.NotificationRule) error) *MockNotificationsUseCase_UpdateNotificationRule_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotificationSetting provides a mock function with given fields: ctx, setting
func (_m *MockNotificationsUseCase) UpdateNotificationSetting(ctx context.Context, setting domain.NotificationSetting) error {
	ret := _m.Called(ctx, setting)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationSetting")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationSetting) error); ok {
		r0 = rf(ctx, setting)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationsUseCase_UpdateNotificationSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationSetting'
type MockNotificationsUseCase_UpdateNotificationSetting_Call struct {
	*mock.Call
}

// UpdateNotificationSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - setting domain.NotificationSetting
func (_e *MockNotificationsUseCase_Expecter) UpdateNotificationSetting(ctx interface{}, setting interface{}) *MockNotificationsUseCase_UpdateNotificationSetting_Call {
	return &MockNotificationsUseCase_UpdateNotificationSetting_Call{Call: _e.mock.On("UpdateNotificationSetting", ctx, setting)}
}

func (_c *MockNotificationsUseCase_UpdateNotificationSetting_Call) Run(run func(ctx context.Context, setting domain.NotificationSetting)) *MockNotificationsUseCase_UpdateNotificationSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationSetting))
	})
	return _c
}

func (_c *MockNotificationsUseCase_UpdateNotificationSetting_Call) Return(_a0 error) *MockNotificationsUseCase_UpdateNotificationSetting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationsUseCase_UpdateNotificationSetting_Call) RunAndReturn(run func(context.Context, domain.NotificationSetting) error) *MockNotificationsUseCase_UpdateNotificationSetting_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationsUseCase creates a new instance of MockNotificationsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationsUseCase {
	mock := &MockNotificationsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
