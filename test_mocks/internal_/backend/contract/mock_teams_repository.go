// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockTeamsRepository is an autogenerated mock type for the TeamsRepository type
type MockTeamsRepository struct {
	mock.Mock
}

type MockTeamsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTeamsRepository) EXPECT() *MockTeamsRepository_Expecter {
	return &MockTeamsRepository_Expecter{mock: &_m.Mock}
}

// AddMember provides a mock function with given fields: ctx, teamID, userID, role
func (_m *MockTeamsRepository) AddMember(ctx context.Context, teamID domain.TeamID, userID domain.UserID, role domain.Role) error {
	ret := _m.Called(ctx, teamID, userID, role)

	if len(ret) == 0 {
		panic("no return value specified for AddMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamID, domain.UserID, domain.Role) error); ok {
		r0 = rf(ctx, teamID, userID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTeamsRepository_AddMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMember'
type MockTeamsRepository_AddMember_Call struct {
	*mock.Call
}

// AddMember is a helper method to define mock.On call
//   - ctx context.Context
//   - teamID domain.TeamID
//   - userID domain.UserID
//   - role domain.Role
func (_e *MockTeamsRepository_Expecter) AddMember(ctx interface{}, teamID interface{}, userID interface{}, role interface{}) *MockTeamsRepository_AddMember_Call {
	return &MockTeamsRepository_AddMember_Call{Call: _e.mock.On("AddMember", ctx, teamID, userID, role)}
}

func (_c *MockTeamsRepository_AddMember_Call) Run(run func(ctx context.Context, teamID domain.TeamID, userID domain.UserID, role domain.Role)) *MockTeamsRepository_AddMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TeamID), args[2].(domain.UserID), args[3].(domain.Role))
	})
	return _c
}

func (_c *MockTeamsRepository_AddMember_Call) Return(_a0 error) *MockTeamsRepository_AddMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamsRepository_AddMember_Call) RunAndReturn(run func(context.Context, domain.TeamID, domain.UserID, domain.Role) error) *MockTeamsRepository_AddMember_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, teamDTO
func (_m *MockTeamsRepository) Create(ctx context.Context, teamDTO domain.TeamDTO) (domain.Team, error) {
	ret := _m.Called(ctx, teamDTO)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamDTO) (domain.Team, error)); ok {
		return rf(ctx, teamDTO)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamDTO) domain.Team); ok {
		r0 = rf(ctx, teamDTO)
	} else {
		r0 = ret.Get(0).(domain.Team)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.TeamDTO) error); ok {
		r1 = rf(ctx, teamDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTeamsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - teamDTO domain.TeamDTO
func (_e *MockTeamsRepository_Expecter) Create(ctx interface{}, teamDTO interface{}) *MockTeamsRepository_Create_Call {
	return &MockTeamsRepository_Create_Call{Call: _e.mock.On("Create", ctx, teamDTO)}
}

func (_c *MockTeamsRepository_Create_Call) Run(run func(ctx context.Context, teamDTO domain.TeamDTO)) *MockTeamsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TeamDTO))
	})
	return _c
}

func (_c *MockTeamsRepository_Create_Call) Return(_a0 domain.Team, _a1 error) *MockTeamsRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsRepository_Create_Call) RunAndReturn(run func(context.Context, domain.TeamDTO) (domain.Team, error)) *MockTeamsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockTeamsRepository) Delete(ctx context.Context, id domain.TeamID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTeamsRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTeamsRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.TeamID
func (_e *MockTeamsRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockTeamsRepository_Delete_Call {
	return &MockTeamsRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockTeamsRepository_Delete_Call) Run(run func(ctx context.Context, id domain.TeamID)) *MockTeamsRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TeamID))
	})
	return _c
}

func (_c *MockTeamsRepository_Delete_Call) Return(_a0 error) *MockTeamsRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamsRepository_Delete_Call) RunAndReturn(run func(context.Context, domain.TeamID) error) *MockTeamsRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockTeamsRepository) GetByID(ctx context.Context, id domain.TeamID) (domain.Team, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamID) (domain.Team, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamID) domain.Team); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Team)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.TeamID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockTeamsRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.TeamID
func (_e *MockTeamsRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockTeamsRepository_GetByID_Call {
	return &MockTeamsRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockTeamsRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.TeamID)) *MockTeamsRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TeamID))
	})
	return _c
}

func (_c *MockTeamsRepository_GetByID_Call) Return(_a0 domain.Team, _a1 error) *MockTeamsRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsRepository_GetByID_Call) RunAndReturn(run func(context.Context, domain.TeamID) (domain.Team, error)) *MockTeamsRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockTeamsRepository) GetByName(ctx context.Context, name string) (domain.Team, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 domain.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Team, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Team); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(domain.Team)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsRepository_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockTeamsRepository_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTeamsRepository_Expecter) GetByName(ctx interface{}, name interface{}) *MockTeamsRepository_GetByName_Call {
	return &MockTeamsRepository_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockTeamsRepository_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockTeamsRepository_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTeamsRepository_GetByName_Call) Return(_a0 domain.Team, _a1 error) *MockTeamsRepository_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsRepository_GetByName_Call) RunAndReturn(run func(context.Context, string) (domain.Team, error)) *MockTeamsRepository_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProjectID provides a mock function with given fields: ctx, projectID
func (_m *MockTeamsRepository) GetByProjectID(ctx context.Context, projectID domain.ProjectID) (domain.Team, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectID")
	}

	var r0 domain.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) (domain.Team, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) domain.Team); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Get(0).(domain.Team)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsRepository_GetByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProjectID'
type MockTeamsRepository_GetByProjectID_Call struct {
	*mock.Call
}

// GetByProjectID is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockTeamsRepository_Expecter) GetByProjectID(ctx interface{}, projectID interface{}) *MockTeamsRepository_GetByProjectID_Call {
	return &MockTeamsRepository_GetByProjectID_Call{Call: _e.mock.On("GetByProjectID", ctx, projectID)}
}

func (_c *MockTeamsRepository_GetByProjectID_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockTeamsRepository_GetByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID))
	})
	return _c
}

func (_c *MockTeamsRepository_GetByProjectID_Call) Return(_a0 domain.Team, _a1 error) *MockTeamsRepository_GetByProjectID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsRepository_GetByProjectID_Call) RunAndReturn(run func(context.Context, domain.ProjectID) (domain.Team, error)) *MockTeamsRepository_GetByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMembers provides a mock function with given fields: ctx, teamID
func (_m *MockTeamsRepository) GetMembers(ctx context.Context, teamID domain.TeamID) ([]domain.TeamMember, error) {
	ret := _m.Called(ctx, teamID)

	if len(ret) == 0 {
		panic("no return value specified for GetMembers")
	}

	var r0 []domain.TeamMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamID) ([]domain.TeamMember, error)); ok {
		return rf(ctx, teamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamID) []domain.TeamMember); ok {
		r0 = rf(ctx, teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.TeamMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.TeamID) error); ok {
		r1 = rf(ctx, teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsRepository_GetMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMembers'
type MockTeamsRepository_GetMembers_Call struct {
	*mock.Call
}

// GetMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - teamID domain.TeamID
func (_e *MockTeamsRepository_Expecter) GetMembers(ctx interface{}, teamID interface{}) *MockTeamsRepository_GetMembers_Call {
	return &MockTeamsRepository_GetMembers_Call{Call: _e.mock.On("GetMembers", ctx, teamID)}
}

func (_c *MockTeamsRepository_GetMembers_Call) Run(run func(ctx context.Context, teamID domain.TeamID)) *MockTeamsRepository_GetMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TeamID))
	})
	return _c
}

func (_c *MockTeamsRepository_GetMembers_Call) Return(_a0 []domain.TeamMember, _a1 error) *MockTeamsRepository_GetMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsRepository_GetMembers_Call) RunAndReturn(run func(context.Context, domain.TeamID) ([]domain.TeamMember, error)) *MockTeamsRepository_GetMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamsByUserID provides a mock function with given fields: ctx, userID
func (_m *MockTeamsRepository) GetTeamsByUserID(ctx context.Context, userID domain.UserID) ([]domain.Team, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamsByUserID")
	}

	var r0 []domain.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) ([]domain.Team, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) []domain.Team); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsRepository_GetTeamsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamsByUserID'
type MockTeamsRepository_GetTeamsByUserID_Call struct {
	*mock.Call
}

// GetTeamsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID domain.UserID
func (_e *MockTeamsRepository_Expecter) GetTeamsByUserID(ctx interface{}, userID interface{}) *MockTeamsRepository_GetTeamsByUserID_Call {
	return &MockTeamsRepository_GetTeamsByUserID_Call{Call: _e.mock.On("GetTeamsByUserID", ctx, userID)}
}

func (_c *MockTeamsRepository_GetTeamsByUserID_Call) Run(run func(ctx context.Context, userID domain.UserID)) *MockTeamsRepository_GetTeamsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID))
	})
	return _c
}

func (_c *MockTeamsRepository_GetTeamsByUserID_Call) Return(_a0 []domain.Team, _a1 error) *MockTeamsRepository_GetTeamsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsRepository_GetTeamsByUserID_Call) RunAndReturn(run func(context.Context, domain.UserID) ([]domain.Team, error)) *MockTeamsRepository_GetTeamsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockTeamsRepository) List(ctx context.Context) ([]domain.Team, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Team, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Team); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTeamsRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTeamsRepository_Expecter) List(ctx interface{}) *MockTeamsRepository_List_Call {
	return &MockTeamsRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockTeamsRepository_List_Call) Run(run func(ctx context.Context)) *MockTeamsRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTeamsRepository_List_Call) Return(_a0 []domain.Team, _a1 error) *MockTeamsRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsRepository_List_Call) RunAndReturn(run func(context.Context) ([]domain.Team, error)) *MockTeamsRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveMember provides a mock function with given fields: ctx, teamID, userID
func (_m *MockTeamsRepository) RemoveMember(ctx context.Context, teamID domain.TeamID, userID domain.UserID) error {
	ret := _m.Called(ctx, teamID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamID, domain.UserID) error); ok {
		r0 = rf(ctx, teamID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTeamsRepository_RemoveMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMember'
type MockTeamsRepository_RemoveMember_Call struct {
	*mock.Call
}

// RemoveMember is a helper method to define mock.On call
//   - ctx context.Context
//   - teamID domain.TeamID
//   - userID domain.UserID
func (_e *MockTeamsRepository_Expecter) RemoveMember(ctx interface{}, teamID interface{}, userID interface{}) *MockTeamsRepository_RemoveMember_Call {
	return &MockTeamsRepository_RemoveMember_Call{Call: _e.mock.On("RemoveMember", ctx, teamID, userID)}
}

func (_c *MockTeamsRepository_RemoveMember_Call) Run(run func(ctx context.Context, teamID domain.TeamID, userID domain.UserID)) *MockTeamsRepository_RemoveMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TeamID), args[2].(domain.UserID))
	})
	return _c
}

func (_c *MockTeamsRepository_RemoveMember_Call) Return(_a0 error) *MockTeamsRepository_RemoveMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamsRepository_RemoveMember_Call) RunAndReturn(run func(context.Context, domain.TeamID, domain.UserID) error) *MockTeamsRepository_RemoveMember_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMemberRole provides a mock function with given fields: ctx, teamID, userID, newRole
func (_m *MockTeamsRepository) UpdateMemberRole(ctx context.Context, teamID domain.TeamID, userID domain.UserID, newRole domain.Role) error {
	ret := _m.Called(ctx, teamID, userID, newRole)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMemberRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamID, domain.UserID, domain.Role) error); ok {
		r0 = rf(ctx, teamID, userID, newRole)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTeamsRepository_UpdateMemberRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMemberRole'
type MockTeamsRepository_UpdateMemberRole_Call struct {
	*mock.Call
}

// UpdateMemberRole is a helper method to define mock.On call
//   - ctx context.Context
//   - teamID domain.TeamID
//   - userID domain.UserID
//   - newRole domain.Role
func (_e *MockTeamsRepository_Expecter) UpdateMemberRole(ctx interface{}, teamID interface{}, userID interface{}, newRole interface{}) *MockTeamsRepository_UpdateMemberRole_Call {
	return &MockTeamsRepository_UpdateMemberRole_Call{Call: _e.mock.On("UpdateMemberRole", ctx, teamID, userID, newRole)}
}

func (_c *MockTeamsRepository_UpdateMemberRole_Call) Run(run func(ctx context.Context, teamID domain.TeamID, userID domain.UserID, newRole domain.Role)) *MockTeamsRepository_UpdateMemberRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TeamID), args[2].(domain.UserID), args[3].(domain.Role))
	})
	return _c
}

func (_c *MockTeamsRepository_UpdateMemberRole_Call) Return(_a0 error) *MockTeamsRepository_UpdateMemberRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamsRepository_UpdateMemberRole_Call) RunAndReturn(run func(context.Context, domain.TeamID, domain.UserID, domain.Role) error) *MockTeamsRepository_UpdateMemberRole_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTeamsRepository creates a new instance of MockTeamsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTeamsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTeamsRepository {
	mock := &MockTeamsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
