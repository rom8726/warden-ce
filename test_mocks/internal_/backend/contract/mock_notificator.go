// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockNotificator is an autogenerated mock type for the Notificator type
type MockNotificator struct {
	mock.Mock
}

type MockNotificator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificator) EXPECT() *MockNotificator_Expecter {
	return &MockNotificator_Expecter{mock: &_m.Mock}
}

// SendTestNotification provides a mock function with given fields: ctx, notificationSettingID
func (_m *MockNotificator) SendTestNotification(ctx context.Context, notificationSettingID domain.NotificationSettingID) error {
	ret := _m.Called(ctx, notificationSettingID)

	if len(ret) == 0 {
		panic("no return value specified for SendTestNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) error); ok {
		r0 = rf(ctx, notificationSettingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificator_SendTestNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTestNotification'
type MockNotificator_SendTestNotification_Call struct {
	*mock.Call
}

// SendTestNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - notificationSettingID domain.NotificationSettingID
func (_e *MockNotificator_Expecter) SendTestNotification(ctx interface{}, notificationSettingID interface{}) *MockNotificator_SendTestNotification_Call {
	return &MockNotificator_SendTestNotification_Call{Call: _e.mock.On("SendTestNotification", ctx, notificationSettingID)}
}

func (_c *MockNotificator_SendTestNotification_Call) Run(run func(ctx context.Context, notificationSettingID domain.NotificationSettingID)) *MockNotificator_SendTestNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationSettingID))
	})
	return _c
}

func (_c *MockNotificator_SendTestNotification_Call) Return(_a0 error) *MockNotificator_SendTestNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificator_SendTestNotification_Call) RunAndReturn(run func(context.Context, domain.NotificationSettingID) error) *MockNotificator_SendTestNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificator creates a new instance of MockNotificator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificator {
	mock := &MockNotificator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
