// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockUsersUseCase is an autogenerated mock type for the UsersUseCase type
type MockUsersUseCase struct {
	mock.Mock
}

type MockUsersUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersUseCase) EXPECT() *MockUsersUseCase_Expecter {
	return &MockUsersUseCase_Expecter{mock: &_m.Mock}
}

// Confirm2FA provides a mock function with given fields: ctx, userID, code
func (_m *MockUsersUseCase) Confirm2FA(ctx context.Context, userID domain.UserID, code string) error {
	ret := _m.Called(ctx, userID, code)

	if len(ret) == 0 {
		panic("no return value specified for Confirm2FA")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, string) error); ok {
		r0 = rf(ctx, userID, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersUseCase_Confirm2FA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Confirm2FA'
type MockUsersUseCase_Confirm2FA_Call struct {
	*mock.Call
}

// Confirm2FA is a helper method to define mock.On call
//   - ctx context.Context
//   - userID domain.UserID
//   - code string
func (_e *MockUsersUseCase_Expecter) Confirm2FA(ctx interface{}, userID interface{}, code interface{}) *MockUsersUseCase_Confirm2FA_Call {
	return &MockUsersUseCase_Confirm2FA_Call{Call: _e.mock.On("Confirm2FA", ctx, userID, code)}
}

func (_c *MockUsersUseCase_Confirm2FA_Call) Run(run func(ctx context.Context, userID domain.UserID, code string)) *MockUsersUseCase_Confirm2FA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(string))
	})
	return _c
}

func (_c *MockUsersUseCase_Confirm2FA_Call) Return(_a0 error) *MockUsersUseCase_Confirm2FA_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersUseCase_Confirm2FA_Call) RunAndReturn(run func(context.Context, domain.UserID, string) error) *MockUsersUseCase_Confirm2FA_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, currentUser, username, email, password, isSuperuser
func (_m *MockUsersUseCase) Create(ctx context.Context, currentUser domain.User, username string, email string, password string, isSuperuser bool) (domain.User, error) {
	ret := _m.Called(ctx, currentUser, username, email, password, isSuperuser)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User, string, string, string, bool) (domain.User, error)); ok {
		return rf(ctx, currentUser, username, email, password, isSuperuser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User, string, string, string, bool) domain.User); ok {
		r0 = rf(ctx, currentUser, username, email, password, isSuperuser)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User, string, string, string, bool) error); ok {
		r1 = rf(ctx, currentUser, username, email, password, isSuperuser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersUseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUsersUseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUser domain.User
//   - username string
//   - email string
//   - password string
//   - isSuperuser bool
func (_e *MockUsersUseCase_Expecter) Create(ctx interface{}, currentUser interface{}, username interface{}, email interface{}, password interface{}, isSuperuser interface{}) *MockUsersUseCase_Create_Call {
	return &MockUsersUseCase_Create_Call{Call: _e.mock.On("Create", ctx, currentUser, username, email, password, isSuperuser)}
}

func (_c *MockUsersUseCase_Create_Call) Run(run func(ctx context.Context, currentUser domain.User, username string, email string, password string, isSuperuser bool)) *MockUsersUseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User), args[2].(string), args[3].(string), args[4].(string), args[5].(bool))
	})
	return _c
}

func (_c *MockUsersUseCase_Create_Call) Return(_a0 domain.User, _a1 error) *MockUsersUseCase_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersUseCase_Create_Call) RunAndReturn(run func(context.Context, domain.User, string, string, string, bool) (domain.User, error)) *MockUsersUseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentUserInfo provides a mock function with given fields: ctx, id
func (_m *MockUsersUseCase) CurrentUserInfo(ctx context.Context, id domain.UserID) (domain.UserInfo, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CurrentUserInfo")
	}

	var r0 domain.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) (domain.UserInfo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) domain.UserInfo); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.UserInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersUseCase_CurrentUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentUserInfo'
type MockUsersUseCase_CurrentUserInfo_Call struct {
	*mock.Call
}

// CurrentUserInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.UserID
func (_e *MockUsersUseCase_Expecter) CurrentUserInfo(ctx interface{}, id interface{}) *MockUsersUseCase_CurrentUserInfo_Call {
	return &MockUsersUseCase_CurrentUserInfo_Call{Call: _e.mock.On("CurrentUserInfo", ctx, id)}
}

func (_c *MockUsersUseCase_CurrentUserInfo_Call) Run(run func(ctx context.Context, id domain.UserID)) *MockUsersUseCase_CurrentUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID))
	})
	return _c
}

func (_c *MockUsersUseCase_CurrentUserInfo_Call) Return(_a0 domain.UserInfo, _a1 error) *MockUsersUseCase_CurrentUserInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersUseCase_CurrentUserInfo_Call) RunAndReturn(run func(context.Context, domain.UserID) (domain.UserInfo, error)) *MockUsersUseCase_CurrentUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockUsersUseCase) Delete(ctx context.Context, id domain.UserID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersUseCase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUsersUseCase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.UserID
func (_e *MockUsersUseCase_Expecter) Delete(ctx interface{}, id interface{}) *MockUsersUseCase_Delete_Call {
	return &MockUsersUseCase_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockUsersUseCase_Delete_Call) Run(run func(ctx context.Context, id domain.UserID)) *MockUsersUseCase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID))
	})
	return _c
}

func (_c *MockUsersUseCase_Delete_Call) Return(_a0 error) *MockUsersUseCase_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersUseCase_Delete_Call) RunAndReturn(run func(context.Context, domain.UserID) error) *MockUsersUseCase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Disable2FA provides a mock function with given fields: ctx, userID, emailCode
func (_m *MockUsersUseCase) Disable2FA(ctx context.Context, userID domain.UserID, emailCode string) error {
	ret := _m.Called(ctx, userID, emailCode)

	if len(ret) == 0 {
		panic("no return value specified for Disable2FA")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, string) error); ok {
		r0 = rf(ctx, userID, emailCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersUseCase_Disable2FA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disable2FA'
type MockUsersUseCase_Disable2FA_Call struct {
	*mock.Call
}

// Disable2FA is a helper method to define mock.On call
//   - ctx context.Context
//   - userID domain.UserID
//   - emailCode string
func (_e *MockUsersUseCase_Expecter) Disable2FA(ctx interface{}, userID interface{}, emailCode interface{}) *MockUsersUseCase_Disable2FA_Call {
	return &MockUsersUseCase_Disable2FA_Call{Call: _e.mock.On("Disable2FA", ctx, userID, emailCode)}
}

func (_c *MockUsersUseCase_Disable2FA_Call) Run(run func(ctx context.Context, userID domain.UserID, emailCode string)) *MockUsersUseCase_Disable2FA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(string))
	})
	return _c
}

func (_c *MockUsersUseCase_Disable2FA_Call) Return(_a0 error) *MockUsersUseCase_Disable2FA_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersUseCase_Disable2FA_Call) RunAndReturn(run func(context.Context, domain.UserID, string) error) *MockUsersUseCase_Disable2FA_Call {
	_c.Call.Return(run)
	return _c
}

// ForgotPassword provides a mock function with given fields: ctx, email
func (_m *MockUsersUseCase) ForgotPassword(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ForgotPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersUseCase_ForgotPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForgotPassword'
type MockUsersUseCase_ForgotPassword_Call struct {
	*mock.Call
}

// ForgotPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUsersUseCase_Expecter) ForgotPassword(ctx interface{}, email interface{}) *MockUsersUseCase_ForgotPassword_Call {
	return &MockUsersUseCase_ForgotPassword_Call{Call: _e.mock.On("ForgotPassword", ctx, email)}
}

func (_c *MockUsersUseCase_ForgotPassword_Call) Run(run func(ctx context.Context, email string)) *MockUsersUseCase_ForgotPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUsersUseCase_ForgotPassword_Call) Return(_a0 error) *MockUsersUseCase_ForgotPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersUseCase_ForgotPassword_Call) RunAndReturn(run func(context.Context, string) error) *MockUsersUseCase_ForgotPassword_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockUsersUseCase) GetByID(ctx context.Context, id domain.UserID) (domain.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) (domain.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) domain.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersUseCase_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUsersUseCase_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.UserID
func (_e *MockUsersUseCase_Expecter) GetByID(ctx interface{}, id interface{}) *MockUsersUseCase_GetByID_Call {
	return &MockUsersUseCase_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockUsersUseCase_GetByID_Call) Run(run func(ctx context.Context, id domain.UserID)) *MockUsersUseCase_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID))
	})
	return _c
}

func (_c *MockUsersUseCase_GetByID_Call) Return(_a0 domain.User, _a1 error) *MockUsersUseCase_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersUseCase_GetByID_Call) RunAndReturn(run func(context.Context, domain.UserID) (domain.User, error)) *MockUsersUseCase_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockUsersUseCase) List(ctx context.Context) ([]domain.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersUseCase_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockUsersUseCase_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUsersUseCase_Expecter) List(ctx interface{}) *MockUsersUseCase_List_Call {
	return &MockUsersUseCase_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockUsersUseCase_List_Call) Run(run func(ctx context.Context)) *MockUsersUseCase_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUsersUseCase_List_Call) Return(_a0 []domain.User, _a1 error) *MockUsersUseCase_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersUseCase_List_Call) RunAndReturn(run func(context.Context) ([]domain.User, error)) *MockUsersUseCase_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListForTeamAdmin provides a mock function with given fields: ctx, teamID
func (_m *MockUsersUseCase) ListForTeamAdmin(ctx context.Context, teamID domain.TeamID) ([]domain.User, error) {
	ret := _m.Called(ctx, teamID)

	if len(ret) == 0 {
		panic("no return value specified for ListForTeamAdmin")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamID) ([]domain.User, error)); ok {
		return rf(ctx, teamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamID) []domain.User); ok {
		r0 = rf(ctx, teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.TeamID) error); ok {
		r1 = rf(ctx, teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersUseCase_ListForTeamAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListForTeamAdmin'
type MockUsersUseCase_ListForTeamAdmin_Call struct {
	*mock.Call
}

// ListForTeamAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - teamID domain.TeamID
func (_e *MockUsersUseCase_Expecter) ListForTeamAdmin(ctx interface{}, teamID interface{}) *MockUsersUseCase_ListForTeamAdmin_Call {
	return &MockUsersUseCase_ListForTeamAdmin_Call{Call: _e.mock.On("ListForTeamAdmin", ctx, teamID)}
}

func (_c *MockUsersUseCase_ListForTeamAdmin_Call) Run(run func(ctx context.Context, teamID domain.TeamID)) *MockUsersUseCase_ListForTeamAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TeamID))
	})
	return _c
}

func (_c *MockUsersUseCase_ListForTeamAdmin_Call) Return(_a0 []domain.User, _a1 error) *MockUsersUseCase_ListForTeamAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersUseCase_ListForTeamAdmin_Call) RunAndReturn(run func(context.Context, domain.TeamID) ([]domain.User, error)) *MockUsersUseCase_ListForTeamAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *MockUsersUseCase) Login(ctx context.Context, username string, password string) (string, string, string, bool, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 string
	var r2 string
	var r3 bool
	var r4 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, string, string, bool, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) string); ok {
		r2 = rf(ctx, username, password)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, string) bool); ok {
		r3 = rf(ctx, username, password)
	} else {
		r3 = ret.Get(3).(bool)
	}

	if rf, ok := ret.Get(4).(func(context.Context, string, string) error); ok {
		r4 = rf(ctx, username, password)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// MockUsersUseCase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUsersUseCase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *MockUsersUseCase_Expecter) Login(ctx interface{}, username interface{}, password interface{}) *MockUsersUseCase_Login_Call {
	return &MockUsersUseCase_Login_Call{Call: _e.mock.On("Login", ctx, username, password)}
}

func (_c *MockUsersUseCase_Login_Call) Run(run func(ctx context.Context, username string, password string)) *MockUsersUseCase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUsersUseCase_Login_Call) Return(accessToken string, refreshToken string, sessionID string, isTmpPassword bool, err error) *MockUsersUseCase_Login_Call {
	_c.Call.Return(accessToken, refreshToken, sessionID, isTmpPassword, err)
	return _c
}

func (_c *MockUsersUseCase_Login_Call) RunAndReturn(run func(context.Context, string, string) (string, string, string, bool, error)) *MockUsersUseCase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// LoginReissue provides a mock function with given fields: ctx, currRefreshToken
func (_m *MockUsersUseCase) LoginReissue(ctx context.Context, currRefreshToken string) (string, string, error) {
	ret := _m.Called(ctx, currRefreshToken)

	if len(ret) == 0 {
		panic("no return value specified for LoginReissue")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, string, error)); ok {
		return rf(ctx, currRefreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, currRefreshToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, currRefreshToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, currRefreshToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUsersUseCase_LoginReissue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginReissue'
type MockUsersUseCase_LoginReissue_Call struct {
	*mock.Call
}

// LoginReissue is a helper method to define mock.On call
//   - ctx context.Context
//   - currRefreshToken string
func (_e *MockUsersUseCase_Expecter) LoginReissue(ctx interface{}, currRefreshToken interface{}) *MockUsersUseCase_LoginReissue_Call {
	return &MockUsersUseCase_LoginReissue_Call{Call: _e.mock.On("LoginReissue", ctx, currRefreshToken)}
}

func (_c *MockUsersUseCase_LoginReissue_Call) Run(run func(ctx context.Context, currRefreshToken string)) *MockUsersUseCase_LoginReissue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUsersUseCase_LoginReissue_Call) Return(accessToken string, refreshToken string, err error) *MockUsersUseCase_LoginReissue_Call {
	_c.Call.Return(accessToken, refreshToken, err)
	return _c
}

func (_c *MockUsersUseCase_LoginReissue_Call) RunAndReturn(run func(context.Context, string) (string, string, error)) *MockUsersUseCase_LoginReissue_Call {
	_c.Call.Return(run)
	return _c
}

// Reset2FA provides a mock function with given fields: ctx, userID, emailCode
func (_m *MockUsersUseCase) Reset2FA(ctx context.Context, userID domain.UserID, emailCode string) (string, string, string, error) {
	ret := _m.Called(ctx, userID, emailCode)

	if len(ret) == 0 {
		panic("no return value specified for Reset2FA")
	}

	var r0 string
	var r1 string
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, string) (string, string, string, error)); ok {
		return rf(ctx, userID, emailCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, string) string); ok {
		r0 = rf(ctx, userID, emailCode)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserID, string) string); ok {
		r1 = rf(ctx, userID, emailCode)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.UserID, string) string); ok {
		r2 = rf(ctx, userID, emailCode)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, domain.UserID, string) error); ok {
		r3 = rf(ctx, userID, emailCode)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockUsersUseCase_Reset2FA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset2FA'
type MockUsersUseCase_Reset2FA_Call struct {
	*mock.Call
}

// Reset2FA is a helper method to define mock.On call
//   - ctx context.Context
//   - userID domain.UserID
//   - emailCode string
func (_e *MockUsersUseCase_Expecter) Reset2FA(ctx interface{}, userID interface{}, emailCode interface{}) *MockUsersUseCase_Reset2FA_Call {
	return &MockUsersUseCase_Reset2FA_Call{Call: _e.mock.On("Reset2FA", ctx, userID, emailCode)}
}

func (_c *MockUsersUseCase_Reset2FA_Call) Run(run func(ctx context.Context, userID domain.UserID, emailCode string)) *MockUsersUseCase_Reset2FA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(string))
	})
	return _c
}

func (_c *MockUsersUseCase_Reset2FA_Call) Return(secret string, qrURL string, qrImage string, err error) *MockUsersUseCase_Reset2FA_Call {
	_c.Call.Return(secret, qrURL, qrImage, err)
	return _c
}

func (_c *MockUsersUseCase_Reset2FA_Call) RunAndReturn(run func(context.Context, domain.UserID, string) (string, string, string, error)) *MockUsersUseCase_Reset2FA_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function with given fields: ctx, token, newPassword
func (_m *MockUsersUseCase) ResetPassword(ctx context.Context, token string, newPassword string) error {
	ret := _m.Called(ctx, token, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersUseCase_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type MockUsersUseCase_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - newPassword string
func (_e *MockUsersUseCase_Expecter) ResetPassword(ctx interface{}, token interface{}, newPassword interface{}) *MockUsersUseCase_ResetPassword_Call {
	return &MockUsersUseCase_ResetPassword_Call{Call: _e.mock.On("ResetPassword", ctx, token, newPassword)}
}

func (_c *MockUsersUseCase_ResetPassword_Call) Run(run func(ctx context.Context, token string, newPassword string)) *MockUsersUseCase_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUsersUseCase_ResetPassword_Call) Return(_a0 error) *MockUsersUseCase_ResetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersUseCase_ResetPassword_Call) RunAndReturn(run func(context.Context, string, string) error) *MockUsersUseCase_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// Send2FACode provides a mock function with given fields: ctx, userID, action
func (_m *MockUsersUseCase) Send2FACode(ctx context.Context, userID domain.UserID, action string) error {
	ret := _m.Called(ctx, userID, action)

	if len(ret) == 0 {
		panic("no return value specified for Send2FACode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, string) error); ok {
		r0 = rf(ctx, userID, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersUseCase_Send2FACode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send2FACode'
type MockUsersUseCase_Send2FACode_Call struct {
	*mock.Call
}

// Send2FACode is a helper method to define mock.On call
//   - ctx context.Context
//   - userID domain.UserID
//   - action string
func (_e *MockUsersUseCase_Expecter) Send2FACode(ctx interface{}, userID interface{}, action interface{}) *MockUsersUseCase_Send2FACode_Call {
	return &MockUsersUseCase_Send2FACode_Call{Call: _e.mock.On("Send2FACode", ctx, userID, action)}
}

func (_c *MockUsersUseCase_Send2FACode_Call) Run(run func(ctx context.Context, userID domain.UserID, action string)) *MockUsersUseCase_Send2FACode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(string))
	})
	return _c
}

func (_c *MockUsersUseCase_Send2FACode_Call) Return(_a0 error) *MockUsersUseCase_Send2FACode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersUseCase_Send2FACode_Call) RunAndReturn(run func(context.Context, domain.UserID, string) error) *MockUsersUseCase_Send2FACode_Call {
	_c.Call.Return(run)
	return _c
}

// SetActiveStatus provides a mock function with given fields: ctx, id, isActive
func (_m *MockUsersUseCase) SetActiveStatus(ctx context.Context, id domain.UserID, isActive bool) (domain.User, error) {
	ret := _m.Called(ctx, id, isActive)

	if len(ret) == 0 {
		panic("no return value specified for SetActiveStatus")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, bool) (domain.User, error)); ok {
		return rf(ctx, id, isActive)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, bool) domain.User); ok {
		r0 = rf(ctx, id, isActive)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserID, bool) error); ok {
		r1 = rf(ctx, id, isActive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersUseCase_SetActiveStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetActiveStatus'
type MockUsersUseCase_SetActiveStatus_Call struct {
	*mock.Call
}

// SetActiveStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.UserID
//   - isActive bool
func (_e *MockUsersUseCase_Expecter) SetActiveStatus(ctx interface{}, id interface{}, isActive interface{}) *MockUsersUseCase_SetActiveStatus_Call {
	return &MockUsersUseCase_SetActiveStatus_Call{Call: _e.mock.On("SetActiveStatus", ctx, id, isActive)}
}

func (_c *MockUsersUseCase_SetActiveStatus_Call) Run(run func(ctx context.Context, id domain.UserID, isActive bool)) *MockUsersUseCase_SetActiveStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(bool))
	})
	return _c
}

func (_c *MockUsersUseCase_SetActiveStatus_Call) Return(_a0 domain.User, _a1 error) *MockUsersUseCase_SetActiveStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersUseCase_SetActiveStatus_Call) RunAndReturn(run func(context.Context, domain.UserID, bool) (domain.User, error)) *MockUsersUseCase_SetActiveStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SetSuperuserStatus provides a mock function with given fields: ctx, id, isSuperuser
func (_m *MockUsersUseCase) SetSuperuserStatus(ctx context.Context, id domain.UserID, isSuperuser bool) (domain.User, error) {
	ret := _m.Called(ctx, id, isSuperuser)

	if len(ret) == 0 {
		panic("no return value specified for SetSuperuserStatus")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, bool) (domain.User, error)); ok {
		return rf(ctx, id, isSuperuser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, bool) domain.User); ok {
		r0 = rf(ctx, id, isSuperuser)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserID, bool) error); ok {
		r1 = rf(ctx, id, isSuperuser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersUseCase_SetSuperuserStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSuperuserStatus'
type MockUsersUseCase_SetSuperuserStatus_Call struct {
	*mock.Call
}

// SetSuperuserStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.UserID
//   - isSuperuser bool
func (_e *MockUsersUseCase_Expecter) SetSuperuserStatus(ctx interface{}, id interface{}, isSuperuser interface{}) *MockUsersUseCase_SetSuperuserStatus_Call {
	return &MockUsersUseCase_SetSuperuserStatus_Call{Call: _e.mock.On("SetSuperuserStatus", ctx, id, isSuperuser)}
}

func (_c *MockUsersUseCase_SetSuperuserStatus_Call) Run(run func(ctx context.Context, id domain.UserID, isSuperuser bool)) *MockUsersUseCase_SetSuperuserStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(bool))
	})
	return _c
}

func (_c *MockUsersUseCase_SetSuperuserStatus_Call) Return(_a0 domain.User, _a1 error) *MockUsersUseCase_SetSuperuserStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersUseCase_SetSuperuserStatus_Call) RunAndReturn(run func(context.Context, domain.UserID, bool) (domain.User, error)) *MockUsersUseCase_SetSuperuserStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Setup2FA provides a mock function with given fields: ctx, userID
func (_m *MockUsersUseCase) Setup2FA(ctx context.Context, userID domain.UserID) (string, string, string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Setup2FA")
	}

	var r0 string
	var r1 string
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) (string, string, string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserID) string); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.UserID) string); ok {
		r2 = rf(ctx, userID)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, domain.UserID) error); ok {
		r3 = rf(ctx, userID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockUsersUseCase_Setup2FA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup2FA'
type MockUsersUseCase_Setup2FA_Call struct {
	*mock.Call
}

// Setup2FA is a helper method to define mock.On call
//   - ctx context.Context
//   - userID domain.UserID
func (_e *MockUsersUseCase_Expecter) Setup2FA(ctx interface{}, userID interface{}) *MockUsersUseCase_Setup2FA_Call {
	return &MockUsersUseCase_Setup2FA_Call{Call: _e.mock.On("Setup2FA", ctx, userID)}
}

func (_c *MockUsersUseCase_Setup2FA_Call) Run(run func(ctx context.Context, userID domain.UserID)) *MockUsersUseCase_Setup2FA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID))
	})
	return _c
}

func (_c *MockUsersUseCase_Setup2FA_Call) Return(secret string, qrURL string, qrImage string, err error) *MockUsersUseCase_Setup2FA_Call {
	_c.Call.Return(secret, qrURL, qrImage, err)
	return _c
}

func (_c *MockUsersUseCase_Setup2FA_Call) RunAndReturn(run func(context.Context, domain.UserID) (string, string, string, error)) *MockUsersUseCase_Setup2FA_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, id, oldPassword, newPassword
func (_m *MockUsersUseCase) UpdatePassword(ctx context.Context, id domain.UserID, oldPassword string, newPassword string) error {
	ret := _m.Called(ctx, id, oldPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, string, string) error); ok {
		r0 = rf(ctx, id, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersUseCase_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type MockUsersUseCase_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.UserID
//   - oldPassword string
//   - newPassword string
func (_e *MockUsersUseCase_Expecter) UpdatePassword(ctx interface{}, id interface{}, oldPassword interface{}, newPassword interface{}) *MockUsersUseCase_UpdatePassword_Call {
	return &MockUsersUseCase_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, id, oldPassword, newPassword)}
}

func (_c *MockUsersUseCase_UpdatePassword_Call) Run(run func(ctx context.Context, id domain.UserID, oldPassword string, newPassword string)) *MockUsersUseCase_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUsersUseCase_UpdatePassword_Call) Return(_a0 error) *MockUsersUseCase_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersUseCase_UpdatePassword_Call) RunAndReturn(run func(context.Context, domain.UserID, string, string) error) *MockUsersUseCase_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// Verify2FA provides a mock function with given fields: ctx, code, sessionID
func (_m *MockUsersUseCase) Verify2FA(ctx context.Context, code string, sessionID string) (string, string, int, error) {
	ret := _m.Called(ctx, code, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Verify2FA")
	}

	var r0 string
	var r1 string
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, string, int, error)); ok {
		return rf(ctx, code, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, code, sessionID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, code, sessionID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) int); ok {
		r2 = rf(ctx, code, sessionID)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, string) error); ok {
		r3 = rf(ctx, code, sessionID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockUsersUseCase_Verify2FA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify2FA'
type MockUsersUseCase_Verify2FA_Call struct {
	*mock.Call
}

// Verify2FA is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - sessionID string
func (_e *MockUsersUseCase_Expecter) Verify2FA(ctx interface{}, code interface{}, sessionID interface{}) *MockUsersUseCase_Verify2FA_Call {
	return &MockUsersUseCase_Verify2FA_Call{Call: _e.mock.On("Verify2FA", ctx, code, sessionID)}
}

func (_c *MockUsersUseCase_Verify2FA_Call) Run(run func(ctx context.Context, code string, sessionID string)) *MockUsersUseCase_Verify2FA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUsersUseCase_Verify2FA_Call) Return(accessToken string, refreshToken string, expiresIn int, err error) *MockUsersUseCase_Verify2FA_Call {
	_c.Call.Return(accessToken, refreshToken, expiresIn, err)
	return _c
}

func (_c *MockUsersUseCase_Verify2FA_Call) RunAndReturn(run func(context.Context, string, string) (string, string, int, error)) *MockUsersUseCase_Verify2FA_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersUseCase creates a new instance of MockUsersUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersUseCase {
	mock := &MockUsersUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
