// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockIssuesRepository is an autogenerated mock type for the IssuesRepository type
type MockIssuesRepository struct {
	mock.Mock
}

type MockIssuesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIssuesRepository) EXPECT() *MockIssuesRepository_Expecter {
	return &MockIssuesRepository_Expecter{mock: &_m.Mock}
}

// CountForLevels provides a mock function with given fields: ctx, projectID, period
func (_m *MockIssuesRepository) CountForLevels(ctx context.Context, projectID domain.ProjectID, period time.Duration) (map[domain.IssueLevel]uint64, error) {
	ret := _m.Called(ctx, projectID, period)

	if len(ret) == 0 {
		panic("no return value specified for CountForLevels")
	}

	var r0 map[domain.IssueLevel]uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, time.Duration) (map[domain.IssueLevel]uint64, error)); ok {
		return rf(ctx, projectID, period)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, time.Duration) map[domain.IssueLevel]uint64); ok {
		r0 = rf(ctx, projectID, period)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[domain.IssueLevel]uint64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, time.Duration) error); ok {
		r1 = rf(ctx, projectID, period)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuesRepository_CountForLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountForLevels'
type MockIssuesRepository_CountForLevels_Call struct {
	*mock.Call
}

// CountForLevels is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - period time.Duration
func (_e *MockIssuesRepository_Expecter) CountForLevels(ctx interface{}, projectID interface{}, period interface{}) *MockIssuesRepository_CountForLevels_Call {
	return &MockIssuesRepository_CountForLevels_Call{Call: _e.mock.On("CountForLevels", ctx, projectID, period)}
}

func (_c *MockIssuesRepository_CountForLevels_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, period time.Duration)) *MockIssuesRepository_CountForLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockIssuesRepository_CountForLevels_Call) Return(_a0 map[domain.IssueLevel]uint64, _a1 error) *MockIssuesRepository_CountForLevels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuesRepository_CountForLevels_Call) RunAndReturn(run func(context.Context, domain.ProjectID, time.Duration) (map[domain.IssueLevel]uint64, error)) *MockIssuesRepository_CountForLevels_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockIssuesRepository) GetByID(ctx context.Context, id domain.IssueID) (domain.Issue, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Issue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueID) (domain.Issue, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueID) domain.Issue); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Issue)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.IssueID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuesRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIssuesRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.IssueID
func (_e *MockIssuesRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockIssuesRepository_GetByID_Call {
	return &MockIssuesRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockIssuesRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.IssueID)) *MockIssuesRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.IssueID))
	})
	return _c
}

func (_c *MockIssuesRepository_GetByID_Call) Return(_a0 domain.Issue, _a1 error) *MockIssuesRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuesRepository_GetByID_Call) RunAndReturn(run func(context.Context, domain.IssueID) (domain.Issue, error)) *MockIssuesRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByFingerprints provides a mock function with given fields: ctx, fingerprints
func (_m *MockIssuesRepository) ListByFingerprints(ctx context.Context, fingerprints []string) ([]domain.Issue, error) {
	ret := _m.Called(ctx, fingerprints)

	if len(ret) == 0 {
		panic("no return value specified for ListByFingerprints")
	}

	var r0 []domain.Issue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]domain.Issue, error)); ok {
		return rf(ctx, fingerprints)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []domain.Issue); ok {
		r0 = rf(ctx, fingerprints)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, fingerprints)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuesRepository_ListByFingerprints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByFingerprints'
type MockIssuesRepository_ListByFingerprints_Call struct {
	*mock.Call
}

// ListByFingerprints is a helper method to define mock.On call
//   - ctx context.Context
//   - fingerprints []string
func (_e *MockIssuesRepository_Expecter) ListByFingerprints(ctx interface{}, fingerprints interface{}) *MockIssuesRepository_ListByFingerprints_Call {
	return &MockIssuesRepository_ListByFingerprints_Call{Call: _e.mock.On("ListByFingerprints", ctx, fingerprints)}
}

func (_c *MockIssuesRepository_ListByFingerprints_Call) Run(run func(ctx context.Context, fingerprints []string)) *MockIssuesRepository_ListByFingerprints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockIssuesRepository_ListByFingerprints_Call) Return(_a0 []domain.Issue, _a1 error) *MockIssuesRepository_ListByFingerprints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuesRepository_ListByFingerprints_Call) RunAndReturn(run func(context.Context, []string) ([]domain.Issue, error)) *MockIssuesRepository_ListByFingerprints_Call {
	_c.Call.Return(run)
	return _c
}

// ListExtended provides a mock function with given fields: ctx, filter
func (_m *MockIssuesRepository) ListExtended(ctx context.Context, filter *domain.ListIssuesFilter) ([]domain.IssueExtended, uint64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListExtended")
	}

	var r0 []domain.IssueExtended
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListIssuesFilter) ([]domain.IssueExtended, uint64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListIssuesFilter) []domain.IssueExtended); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.IssueExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.ListIssuesFilter) uint64); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *domain.ListIssuesFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIssuesRepository_ListExtended_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExtended'
type MockIssuesRepository_ListExtended_Call struct {
	*mock.Call
}

// ListExtended is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *domain.ListIssuesFilter
func (_e *MockIssuesRepository_Expecter) ListExtended(ctx interface{}, filter interface{}) *MockIssuesRepository_ListExtended_Call {
	return &MockIssuesRepository_ListExtended_Call{Call: _e.mock.On("ListExtended", ctx, filter)}
}

func (_c *MockIssuesRepository_ListExtended_Call) Run(run func(ctx context.Context, filter *domain.ListIssuesFilter)) *MockIssuesRepository_ListExtended_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.ListIssuesFilter))
	})
	return _c
}

func (_c *MockIssuesRepository_ListExtended_Call) Return(_a0 []domain.IssueExtended, _a1 uint64, _a2 error) *MockIssuesRepository_ListExtended_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIssuesRepository_ListExtended_Call) RunAndReturn(run func(context.Context, *domain.ListIssuesFilter) ([]domain.IssueExtended, uint64, error)) *MockIssuesRepository_ListExtended_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsNotified provides a mock function with given fields: ctx, issueID
func (_m *MockIssuesRepository) MarkAsNotified(ctx context.Context, issueID domain.IssueID) error {
	ret := _m.Called(ctx, issueID)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsNotified")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueID) error); ok {
		r0 = rf(ctx, issueID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIssuesRepository_MarkAsNotified_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsNotified'
type MockIssuesRepository_MarkAsNotified_Call struct {
	*mock.Call
}

// MarkAsNotified is a helper method to define mock.On call
//   - ctx context.Context
//   - issueID domain.IssueID
func (_e *MockIssuesRepository_Expecter) MarkAsNotified(ctx interface{}, issueID interface{}) *MockIssuesRepository_MarkAsNotified_Call {
	return &MockIssuesRepository_MarkAsNotified_Call{Call: _e.mock.On("MarkAsNotified", ctx, issueID)}
}

func (_c *MockIssuesRepository_MarkAsNotified_Call) Run(run func(ctx context.Context, issueID domain.IssueID)) *MockIssuesRepository_MarkAsNotified_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.IssueID))
	})
	return _c
}

func (_c *MockIssuesRepository_MarkAsNotified_Call) Return(_a0 error) *MockIssuesRepository_MarkAsNotified_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIssuesRepository_MarkAsNotified_Call) RunAndReturn(run func(context.Context, domain.IssueID) error) *MockIssuesRepository_MarkAsNotified_Call {
	_c.Call.Return(run)
	return _c
}

// MostFrequent provides a mock function with given fields: ctx, projectID, period, limit
func (_m *MockIssuesRepository) MostFrequent(ctx context.Context, projectID domain.ProjectID, period time.Duration, limit uint) ([]domain.IssueExtended, error) {
	ret := _m.Called(ctx, projectID, period, limit)

	if len(ret) == 0 {
		panic("no return value specified for MostFrequent")
	}

	var r0 []domain.IssueExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, time.Duration, uint) ([]domain.IssueExtended, error)); ok {
		return rf(ctx, projectID, period, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, time.Duration, uint) []domain.IssueExtended); ok {
		r0 = rf(ctx, projectID, period, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.IssueExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, time.Duration, uint) error); ok {
		r1 = rf(ctx, projectID, period, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuesRepository_MostFrequent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MostFrequent'
type MockIssuesRepository_MostFrequent_Call struct {
	*mock.Call
}

// MostFrequent is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - period time.Duration
//   - limit uint
func (_e *MockIssuesRepository_Expecter) MostFrequent(ctx interface{}, projectID interface{}, period interface{}, limit interface{}) *MockIssuesRepository_MostFrequent_Call {
	return &MockIssuesRepository_MostFrequent_Call{Call: _e.mock.On("MostFrequent", ctx, projectID, period, limit)}
}

func (_c *MockIssuesRepository_MostFrequent_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, period time.Duration, limit uint)) *MockIssuesRepository_MostFrequent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(time.Duration), args[3].(uint))
	})
	return _c
}

func (_c *MockIssuesRepository_MostFrequent_Call) Return(_a0 []domain.IssueExtended, _a1 error) *MockIssuesRepository_MostFrequent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuesRepository_MostFrequent_Call) RunAndReturn(run func(context.Context, domain.ProjectID, time.Duration, uint) ([]domain.IssueExtended, error)) *MockIssuesRepository_MostFrequent_Call {
	_c.Call.Return(run)
	return _c
}

// RecentIssues provides a mock function with given fields: ctx, limit
func (_m *MockIssuesRepository) RecentIssues(ctx context.Context, limit uint) ([]domain.IssueExtended, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for RecentIssues")
	}

	var r0 []domain.IssueExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]domain.IssueExtended, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []domain.IssueExtended); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.IssueExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuesRepository_RecentIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecentIssues'
type MockIssuesRepository_RecentIssues_Call struct {
	*mock.Call
}

// RecentIssues is a helper method to define mock.On call
//   - ctx context.Context
//   - limit uint
func (_e *MockIssuesRepository_Expecter) RecentIssues(ctx interface{}, limit interface{}) *MockIssuesRepository_RecentIssues_Call {
	return &MockIssuesRepository_RecentIssues_Call{Call: _e.mock.On("RecentIssues", ctx, limit)}
}

func (_c *MockIssuesRepository_RecentIssues_Call) Run(run func(ctx context.Context, limit uint)) *MockIssuesRepository_RecentIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockIssuesRepository_RecentIssues_Call) Return(_a0 []domain.IssueExtended, _a1 error) *MockIssuesRepository_RecentIssues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuesRepository_RecentIssues_Call) RunAndReturn(run func(context.Context, uint) ([]domain.IssueExtended, error)) *MockIssuesRepository_RecentIssues_Call {
	_c.Call.Return(run)
	return _c
}

// Timeseries provides a mock function with given fields: ctx, filter
func (_m *MockIssuesRepository) Timeseries(ctx context.Context, filter *domain.IssueTimeseriesFilter) ([]domain.Timeseries, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Timeseries")
	}

	var r0 []domain.Timeseries
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.IssueTimeseriesFilter) ([]domain.Timeseries, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.IssueTimeseriesFilter) []domain.Timeseries); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Timeseries)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.IssueTimeseriesFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuesRepository_Timeseries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Timeseries'
type MockIssuesRepository_Timeseries_Call struct {
	*mock.Call
}

// Timeseries is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *domain.IssueTimeseriesFilter
func (_e *MockIssuesRepository_Expecter) Timeseries(ctx interface{}, filter interface{}) *MockIssuesRepository_Timeseries_Call {
	return &MockIssuesRepository_Timeseries_Call{Call: _e.mock.On("Timeseries", ctx, filter)}
}

func (_c *MockIssuesRepository_Timeseries_Call) Run(run func(ctx context.Context, filter *domain.IssueTimeseriesFilter)) *MockIssuesRepository_Timeseries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.IssueTimeseriesFilter))
	})
	return _c
}

func (_c *MockIssuesRepository_Timeseries_Call) Return(_a0 []domain.Timeseries, _a1 error) *MockIssuesRepository_Timeseries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuesRepository_Timeseries_Call) RunAndReturn(run func(context.Context, *domain.IssueTimeseriesFilter) ([]domain.Timeseries, error)) *MockIssuesRepository_Timeseries_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, issueID, status
func (_m *MockIssuesRepository) UpdateStatus(ctx context.Context, issueID domain.IssueID, status domain.IssueStatus) error {
	ret := _m.Called(ctx, issueID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueID, domain.IssueStatus) error); ok {
		r0 = rf(ctx, issueID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIssuesRepository_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockIssuesRepository_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - issueID domain.IssueID
//   - status domain.IssueStatus
func (_e *MockIssuesRepository_Expecter) UpdateStatus(ctx interface{}, issueID interface{}, status interface{}) *MockIssuesRepository_UpdateStatus_Call {
	return &MockIssuesRepository_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, issueID, status)}
}

func (_c *MockIssuesRepository_UpdateStatus_Call) Run(run func(ctx context.Context, issueID domain.IssueID, status domain.IssueStatus)) *MockIssuesRepository_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.IssueID), args[2].(domain.IssueStatus))
	})
	return _c
}

func (_c *MockIssuesRepository_UpdateStatus_Call) Return(_a0 error) *MockIssuesRepository_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIssuesRepository_UpdateStatus_Call) RunAndReturn(run func(context.Context, domain.IssueID, domain.IssueStatus) error) *MockIssuesRepository_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertIssue provides a mock function with given fields: ctx, issue
func (_m *MockIssuesRepository) UpsertIssue(ctx context.Context, issue domain.IssueDTO) (domain.IssueUpsertResult, error) {
	ret := _m.Called(ctx, issue)

	if len(ret) == 0 {
		panic("no return value specified for UpsertIssue")
	}

	var r0 domain.IssueUpsertResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueDTO) (domain.IssueUpsertResult, error)); ok {
		return rf(ctx, issue)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueDTO) domain.IssueUpsertResult); ok {
		r0 = rf(ctx, issue)
	} else {
		r0 = ret.Get(0).(domain.IssueUpsertResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.IssueDTO) error); ok {
		r1 = rf(ctx, issue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuesRepository_UpsertIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertIssue'
type MockIssuesRepository_UpsertIssue_Call struct {
	*mock.Call
}

// UpsertIssue is a helper method to define mock.On call
//   - ctx context.Context
//   - issue domain.IssueDTO
func (_e *MockIssuesRepository_Expecter) UpsertIssue(ctx interface{}, issue interface{}) *MockIssuesRepository_UpsertIssue_Call {
	return &MockIssuesRepository_UpsertIssue_Call{Call: _e.mock.On("UpsertIssue", ctx, issue)}
}

func (_c *MockIssuesRepository_UpsertIssue_Call) Run(run func(ctx context.Context, issue domain.IssueDTO)) *MockIssuesRepository_UpsertIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.IssueDTO))
	})
	return _c
}

func (_c *MockIssuesRepository_UpsertIssue_Call) Return(_a0 domain.IssueUpsertResult, _a1 error) *MockIssuesRepository_UpsertIssue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuesRepository_UpsertIssue_Call) RunAndReturn(run func(context.Context, domain.IssueDTO) (domain.IssueUpsertResult, error)) *MockIssuesRepository_UpsertIssue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIssuesRepository creates a new instance of MockIssuesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIssuesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIssuesRepository {
	mock := &MockIssuesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
