// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockAnalyticsUseCase is an autogenerated mock type for the AnalyticsUseCase type
type MockAnalyticsUseCase struct {
	mock.Mock
}

type MockAnalyticsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAnalyticsUseCase) EXPECT() *MockAnalyticsUseCase_Expecter {
	return &MockAnalyticsUseCase_Expecter{mock: &_m.Mock}
}

// CompareReleases provides a mock function with given fields: ctx, projectID, baseVersion, targetVersion
func (_m *MockAnalyticsUseCase) CompareReleases(ctx context.Context, projectID domain.ProjectID, baseVersion string, targetVersion string) (domain.ReleaseComparison, error) {
	ret := _m.Called(ctx, projectID, baseVersion, targetVersion)

	if len(ret) == 0 {
		panic("no return value specified for CompareReleases")
	}

	var r0 domain.ReleaseComparison
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, string) (domain.ReleaseComparison, error)); ok {
		return rf(ctx, projectID, baseVersion, targetVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, string) domain.ReleaseComparison); ok {
		r0 = rf(ctx, projectID, baseVersion, targetVersion)
	} else {
		r0 = ret.Get(0).(domain.ReleaseComparison)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, string) error); ok {
		r1 = rf(ctx, projectID, baseVersion, targetVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAnalyticsUseCase_CompareReleases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompareReleases'
type MockAnalyticsUseCase_CompareReleases_Call struct {
	*mock.Call
}

// CompareReleases is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - baseVersion string
//   - targetVersion string
func (_e *MockAnalyticsUseCase_Expecter) CompareReleases(ctx interface{}, projectID interface{}, baseVersion interface{}, targetVersion interface{}) *MockAnalyticsUseCase_CompareReleases_Call {
	return &MockAnalyticsUseCase_CompareReleases_Call{Call: _e.mock.On("CompareReleases", ctx, projectID, baseVersion, targetVersion)}
}

func (_c *MockAnalyticsUseCase_CompareReleases_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, baseVersion string, targetVersion string)) *MockAnalyticsUseCase_CompareReleases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockAnalyticsUseCase_CompareReleases_Call) Return(_a0 domain.ReleaseComparison, _a1 error) *MockAnalyticsUseCase_CompareReleases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAnalyticsUseCase_CompareReleases_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string, string) (domain.ReleaseComparison, error)) *MockAnalyticsUseCase_CompareReleases_Call {
	_c.Call.Return(run)
	return _c
}

// GetErrorsByTime provides a mock function with given fields: ctx, projectID, release, period, granularity, levels, groupBy
func (_m *MockAnalyticsUseCase) GetErrorsByTime(ctx context.Context, projectID domain.ProjectID, release string, period time.Duration, granularity time.Duration, levels []domain.IssueLevel, groupBy domain.EventTimeseriesGroup) ([]domain.Timeseries, error) {
	ret := _m.Called(ctx, projectID, release, period, granularity, levels, groupBy)

	if len(ret) == 0 {
		panic("no return value specified for GetErrorsByTime")
	}

	var r0 []domain.Timeseries
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, time.Duration, time.Duration, []domain.IssueLevel, domain.EventTimeseriesGroup) ([]domain.Timeseries, error)); ok {
		return rf(ctx, projectID, release, period, granularity, levels, groupBy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, time.Duration, time.Duration, []domain.IssueLevel, domain.EventTimeseriesGroup) []domain.Timeseries); ok {
		r0 = rf(ctx, projectID, release, period, granularity, levels, groupBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Timeseries)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, time.Duration, time.Duration, []domain.IssueLevel, domain.EventTimeseriesGroup) error); ok {
		r1 = rf(ctx, projectID, release, period, granularity, levels, groupBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAnalyticsUseCase_GetErrorsByTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetErrorsByTime'
type MockAnalyticsUseCase_GetErrorsByTime_Call struct {
	*mock.Call
}

// GetErrorsByTime is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - release string
//   - period time.Duration
//   - granularity time.Duration
//   - levels []domain.IssueLevel
//   - groupBy domain.EventTimeseriesGroup
func (_e *MockAnalyticsUseCase_Expecter) GetErrorsByTime(ctx interface{}, projectID interface{}, release interface{}, period interface{}, granularity interface{}, levels interface{}, groupBy interface{}) *MockAnalyticsUseCase_GetErrorsByTime_Call {
	return &MockAnalyticsUseCase_GetErrorsByTime_Call{Call: _e.mock.On("GetErrorsByTime", ctx, projectID, release, period, granularity, levels, groupBy)}
}

func (_c *MockAnalyticsUseCase_GetErrorsByTime_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, release string, period time.Duration, granularity time.Duration, levels []domain.IssueLevel, groupBy domain.EventTimeseriesGroup)) *MockAnalyticsUseCase_GetErrorsByTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string), args[3].(time.Duration), args[4].(time.Duration), args[5].([]domain.IssueLevel), args[6].(domain.EventTimeseriesGroup))
	})
	return _c
}

func (_c *MockAnalyticsUseCase_GetErrorsByTime_Call) Return(_a0 []domain.Timeseries, _a1 error) *MockAnalyticsUseCase_GetErrorsByTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAnalyticsUseCase_GetErrorsByTime_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string, time.Duration, time.Duration, []domain.IssueLevel, domain.EventTimeseriesGroup) ([]domain.Timeseries, error)) *MockAnalyticsUseCase_GetErrorsByTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetReleaseDetails provides a mock function with given fields: ctx, projectID, version, topLimit
func (_m *MockAnalyticsUseCase) GetReleaseDetails(ctx context.Context, projectID domain.ProjectID, version string, topLimit uint) (domain.ReleaseAnalyticsDetails, error) {
	ret := _m.Called(ctx, projectID, version, topLimit)

	if len(ret) == 0 {
		panic("no return value specified for GetReleaseDetails")
	}

	var r0 domain.ReleaseAnalyticsDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, uint) (domain.ReleaseAnalyticsDetails, error)); ok {
		return rf(ctx, projectID, version, topLimit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, uint) domain.ReleaseAnalyticsDetails); ok {
		r0 = rf(ctx, projectID, version, topLimit)
	} else {
		r0 = ret.Get(0).(domain.ReleaseAnalyticsDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, uint) error); ok {
		r1 = rf(ctx, projectID, version, topLimit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAnalyticsUseCase_GetReleaseDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReleaseDetails'
type MockAnalyticsUseCase_GetReleaseDetails_Call struct {
	*mock.Call
}

// GetReleaseDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - version string
//   - topLimit uint
func (_e *MockAnalyticsUseCase_Expecter) GetReleaseDetails(ctx interface{}, projectID interface{}, version interface{}, topLimit interface{}) *MockAnalyticsUseCase_GetReleaseDetails_Call {
	return &MockAnalyticsUseCase_GetReleaseDetails_Call{Call: _e.mock.On("GetReleaseDetails", ctx, projectID, version, topLimit)}
}

func (_c *MockAnalyticsUseCase_GetReleaseDetails_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, version string, topLimit uint)) *MockAnalyticsUseCase_GetReleaseDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string), args[3].(uint))
	})
	return _c
}

func (_c *MockAnalyticsUseCase_GetReleaseDetails_Call) Return(_a0 domain.ReleaseAnalyticsDetails, _a1 error) *MockAnalyticsUseCase_GetReleaseDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAnalyticsUseCase_GetReleaseDetails_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string, uint) (domain.ReleaseAnalyticsDetails, error)) *MockAnalyticsUseCase_GetReleaseDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSegments provides a mock function with given fields: ctx, projectID, release
func (_m *MockAnalyticsUseCase) GetUserSegments(ctx context.Context, projectID domain.ProjectID, release string) (domain.UserSegmentsAnalytics, error) {
	ret := _m.Called(ctx, projectID, release)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSegments")
	}

	var r0 domain.UserSegmentsAnalytics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) (domain.UserSegmentsAnalytics, error)); ok {
		return rf(ctx, projectID, release)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) domain.UserSegmentsAnalytics); ok {
		r0 = rf(ctx, projectID, release)
	} else {
		r0 = ret.Get(0).(domain.UserSegmentsAnalytics)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string) error); ok {
		r1 = rf(ctx, projectID, release)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAnalyticsUseCase_GetUserSegments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSegments'
type MockAnalyticsUseCase_GetUserSegments_Call struct {
	*mock.Call
}

// GetUserSegments is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - release string
func (_e *MockAnalyticsUseCase_Expecter) GetUserSegments(ctx interface{}, projectID interface{}, release interface{}) *MockAnalyticsUseCase_GetUserSegments_Call {
	return &MockAnalyticsUseCase_GetUserSegments_Call{Call: _e.mock.On("GetUserSegments", ctx, projectID, release)}
}

func (_c *MockAnalyticsUseCase_GetUserSegments_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, release string)) *MockAnalyticsUseCase_GetUserSegments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string))
	})
	return _c
}

func (_c *MockAnalyticsUseCase_GetUserSegments_Call) Return(_a0 domain.UserSegmentsAnalytics, _a1 error) *MockAnalyticsUseCase_GetUserSegments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAnalyticsUseCase_GetUserSegments_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string) (domain.UserSegmentsAnalytics, error)) *MockAnalyticsUseCase_GetUserSegments_Call {
	_c.Call.Return(run)
	return _c
}

// ListReleases provides a mock function with given fields: ctx, projectID
func (_m *MockAnalyticsUseCase) ListReleases(ctx context.Context, projectID domain.ProjectID) ([]domain.Release, map[string]domain.ReleaseStats, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListReleases")
	}

	var r0 []domain.Release
	var r1 map[string]domain.ReleaseStats
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) ([]domain.Release, map[string]domain.ReleaseStats, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) []domain.Release); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID) map[string]domain.ReleaseStats); ok {
		r1 = rf(ctx, projectID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]domain.ReleaseStats)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.ProjectID) error); ok {
		r2 = rf(ctx, projectID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAnalyticsUseCase_ListReleases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListReleases'
type MockAnalyticsUseCase_ListReleases_Call struct {
	*mock.Call
}

// ListReleases is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockAnalyticsUseCase_Expecter) ListReleases(ctx interface{}, projectID interface{}) *MockAnalyticsUseCase_ListReleases_Call {
	return &MockAnalyticsUseCase_ListReleases_Call{Call: _e.mock.On("ListReleases", ctx, projectID)}
}

func (_c *MockAnalyticsUseCase_ListReleases_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockAnalyticsUseCase_ListReleases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID))
	})
	return _c
}

func (_c *MockAnalyticsUseCase_ListReleases_Call) Return(_a0 []domain.Release, _a1 map[string]domain.ReleaseStats, _a2 error) *MockAnalyticsUseCase_ListReleases_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAnalyticsUseCase_ListReleases_Call) RunAndReturn(run func(context.Context, domain.ProjectID) ([]domain.Release, map[string]domain.ReleaseStats, error)) *MockAnalyticsUseCase_ListReleases_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAnalyticsUseCase creates a new instance of MockAnalyticsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAnalyticsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAnalyticsUseCase {
	mock := &MockAnalyticsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
