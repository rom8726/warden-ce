// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockSettingRepository is an autogenerated mock type for the SettingRepository type
type MockSettingRepository struct {
	mock.Mock
}

type MockSettingRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSettingRepository) EXPECT() *MockSettingRepository_Expecter {
	return &MockSettingRepository_Expecter{mock: &_m.Mock}
}

// DeleteByName provides a mock function with given fields: ctx, name
func (_m *MockSettingRepository) DeleteByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSettingRepository_DeleteByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByName'
type MockSettingRepository_DeleteByName_Call struct {
	*mock.Call
}

// DeleteByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockSettingRepository_Expecter) DeleteByName(ctx interface{}, name interface{}) *MockSettingRepository_DeleteByName_Call {
	return &MockSettingRepository_DeleteByName_Call{Call: _e.mock.On("DeleteByName", ctx, name)}
}

func (_c *MockSettingRepository_DeleteByName_Call) Run(run func(ctx context.Context, name string)) *MockSettingRepository_DeleteByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSettingRepository_DeleteByName_Call) Return(_a0 error) *MockSettingRepository_DeleteByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSettingRepository_DeleteByName_Call) RunAndReturn(run func(context.Context, string) error) *MockSettingRepository_DeleteByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockSettingRepository) GetByName(ctx context.Context, name string) (*domain.Setting, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *domain.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Setting, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Setting); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSettingRepository_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockSettingRepository_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockSettingRepository_Expecter) GetByName(ctx interface{}, name interface{}) *MockSettingRepository_GetByName_Call {
	return &MockSettingRepository_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockSettingRepository_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockSettingRepository_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSettingRepository_GetByName_Call) Return(_a0 *domain.Setting, _a1 error) *MockSettingRepository_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSettingRepository_GetByName_Call) RunAndReturn(run func(context.Context, string) (*domain.Setting, error)) *MockSettingRepository_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockSettingRepository) List(ctx context.Context) ([]*domain.Setting, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*domain.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Setting, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Setting); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSettingRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockSettingRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSettingRepository_Expecter) List(ctx interface{}) *MockSettingRepository_List_Call {
	return &MockSettingRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockSettingRepository_List_Call) Run(run func(ctx context.Context)) *MockSettingRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSettingRepository_List_Call) Return(_a0 []*domain.Setting, _a1 error) *MockSettingRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSettingRepository_List_Call) RunAndReturn(run func(context.Context) ([]*domain.Setting, error)) *MockSettingRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// SetByName provides a mock function with given fields: ctx, name, value, description
func (_m *MockSettingRepository) SetByName(ctx context.Context, name string, value interface{}, description string) error {
	ret := _m.Called(ctx, name, value, description)

	if len(ret) == 0 {
		panic("no return value specified for SetByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, string) error); ok {
		r0 = rf(ctx, name, value, description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSettingRepository_SetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetByName'
type MockSettingRepository_SetByName_Call struct {
	*mock.Call
}

// SetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - value interface{}
//   - description string
func (_e *MockSettingRepository_Expecter) SetByName(ctx interface{}, name interface{}, value interface{}, description interface{}) *MockSettingRepository_SetByName_Call {
	return &MockSettingRepository_SetByName_Call{Call: _e.mock.On("SetByName", ctx, name, value, description)}
}

func (_c *MockSettingRepository_SetByName_Call) Run(run func(ctx context.Context, name string, value interface{}, description string)) *MockSettingRepository_SetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(string))
	})
	return _c
}

func (_c *MockSettingRepository_SetByName_Call) Return(_a0 error) *MockSettingRepository_SetByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSettingRepository_SetByName_Call) RunAndReturn(run func(context.Context, string, interface{}, string) error) *MockSettingRepository_SetByName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSettingRepository creates a new instance of MockSettingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSettingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSettingRepository {
	mock := &MockSettingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
