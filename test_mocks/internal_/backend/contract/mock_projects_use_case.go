// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockProjectsUseCase is an autogenerated mock type for the ProjectsUseCase type
type MockProjectsUseCase struct {
	mock.Mock
}

type MockProjectsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectsUseCase) EXPECT() *MockProjectsUseCase_Expecter {
	return &MockProjectsUseCase_Expecter{mock: &_m.Mock}
}

// ArchiveProject provides a mock function with given fields: ctx, id
func (_m *MockProjectsUseCase) ArchiveProject(ctx context.Context, id domain.ProjectID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ArchiveProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProjectsUseCase_ArchiveProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArchiveProject'
type MockProjectsUseCase_ArchiveProject_Call struct {
	*mock.Call
}

// ArchiveProject is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.ProjectID
func (_e *MockProjectsUseCase_Expecter) ArchiveProject(ctx interface{}, id interface{}) *MockProjectsUseCase_ArchiveProject_Call {
	return &MockProjectsUseCase_ArchiveProject_Call{Call: _e.mock.On("ArchiveProject", ctx, id)}
}

func (_c *MockProjectsUseCase_ArchiveProject_Call) Run(run func(ctx context.Context, id domain.ProjectID)) *MockProjectsUseCase_ArchiveProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID))
	})
	return _c
}

func (_c *MockProjectsUseCase_ArchiveProject_Call) Return(_a0 error) *MockProjectsUseCase_ArchiveProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectsUseCase_ArchiveProject_Call) RunAndReturn(run func(context.Context, domain.ProjectID) error) *MockProjectsUseCase_ArchiveProject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProject provides a mock function with given fields: ctx, name, description, teamID
func (_m *MockProjectsUseCase) CreateProject(ctx context.Context, name string, description string, teamID *domain.TeamID) (domain.Project, error) {
	ret := _m.Called(ctx, name, description, teamID)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 domain.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.TeamID) (domain.Project, error)); ok {
		return rf(ctx, name, description, teamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.TeamID) domain.Project); ok {
		r0 = rf(ctx, name, description, teamID)
	} else {
		r0 = ret.Get(0).(domain.Project)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.TeamID) error); ok {
		r1 = rf(ctx, name, description, teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectsUseCase_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type MockProjectsUseCase_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - description string
//   - teamID *domain.TeamID
func (_e *MockProjectsUseCase_Expecter) CreateProject(ctx interface{}, name interface{}, description interface{}, teamID interface{}) *MockProjectsUseCase_CreateProject_Call {
	return &MockProjectsUseCase_CreateProject_Call{Call: _e.mock.On("CreateProject", ctx, name, description, teamID)}
}

func (_c *MockProjectsUseCase_CreateProject_Call) Run(run func(ctx context.Context, name string, description string, teamID *domain.TeamID)) *MockProjectsUseCase_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.TeamID))
	})
	return _c
}

func (_c *MockProjectsUseCase_CreateProject_Call) Return(_a0 domain.Project, _a1 error) *MockProjectsUseCase_CreateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectsUseCase_CreateProject_Call) RunAndReturn(run func(context.Context, string, string, *domain.TeamID) (domain.Project, error)) *MockProjectsUseCase_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// GeneralStats provides a mock function with given fields: ctx, id, period
func (_m *MockProjectsUseCase) GeneralStats(ctx context.Context, id domain.ProjectID, period time.Duration) (domain.GeneralProjectStats, error) {
	ret := _m.Called(ctx, id, period)

	if len(ret) == 0 {
		panic("no return value specified for GeneralStats")
	}

	var r0 domain.GeneralProjectStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, time.Duration) (domain.GeneralProjectStats, error)); ok {
		return rf(ctx, id, period)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, time.Duration) domain.GeneralProjectStats); ok {
		r0 = rf(ctx, id, period)
	} else {
		r0 = ret.Get(0).(domain.GeneralProjectStats)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, time.Duration) error); ok {
		r1 = rf(ctx, id, period)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectsUseCase_GeneralStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneralStats'
type MockProjectsUseCase_GeneralStats_Call struct {
	*mock.Call
}

// GeneralStats is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.ProjectID
//   - period time.Duration
func (_e *MockProjectsUseCase_Expecter) GeneralStats(ctx interface{}, id interface{}, period interface{}) *MockProjectsUseCase_GeneralStats_Call {
	return &MockProjectsUseCase_GeneralStats_Call{Call: _e.mock.On("GeneralStats", ctx, id, period)}
}

func (_c *MockProjectsUseCase_GeneralStats_Call) Run(run func(ctx context.Context, id domain.ProjectID, period time.Duration)) *MockProjectsUseCase_GeneralStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockProjectsUseCase_GeneralStats_Call) Return(_a0 domain.GeneralProjectStats, _a1 error) *MockProjectsUseCase_GeneralStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectsUseCase_GeneralStats_Call) RunAndReturn(run func(context.Context, domain.ProjectID, time.Duration) (domain.GeneralProjectStats, error)) *MockProjectsUseCase_GeneralStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectExtended provides a mock function with given fields: ctx, id
func (_m *MockProjectsUseCase) GetProjectExtended(ctx context.Context, id domain.ProjectID) (domain.ProjectExtended, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectExtended")
	}

	var r0 domain.ProjectExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) (domain.ProjectExtended, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) domain.ProjectExtended); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.ProjectExtended)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectsUseCase_GetProjectExtended_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectExtended'
type MockProjectsUseCase_GetProjectExtended_Call struct {
	*mock.Call
}

// GetProjectExtended is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.ProjectID
func (_e *MockProjectsUseCase_Expecter) GetProjectExtended(ctx interface{}, id interface{}) *MockProjectsUseCase_GetProjectExtended_Call {
	return &MockProjectsUseCase_GetProjectExtended_Call{Call: _e.mock.On("GetProjectExtended", ctx, id)}
}

func (_c *MockProjectsUseCase_GetProjectExtended_Call) Run(run func(ctx context.Context, id domain.ProjectID)) *MockProjectsUseCase_GetProjectExtended_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID))
	})
	return _c
}

func (_c *MockProjectsUseCase_GetProjectExtended_Call) Return(_a0 domain.ProjectExtended, _a1 error) *MockProjectsUseCase_GetProjectExtended_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectsUseCase_GetProjectExtended_Call) RunAndReturn(run func(context.Context, domain.ProjectID) (domain.ProjectExtended, error)) *MockProjectsUseCase_GetProjectExtended_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsByUserID provides a mock function with given fields: ctx, userID, isSuperuser
func (_m *MockProjectsUseCase) GetProjectsByUserID(ctx context.Context, userID domain.UserID, isSuperuser bool) ([]domain.ProjectExtended, error) {
	ret := _m.Called(ctx, userID, isSuperuser)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsByUserID")
	}

	var r0 []domain.ProjectExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, bool) ([]domain.ProjectExtended, error)); ok {
		return rf(ctx, userID, isSuperuser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, bool) []domain.ProjectExtended); ok {
		r0 = rf(ctx, userID, isSuperuser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProjectExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserID, bool) error); ok {
		r1 = rf(ctx, userID, isSuperuser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectsUseCase_GetProjectsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsByUserID'
type MockProjectsUseCase_GetProjectsByUserID_Call struct {
	*mock.Call
}

// GetProjectsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID domain.UserID
//   - isSuperuser bool
func (_e *MockProjectsUseCase_Expecter) GetProjectsByUserID(ctx interface{}, userID interface{}, isSuperuser interface{}) *MockProjectsUseCase_GetProjectsByUserID_Call {
	return &MockProjectsUseCase_GetProjectsByUserID_Call{Call: _e.mock.On("GetProjectsByUserID", ctx, userID, isSuperuser)}
}

func (_c *MockProjectsUseCase_GetProjectsByUserID_Call) Run(run func(ctx context.Context, userID domain.UserID, isSuperuser bool)) *MockProjectsUseCase_GetProjectsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(bool))
	})
	return _c
}

func (_c *MockProjectsUseCase_GetProjectsByUserID_Call) Return(_a0 []domain.ProjectExtended, _a1 error) *MockProjectsUseCase_GetProjectsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectsUseCase_GetProjectsByUserID_Call) RunAndReturn(run func(context.Context, domain.UserID, bool) ([]domain.ProjectExtended, error)) *MockProjectsUseCase_GetProjectsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockProjectsUseCase) List(ctx context.Context) ([]domain.ProjectExtended, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.ProjectExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.ProjectExtended, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.ProjectExtended); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProjectExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectsUseCase_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockProjectsUseCase_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectsUseCase_Expecter) List(ctx interface{}) *MockProjectsUseCase_List_Call {
	return &MockProjectsUseCase_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockProjectsUseCase_List_Call) Run(run func(ctx context.Context)) *MockProjectsUseCase_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProjectsUseCase_List_Call) Return(_a0 []domain.ProjectExtended, _a1 error) *MockProjectsUseCase_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectsUseCase_List_Call) RunAndReturn(run func(context.Context) ([]domain.ProjectExtended, error)) *MockProjectsUseCase_List_Call {
	_c.Call.Return(run)
	return _c
}

// RecentProjects provides a mock function with given fields: ctx
func (_m *MockProjectsUseCase) RecentProjects(ctx context.Context) ([]domain.ProjectExtended, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RecentProjects")
	}

	var r0 []domain.ProjectExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.ProjectExtended, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.ProjectExtended); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProjectExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectsUseCase_RecentProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecentProjects'
type MockProjectsUseCase_RecentProjects_Call struct {
	*mock.Call
}

// RecentProjects is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectsUseCase_Expecter) RecentProjects(ctx interface{}) *MockProjectsUseCase_RecentProjects_Call {
	return &MockProjectsUseCase_RecentProjects_Call{Call: _e.mock.On("RecentProjects", ctx)}
}

func (_c *MockProjectsUseCase_RecentProjects_Call) Run(run func(ctx context.Context)) *MockProjectsUseCase_RecentProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProjectsUseCase_RecentProjects_Call) Return(_a0 []domain.ProjectExtended, _a1 error) *MockProjectsUseCase_RecentProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectsUseCase_RecentProjects_Call) RunAndReturn(run func(context.Context) ([]domain.ProjectExtended, error)) *MockProjectsUseCase_RecentProjects_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInfo provides a mock function with given fields: ctx, id, name, description
func (_m *MockProjectsUseCase) UpdateInfo(ctx context.Context, id domain.ProjectID, name string, description string) (domain.ProjectExtended, error) {
	ret := _m.Called(ctx, id, name, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInfo")
	}

	var r0 domain.ProjectExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, string) (domain.ProjectExtended, error)); ok {
		return rf(ctx, id, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, string) domain.ProjectExtended); ok {
		r0 = rf(ctx, id, name, description)
	} else {
		r0 = ret.Get(0).(domain.ProjectExtended)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, string) error); ok {
		r1 = rf(ctx, id, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectsUseCase_UpdateInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInfo'
type MockProjectsUseCase_UpdateInfo_Call struct {
	*mock.Call
}

// UpdateInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.ProjectID
//   - name string
//   - description string
func (_e *MockProjectsUseCase_Expecter) UpdateInfo(ctx interface{}, id interface{}, name interface{}, description interface{}) *MockProjectsUseCase_UpdateInfo_Call {
	return &MockProjectsUseCase_UpdateInfo_Call{Call: _e.mock.On("UpdateInfo", ctx, id, name, description)}
}

func (_c *MockProjectsUseCase_UpdateInfo_Call) Run(run func(ctx context.Context, id domain.ProjectID, name string, description string)) *MockProjectsUseCase_UpdateInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockProjectsUseCase_UpdateInfo_Call) Return(_a0 domain.ProjectExtended, _a1 error) *MockProjectsUseCase_UpdateInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectsUseCase_UpdateInfo_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string, string) (domain.ProjectExtended, error)) *MockProjectsUseCase_UpdateInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProjectsUseCase creates a new instance of MockProjectsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectsUseCase {
	mock := &MockProjectsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
