// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockResolutionsRepository is an autogenerated mock type for the ResolutionsRepository type
type MockResolutionsRepository struct {
	mock.Mock
}

type MockResolutionsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResolutionsRepository) EXPECT() *MockResolutionsRepository_Expecter {
	return &MockResolutionsRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, resolutionDTO
func (_m *MockResolutionsRepository) Create(ctx context.Context, resolutionDTO domain.ResolutionDTO) (domain.Resolution, error) {
	ret := _m.Called(ctx, resolutionDTO)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Resolution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ResolutionDTO) (domain.Resolution, error)); ok {
		return rf(ctx, resolutionDTO)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ResolutionDTO) domain.Resolution); ok {
		r0 = rf(ctx, resolutionDTO)
	} else {
		r0 = ret.Get(0).(domain.Resolution)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ResolutionDTO) error); ok {
		r1 = rf(ctx, resolutionDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResolutionsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockResolutionsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - resolutionDTO domain.ResolutionDTO
func (_e *MockResolutionsRepository_Expecter) Create(ctx interface{}, resolutionDTO interface{}) *MockResolutionsRepository_Create_Call {
	return &MockResolutionsRepository_Create_Call{Call: _e.mock.On("Create", ctx, resolutionDTO)}
}

func (_c *MockResolutionsRepository_Create_Call) Run(run func(ctx context.Context, resolutionDTO domain.ResolutionDTO)) *MockResolutionsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ResolutionDTO))
	})
	return _c
}

func (_c *MockResolutionsRepository_Create_Call) Return(_a0 domain.Resolution, _a1 error) *MockResolutionsRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResolutionsRepository_Create_Call) RunAndReturn(run func(context.Context, domain.ResolutionDTO) (domain.Resolution, error)) *MockResolutionsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIssueID provides a mock function with given fields: ctx, issueID
func (_m *MockResolutionsRepository) GetByIssueID(ctx context.Context, issueID domain.IssueID) ([]domain.Resolution, error) {
	ret := _m.Called(ctx, issueID)

	if len(ret) == 0 {
		panic("no return value specified for GetByIssueID")
	}

	var r0 []domain.Resolution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueID) ([]domain.Resolution, error)); ok {
		return rf(ctx, issueID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueID) []domain.Resolution); ok {
		r0 = rf(ctx, issueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Resolution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.IssueID) error); ok {
		r1 = rf(ctx, issueID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResolutionsRepository_GetByIssueID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIssueID'
type MockResolutionsRepository_GetByIssueID_Call struct {
	*mock.Call
}

// GetByIssueID is a helper method to define mock.On call
//   - ctx context.Context
//   - issueID domain.IssueID
func (_e *MockResolutionsRepository_Expecter) GetByIssueID(ctx interface{}, issueID interface{}) *MockResolutionsRepository_GetByIssueID_Call {
	return &MockResolutionsRepository_GetByIssueID_Call{Call: _e.mock.On("GetByIssueID", ctx, issueID)}
}

func (_c *MockResolutionsRepository_GetByIssueID_Call) Run(run func(ctx context.Context, issueID domain.IssueID)) *MockResolutionsRepository_GetByIssueID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.IssueID))
	})
	return _c
}

func (_c *MockResolutionsRepository_GetByIssueID_Call) Return(_a0 []domain.Resolution, _a1 error) *MockResolutionsRepository_GetByIssueID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResolutionsRepository_GetByIssueID_Call) RunAndReturn(run func(context.Context, domain.IssueID) ([]domain.Resolution, error)) *MockResolutionsRepository_GetByIssueID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResolutionsRepository creates a new instance of MockResolutionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResolutionsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResolutionsRepository {
	mock := &MockResolutionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
