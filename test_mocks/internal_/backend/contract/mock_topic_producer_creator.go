// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	kafka "github.com/rom8726/warden/pkg/kafka"
	mock "github.com/stretchr/testify/mock"
)

// MockTopicProducerCreator is an autogenerated mock type for the TopicProducerCreator type
type MockTopicProducerCreator struct {
	mock.Mock
}

type MockTopicProducerCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTopicProducerCreator) EXPECT() *MockTopicProducerCreator_Expecter {
	return &MockTopicProducerCreator_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: topic
func (_m *MockTopicProducerCreator) Create(topic string) kafka.DataProducer {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 kafka.DataProducer
	if rf, ok := ret.Get(0).(func(string) kafka.DataProducer); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.DataProducer)
		}
	}

	return r0
}

// MockTopicProducerCreator_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTopicProducerCreator_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - topic string
func (_e *MockTopicProducerCreator_Expecter) Create(topic interface{}) *MockTopicProducerCreator_Create_Call {
	return &MockTopicProducerCreator_Create_Call{Call: _e.mock.On("Create", topic)}
}

func (_c *MockTopicProducerCreator_Create_Call) Run(run func(topic string)) *MockTopicProducerCreator_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTopicProducerCreator_Create_Call) Return(_a0 kafka.DataProducer) *MockTopicProducerCreator_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTopicProducerCreator_Create_Call) RunAndReturn(run func(string) kafka.DataProducer) *MockTopicProducerCreator_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTopicProducerCreator creates a new instance of MockTopicProducerCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTopicProducerCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTopicProducerCreator {
	mock := &MockTopicProducerCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
