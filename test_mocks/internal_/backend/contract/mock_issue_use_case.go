// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockIssueUseCase is an autogenerated mock type for the IssueUseCase type
type MockIssueUseCase struct {
	mock.Mock
}

type MockIssueUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIssueUseCase) EXPECT() *MockIssueUseCase_Expecter {
	return &MockIssueUseCase_Expecter{mock: &_m.Mock}
}

// ChangeStatus provides a mock function with given fields: ctx, id, status
func (_m *MockIssueUseCase) ChangeStatus(ctx context.Context, id domain.IssueID, status domain.IssueStatus) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for ChangeStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueID, domain.IssueStatus) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIssueUseCase_ChangeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeStatus'
type MockIssueUseCase_ChangeStatus_Call struct {
	*mock.Call
}

// ChangeStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.IssueID
//   - status domain.IssueStatus
func (_e *MockIssueUseCase_Expecter) ChangeStatus(ctx interface{}, id interface{}, status interface{}) *MockIssueUseCase_ChangeStatus_Call {
	return &MockIssueUseCase_ChangeStatus_Call{Call: _e.mock.On("ChangeStatus", ctx, id, status)}
}

func (_c *MockIssueUseCase_ChangeStatus_Call) Run(run func(ctx context.Context, id domain.IssueID, status domain.IssueStatus)) *MockIssueUseCase_ChangeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.IssueID), args[2].(domain.IssueStatus))
	})
	return _c
}

func (_c *MockIssueUseCase_ChangeStatus_Call) Return(_a0 error) *MockIssueUseCase_ChangeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIssueUseCase_ChangeStatus_Call) RunAndReturn(run func(context.Context, domain.IssueID, domain.IssueStatus) error) *MockIssueUseCase_ChangeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDWithChildren provides a mock function with given fields: ctx, id
func (_m *MockIssueUseCase) GetByIDWithChildren(ctx context.Context, id domain.IssueID) (domain.IssueExtendedWithChildren, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDWithChildren")
	}

	var r0 domain.IssueExtendedWithChildren
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueID) (domain.IssueExtendedWithChildren, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueID) domain.IssueExtendedWithChildren); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.IssueExtendedWithChildren)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.IssueID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssueUseCase_GetByIDWithChildren_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDWithChildren'
type MockIssueUseCase_GetByIDWithChildren_Call struct {
	*mock.Call
}

// GetByIDWithChildren is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.IssueID
func (_e *MockIssueUseCase_Expecter) GetByIDWithChildren(ctx interface{}, id interface{}) *MockIssueUseCase_GetByIDWithChildren_Call {
	return &MockIssueUseCase_GetByIDWithChildren_Call{Call: _e.mock.On("GetByIDWithChildren", ctx, id)}
}

func (_c *MockIssueUseCase_GetByIDWithChildren_Call) Run(run func(ctx context.Context, id domain.IssueID)) *MockIssueUseCase_GetByIDWithChildren_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.IssueID))
	})
	return _c
}

func (_c *MockIssueUseCase_GetByIDWithChildren_Call) Return(_a0 domain.IssueExtendedWithChildren, _a1 error) *MockIssueUseCase_GetByIDWithChildren_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssueUseCase_GetByIDWithChildren_Call) RunAndReturn(run func(context.Context, domain.IssueID) (domain.IssueExtendedWithChildren, error)) *MockIssueUseCase_GetByIDWithChildren_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *MockIssueUseCase) List(ctx context.Context, filter *domain.ListIssuesFilter) ([]domain.IssueExtended, uint64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.IssueExtended
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListIssuesFilter) ([]domain.IssueExtended, uint64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListIssuesFilter) []domain.IssueExtended); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.IssueExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.ListIssuesFilter) uint64); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *domain.ListIssuesFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIssueUseCase_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockIssueUseCase_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *domain.ListIssuesFilter
func (_e *MockIssueUseCase_Expecter) List(ctx interface{}, filter interface{}) *MockIssueUseCase_List_Call {
	return &MockIssueUseCase_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *MockIssueUseCase_List_Call) Run(run func(ctx context.Context, filter *domain.ListIssuesFilter)) *MockIssueUseCase_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.ListIssuesFilter))
	})
	return _c
}

func (_c *MockIssueUseCase_List_Call) Return(_a0 []domain.IssueExtended, _a1 uint64, _a2 error) *MockIssueUseCase_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIssueUseCase_List_Call) RunAndReturn(run func(context.Context, *domain.ListIssuesFilter) ([]domain.IssueExtended, uint64, error)) *MockIssueUseCase_List_Call {
	_c.Call.Return(run)
	return _c
}

// RecentIssues provides a mock function with given fields: ctx, limit
func (_m *MockIssueUseCase) RecentIssues(ctx context.Context, limit uint) ([]domain.IssueExtended, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for RecentIssues")
	}

	var r0 []domain.IssueExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]domain.IssueExtended, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []domain.IssueExtended); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.IssueExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssueUseCase_RecentIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecentIssues'
type MockIssueUseCase_RecentIssues_Call struct {
	*mock.Call
}

// RecentIssues is a helper method to define mock.On call
//   - ctx context.Context
//   - limit uint
func (_e *MockIssueUseCase_Expecter) RecentIssues(ctx interface{}, limit interface{}) *MockIssueUseCase_RecentIssues_Call {
	return &MockIssueUseCase_RecentIssues_Call{Call: _e.mock.On("RecentIssues", ctx, limit)}
}

func (_c *MockIssueUseCase_RecentIssues_Call) Run(run func(ctx context.Context, limit uint)) *MockIssueUseCase_RecentIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockIssueUseCase_RecentIssues_Call) Return(_a0 []domain.IssueExtended, _a1 error) *MockIssueUseCase_RecentIssues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssueUseCase_RecentIssues_Call) RunAndReturn(run func(context.Context, uint) ([]domain.IssueExtended, error)) *MockIssueUseCase_RecentIssues_Call {
	_c.Call.Return(run)
	return _c
}

// Timeseries provides a mock function with given fields: ctx, filter
func (_m *MockIssueUseCase) Timeseries(ctx context.Context, filter *domain.IssueTimeseriesFilter) ([]domain.Timeseries, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Timeseries")
	}

	var r0 []domain.Timeseries
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.IssueTimeseriesFilter) ([]domain.Timeseries, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.IssueTimeseriesFilter) []domain.Timeseries); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Timeseries)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.IssueTimeseriesFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssueUseCase_Timeseries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Timeseries'
type MockIssueUseCase_Timeseries_Call struct {
	*mock.Call
}

// Timeseries is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *domain.IssueTimeseriesFilter
func (_e *MockIssueUseCase_Expecter) Timeseries(ctx interface{}, filter interface{}) *MockIssueUseCase_Timeseries_Call {
	return &MockIssueUseCase_Timeseries_Call{Call: _e.mock.On("Timeseries", ctx, filter)}
}

func (_c *MockIssueUseCase_Timeseries_Call) Run(run func(ctx context.Context, filter *domain.IssueTimeseriesFilter)) *MockIssueUseCase_Timeseries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.IssueTimeseriesFilter))
	})
	return _c
}

func (_c *MockIssueUseCase_Timeseries_Call) Return(_a0 []domain.Timeseries, _a1 error) *MockIssueUseCase_Timeseries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssueUseCase_Timeseries_Call) RunAndReturn(run func(context.Context, *domain.IssueTimeseriesFilter) ([]domain.Timeseries, error)) *MockIssueUseCase_Timeseries_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIssueUseCase creates a new instance of MockIssueUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIssueUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIssueUseCase {
	mock := &MockIssueUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
