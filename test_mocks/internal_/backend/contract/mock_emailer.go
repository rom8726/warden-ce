// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	json "encoding/json"

	mock "github.com/stretchr/testify/mock"
)

// MockEmailer is an autogenerated mock type for the Emailer type
type MockEmailer struct {
	mock.Mock
}

type MockEmailer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmailer) EXPECT() *MockEmailer_Expecter {
	return &MockEmailer_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: ctx, issue, project, configData, isRegress
func (_m *MockEmailer) Send(ctx context.Context, issue *domain.Issue, project *domain.Project, configData json.RawMessage, isRegress bool) error {
	ret := _m.Called(ctx, issue, project, configData, isRegress)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Issue, *domain.Project, json.RawMessage, bool) error); ok {
		r0 = rf(ctx, issue, project, configData, isRegress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmailer_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockEmailer_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - issue *domain.Issue
//   - project *domain.Project
//   - configData json.RawMessage
//   - isRegress bool
func (_e *MockEmailer_Expecter) Send(ctx interface{}, issue interface{}, project interface{}, configData interface{}, isRegress interface{}) *MockEmailer_Send_Call {
	return &MockEmailer_Send_Call{Call: _e.mock.On("Send", ctx, issue, project, configData, isRegress)}
}

func (_c *MockEmailer_Send_Call) Run(run func(ctx context.Context, issue *domain.Issue, project *domain.Project, configData json.RawMessage, isRegress bool)) *MockEmailer_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Issue), args[2].(*domain.Project), args[3].(json.RawMessage), args[4].(bool))
	})
	return _c
}

func (_c *MockEmailer_Send_Call) Return(_a0 error) *MockEmailer_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEmailer_Send_Call) RunAndReturn(run func(context.Context, *domain.Issue, *domain.Project, json.RawMessage, bool) error) *MockEmailer_Send_Call {
	_c.Call.Return(run)
	return _c
}

// Send2FACodeEmail provides a mock function with given fields: ctx, email, code, action
func (_m *MockEmailer) Send2FACodeEmail(ctx context.Context, email string, code string, action string) error {
	ret := _m.Called(ctx, email, code, action)

	if len(ret) == 0 {
		panic("no return value specified for Send2FACodeEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, email, code, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmailer_Send2FACodeEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send2FACodeEmail'
type MockEmailer_Send2FACodeEmail_Call struct {
	*mock.Call
}

// Send2FACodeEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - code string
//   - action string
func (_e *MockEmailer_Expecter) Send2FACodeEmail(ctx interface{}, email interface{}, code interface{}, action interface{}) *MockEmailer_Send2FACodeEmail_Call {
	return &MockEmailer_Send2FACodeEmail_Call{Call: _e.mock.On("Send2FACodeEmail", ctx, email, code, action)}
}

func (_c *MockEmailer_Send2FACodeEmail_Call) Run(run func(ctx context.Context, email string, code string, action string)) *MockEmailer_Send2FACodeEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockEmailer_Send2FACodeEmail_Call) Return(_a0 error) *MockEmailer_Send2FACodeEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEmailer_Send2FACodeEmail_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockEmailer_Send2FACodeEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendResetPasswordEmail provides a mock function with given fields: ctx, email, token
func (_m *MockEmailer) SendResetPasswordEmail(ctx context.Context, email string, token string) error {
	ret := _m.Called(ctx, email, token)

	if len(ret) == 0 {
		panic("no return value specified for SendResetPasswordEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmailer_SendResetPasswordEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendResetPasswordEmail'
type MockEmailer_SendResetPasswordEmail_Call struct {
	*mock.Call
}

// SendResetPasswordEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - token string
func (_e *MockEmailer_Expecter) SendResetPasswordEmail(ctx interface{}, email interface{}, token interface{}) *MockEmailer_SendResetPasswordEmail_Call {
	return &MockEmailer_SendResetPasswordEmail_Call{Call: _e.mock.On("SendResetPasswordEmail", ctx, email, token)}
}

func (_c *MockEmailer_SendResetPasswordEmail_Call) Run(run func(ctx context.Context, email string, token string)) *MockEmailer_SendResetPasswordEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockEmailer_SendResetPasswordEmail_Call) Return(_a0 error) *MockEmailer_SendResetPasswordEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEmailer_SendResetPasswordEmail_Call) RunAndReturn(run func(context.Context, string, string) error) *MockEmailer_SendResetPasswordEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEmailer creates a new instance of MockEmailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailer {
	mock := &MockEmailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
