// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockReleaseStatsRepository is an autogenerated mock type for the ReleaseStatsRepository type
type MockReleaseStatsRepository struct {
	mock.Mock
}

type MockReleaseStatsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReleaseStatsRepository) EXPECT() *MockReleaseStatsRepository_Expecter {
	return &MockReleaseStatsRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, stats
func (_m *MockReleaseStatsRepository) Create(ctx context.Context, stats domain.ReleaseStats) error {
	ret := _m.Called(ctx, stats)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ReleaseStats) error); ok {
		r0 = rf(ctx, stats)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReleaseStatsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockReleaseStatsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - stats domain.ReleaseStats
func (_e *MockReleaseStatsRepository_Expecter) Create(ctx interface{}, stats interface{}) *MockReleaseStatsRepository_Create_Call {
	return &MockReleaseStatsRepository_Create_Call{Call: _e.mock.On("Create", ctx, stats)}
}

func (_c *MockReleaseStatsRepository_Create_Call) Run(run func(ctx context.Context, stats domain.ReleaseStats)) *MockReleaseStatsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ReleaseStats))
	})
	return _c
}

func (_c *MockReleaseStatsRepository_Create_Call) Return(_a0 error) *MockReleaseStatsRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReleaseStatsRepository_Create_Call) RunAndReturn(run func(context.Context, domain.ReleaseStats) error) *MockReleaseStatsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProjectAndRelease provides a mock function with given fields: ctx, projectID, release
func (_m *MockReleaseStatsRepository) GetByProjectAndRelease(ctx context.Context, projectID domain.ProjectID, release string) (domain.ReleaseStats, error) {
	ret := _m.Called(ctx, projectID, release)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectAndRelease")
	}

	var r0 domain.ReleaseStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) (domain.ReleaseStats, error)); ok {
		return rf(ctx, projectID, release)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) domain.ReleaseStats); ok {
		r0 = rf(ctx, projectID, release)
	} else {
		r0 = ret.Get(0).(domain.ReleaseStats)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string) error); ok {
		r1 = rf(ctx, projectID, release)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReleaseStatsRepository_GetByProjectAndRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProjectAndRelease'
type MockReleaseStatsRepository_GetByProjectAndRelease_Call struct {
	*mock.Call
}

// GetByProjectAndRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - release string
func (_e *MockReleaseStatsRepository_Expecter) GetByProjectAndRelease(ctx interface{}, projectID interface{}, release interface{}) *MockReleaseStatsRepository_GetByProjectAndRelease_Call {
	return &MockReleaseStatsRepository_GetByProjectAndRelease_Call{Call: _e.mock.On("GetByProjectAndRelease", ctx, projectID, release)}
}

func (_c *MockReleaseStatsRepository_GetByProjectAndRelease_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, release string)) *MockReleaseStatsRepository_GetByProjectAndRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string))
	})
	return _c
}

func (_c *MockReleaseStatsRepository_GetByProjectAndRelease_Call) Return(_a0 domain.ReleaseStats, _a1 error) *MockReleaseStatsRepository_GetByProjectAndRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReleaseStatsRepository_GetByProjectAndRelease_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string) (domain.ReleaseStats, error)) *MockReleaseStatsRepository_GetByProjectAndRelease_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReleaseStatsRepository creates a new instance of MockReleaseStatsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReleaseStatsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReleaseStatsRepository {
	mock := &MockReleaseStatsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
