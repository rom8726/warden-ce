// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockNotificationRulesRepository is an autogenerated mock type for the NotificationRulesRepository type
type MockNotificationRulesRepository struct {
	mock.Mock
}

type MockNotificationRulesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationRulesRepository) EXPECT() *MockNotificationRulesRepository_Expecter {
	return &MockNotificationRulesRepository_Expecter{mock: &_m.Mock}
}

// CreateRule provides a mock function with given fields: ctx, ruleDTO
func (_m *MockNotificationRulesRepository) CreateRule(ctx context.Context, ruleDTO domain.NotificationRuleDTO) (domain.NotificationRule, error) {
	ret := _m.Called(ctx, ruleDTO)

	if len(ret) == 0 {
		panic("no return value specified for CreateRule")
	}

	var r0 domain.NotificationRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationRuleDTO) (domain.NotificationRule, error)); ok {
		return rf(ctx, ruleDTO)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationRuleDTO) domain.NotificationRule); ok {
		r0 = rf(ctx, ruleDTO)
	} else {
		r0 = ret.Get(0).(domain.NotificationRule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.NotificationRuleDTO) error); ok {
		r1 = rf(ctx, ruleDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationRulesRepository_CreateRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRule'
type MockNotificationRulesRepository_CreateRule_Call struct {
	*mock.Call
}

// CreateRule is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleDTO domain.NotificationRuleDTO
func (_e *MockNotificationRulesRepository_Expecter) CreateRule(ctx interface{}, ruleDTO interface{}) *MockNotificationRulesRepository_CreateRule_Call {
	return &MockNotificationRulesRepository_CreateRule_Call{Call: _e.mock.On("CreateRule", ctx, ruleDTO)}
}

func (_c *MockNotificationRulesRepository_CreateRule_Call) Run(run func(ctx context.Context, ruleDTO domain.NotificationRuleDTO)) *MockNotificationRulesRepository_CreateRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationRuleDTO))
	})
	return _c
}

func (_c *MockNotificationRulesRepository_CreateRule_Call) Return(_a0 domain.NotificationRule, _a1 error) *MockNotificationRulesRepository_CreateRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationRulesRepository_CreateRule_Call) RunAndReturn(run func(context.Context, domain.NotificationRuleDTO) (domain.NotificationRule, error)) *MockNotificationRulesRepository_CreateRule_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRule provides a mock function with given fields: ctx, id
func (_m *MockNotificationRulesRepository) DeleteRule(ctx context.Context, id domain.NotificationRuleID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationRuleID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationRulesRepository_DeleteRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRule'
type MockNotificationRulesRepository_DeleteRule_Call struct {
	*mock.Call
}

// DeleteRule is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationRuleID
func (_e *MockNotificationRulesRepository_Expecter) DeleteRule(ctx interface{}, id interface{}) *MockNotificationRulesRepository_DeleteRule_Call {
	return &MockNotificationRulesRepository_DeleteRule_Call{Call: _e.mock.On("DeleteRule", ctx, id)}
}

func (_c *MockNotificationRulesRepository_DeleteRule_Call) Run(run func(ctx context.Context, id domain.NotificationRuleID)) *MockNotificationRulesRepository_DeleteRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationRuleID))
	})
	return _c
}

func (_c *MockNotificationRulesRepository_DeleteRule_Call) Return(_a0 error) *MockNotificationRulesRepository_DeleteRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationRulesRepository_DeleteRule_Call) RunAndReturn(run func(context.Context, domain.NotificationRuleID) error) *MockNotificationRulesRepository_DeleteRule_Call {
	_c.Call.Return(run)
	return _c
}

// GetRuleByID provides a mock function with given fields: ctx, id
func (_m *MockNotificationRulesRepository) GetRuleByID(ctx context.Context, id domain.NotificationRuleID) (domain.NotificationRule, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRuleByID")
	}

	var r0 domain.NotificationRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationRuleID) (domain.NotificationRule, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationRuleID) domain.NotificationRule); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.NotificationRule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.NotificationRuleID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationRulesRepository_GetRuleByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRuleByID'
type MockNotificationRulesRepository_GetRuleByID_Call struct {
	*mock.Call
}

// GetRuleByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationRuleID
func (_e *MockNotificationRulesRepository_Expecter) GetRuleByID(ctx interface{}, id interface{}) *MockNotificationRulesRepository_GetRuleByID_Call {
	return &MockNotificationRulesRepository_GetRuleByID_Call{Call: _e.mock.On("GetRuleByID", ctx, id)}
}

func (_c *MockNotificationRulesRepository_GetRuleByID_Call) Run(run func(ctx context.Context, id domain.NotificationRuleID)) *MockNotificationRulesRepository_GetRuleByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationRuleID))
	})
	return _c
}

func (_c *MockNotificationRulesRepository_GetRuleByID_Call) Return(_a0 domain.NotificationRule, _a1 error) *MockNotificationRulesRepository_GetRuleByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationRulesRepository_GetRuleByID_Call) RunAndReturn(run func(context.Context, domain.NotificationRuleID) (domain.NotificationRule, error)) *MockNotificationRulesRepository_GetRuleByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListRules provides a mock function with given fields: ctx, settingID
func (_m *MockNotificationRulesRepository) ListRules(ctx context.Context, settingID domain.NotificationSettingID) ([]domain.NotificationRule, error) {
	ret := _m.Called(ctx, settingID)

	if len(ret) == 0 {
		panic("no return value specified for ListRules")
	}

	var r0 []domain.NotificationRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) ([]domain.NotificationRule, error)); ok {
		return rf(ctx, settingID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) []domain.NotificationRule); ok {
		r0 = rf(ctx, settingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.NotificationRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.NotificationSettingID) error); ok {
		r1 = rf(ctx, settingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationRulesRepository_ListRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRules'
type MockNotificationRulesRepository_ListRules_Call struct {
	*mock.Call
}

// ListRules is a helper method to define mock.On call
//   - ctx context.Context
//   - settingID domain.NotificationSettingID
func (_e *MockNotificationRulesRepository_Expecter) ListRules(ctx interface{}, settingID interface{}) *MockNotificationRulesRepository_ListRules_Call {
	return &MockNotificationRulesRepository_ListRules_Call{Call: _e.mock.On("ListRules", ctx, settingID)}
}

func (_c *MockNotificationRulesRepository_ListRules_Call) Run(run func(ctx context.Context, settingID domain.NotificationSettingID)) *MockNotificationRulesRepository_ListRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationSettingID))
	})
	return _c
}

func (_c *MockNotificationRulesRepository_ListRules_Call) Return(_a0 []domain.NotificationRule, _a1 error) *MockNotificationRulesRepository_ListRules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationRulesRepository_ListRules_Call) RunAndReturn(run func(context.Context, domain.NotificationSettingID) ([]domain.NotificationRule, error)) *MockNotificationRulesRepository_ListRules_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRule provides a mock function with given fields: ctx, rule
func (_m *MockNotificationRulesRepository) UpdateRule(ctx context.Context, rule domain.NotificationRule) error {
	ret := _m.Called(ctx, rule)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationRule) error); ok {
		r0 = rf(ctx, rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationRulesRepository_UpdateRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRule'
type MockNotificationRulesRepository_UpdateRule_Call struct {
	*mock.Call
}

// UpdateRule is a helper method to define mock.On call
//   - ctx context.Context
//   - rule domain.NotificationRule
func (_e *MockNotificationRulesRepository_Expecter) UpdateRule(ctx interface{}, rule interface{}) *MockNotificationRulesRepository_UpdateRule_Call {
	return &MockNotificationRulesRepository_UpdateRule_Call{Call: _e.mock.On("UpdateRule", ctx, rule)}
}

func (_c *MockNotificationRulesRepository_UpdateRule_Call) Run(run func(ctx context.Context, rule domain.NotificationRule)) *MockNotificationRulesRepository_UpdateRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.NotificationRule))
	})
	return _c
}

func (_c *MockNotificationRulesRepository_UpdateRule_Call) Return(_a0 error) *MockNotificationRulesRepository_UpdateRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationRulesRepository_UpdateRule_Call) RunAndReturn(run func(context.Context, domain.NotificationRule) error) *MockNotificationRulesRepository_UpdateRule_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationRulesRepository creates a new instance of MockNotificationRulesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationRulesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationRulesRepository {
	mock := &MockNotificationRulesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
