// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockProjectsRepository is an autogenerated mock type for the ProjectsRepository type
type MockProjectsRepository struct {
	mock.Mock
}

type MockProjectsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectsRepository) EXPECT() *MockProjectsRepository_Expecter {
	return &MockProjectsRepository_Expecter{mock: &_m.Mock}
}

// Archive provides a mock function with given fields: ctx, id
func (_m *MockProjectsRepository) Archive(ctx context.Context, id domain.ProjectID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Archive")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProjectsRepository_Archive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Archive'
type MockProjectsRepository_Archive_Call struct {
	*mock.Call
}

// Archive is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.ProjectID
func (_e *MockProjectsRepository_Expecter) Archive(ctx interface{}, id interface{}) *MockProjectsRepository_Archive_Call {
	return &MockProjectsRepository_Archive_Call{Call: _e.mock.On("Archive", ctx, id)}
}

func (_c *MockProjectsRepository_Archive_Call) Run(run func(ctx context.Context, id domain.ProjectID)) *MockProjectsRepository_Archive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID))
	})
	return _c
}

func (_c *MockProjectsRepository_Archive_Call) Return(_a0 error) *MockProjectsRepository_Archive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectsRepository_Archive_Call) RunAndReturn(run func(context.Context, domain.ProjectID) error) *MockProjectsRepository_Archive_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, project
func (_m *MockProjectsRepository) Create(ctx context.Context, project *domain.ProjectDTO) (domain.ProjectID, error) {
	ret := _m.Called(ctx, project)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.ProjectID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ProjectDTO) (domain.ProjectID, error)); ok {
		return rf(ctx, project)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ProjectDTO) domain.ProjectID); ok {
		r0 = rf(ctx, project)
	} else {
		r0 = ret.Get(0).(domain.ProjectID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.ProjectDTO) error); ok {
		r1 = rf(ctx, project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProjectsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - project *domain.ProjectDTO
func (_e *MockProjectsRepository_Expecter) Create(ctx interface{}, project interface{}) *MockProjectsRepository_Create_Call {
	return &MockProjectsRepository_Create_Call{Call: _e.mock.On("Create", ctx, project)}
}

func (_c *MockProjectsRepository_Create_Call) Run(run func(ctx context.Context, project *domain.ProjectDTO)) *MockProjectsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.ProjectDTO))
	})
	return _c
}

func (_c *MockProjectsRepository_Create_Call) Return(_a0 domain.ProjectID, _a1 error) *MockProjectsRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectsRepository_Create_Call) RunAndReturn(run func(context.Context, *domain.ProjectDTO) (domain.ProjectID, error)) *MockProjectsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockProjectsRepository) GetByID(ctx context.Context, id domain.ProjectID) (domain.Project, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) (domain.Project, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) domain.Project); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Project)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectsRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockProjectsRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.ProjectID
func (_e *MockProjectsRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockProjectsRepository_GetByID_Call {
	return &MockProjectsRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockProjectsRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.ProjectID)) *MockProjectsRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID))
	})
	return _c
}

func (_c *MockProjectsRepository_GetByID_Call) Return(_a0 domain.Project, _a1 error) *MockProjectsRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectsRepository_GetByID_Call) RunAndReturn(run func(context.Context, domain.ProjectID) (domain.Project, error)) *MockProjectsRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockProjectsRepository) List(ctx context.Context) ([]domain.ProjectExtended, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.ProjectExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.ProjectExtended, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.ProjectExtended); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProjectExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectsRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockProjectsRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectsRepository_Expecter) List(ctx interface{}) *MockProjectsRepository_List_Call {
	return &MockProjectsRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockProjectsRepository_List_Call) Run(run func(ctx context.Context)) *MockProjectsRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProjectsRepository_List_Call) Return(_a0 []domain.ProjectExtended, _a1 error) *MockProjectsRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectsRepository_List_Call) RunAndReturn(run func(context.Context) ([]domain.ProjectExtended, error)) *MockProjectsRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// RecentProjects provides a mock function with given fields: ctx, userID, limit
func (_m *MockProjectsRepository) RecentProjects(ctx context.Context, userID domain.UserID, limit uint) ([]domain.ProjectExtended, error) {
	ret := _m.Called(ctx, userID, limit)

	if len(ret) == 0 {
		panic("no return value specified for RecentProjects")
	}

	var r0 []domain.ProjectExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, uint) ([]domain.ProjectExtended, error)); ok {
		return rf(ctx, userID, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, uint) []domain.ProjectExtended); ok {
		r0 = rf(ctx, userID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProjectExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserID, uint) error); ok {
		r1 = rf(ctx, userID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectsRepository_RecentProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecentProjects'
type MockProjectsRepository_RecentProjects_Call struct {
	*mock.Call
}

// RecentProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - userID domain.UserID
//   - limit uint
func (_e *MockProjectsRepository_Expecter) RecentProjects(ctx interface{}, userID interface{}, limit interface{}) *MockProjectsRepository_RecentProjects_Call {
	return &MockProjectsRepository_RecentProjects_Call{Call: _e.mock.On("RecentProjects", ctx, userID, limit)}
}

func (_c *MockProjectsRepository_RecentProjects_Call) Run(run func(ctx context.Context, userID domain.UserID, limit uint)) *MockProjectsRepository_RecentProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(uint))
	})
	return _c
}

func (_c *MockProjectsRepository_RecentProjects_Call) Return(_a0 []domain.ProjectExtended, _a1 error) *MockProjectsRepository_RecentProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectsRepository_RecentProjects_Call) RunAndReturn(run func(context.Context, domain.UserID, uint) ([]domain.ProjectExtended, error)) *MockProjectsRepository_RecentProjects_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, name, description
func (_m *MockProjectsRepository) Update(ctx context.Context, id domain.ProjectID, name string, description string) error {
	ret := _m.Called(ctx, id, name, description)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, string) error); ok {
		r0 = rf(ctx, id, name, description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProjectsRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProjectsRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.ProjectID
//   - name string
//   - description string
func (_e *MockProjectsRepository_Expecter) Update(ctx interface{}, id interface{}, name interface{}, description interface{}) *MockProjectsRepository_Update_Call {
	return &MockProjectsRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, name, description)}
}

func (_c *MockProjectsRepository_Update_Call) Run(run func(ctx context.Context, id domain.ProjectID, name string, description string)) *MockProjectsRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockProjectsRepository_Update_Call) Return(_a0 error) *MockProjectsRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectsRepository_Update_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string, string) error) *MockProjectsRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProjectsRepository creates a new instance of MockProjectsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectsRepository {
	mock := &MockProjectsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
