// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockPermissionsService is an autogenerated mock type for the PermissionsService type
type MockPermissionsService struct {
	mock.Mock
}

type MockPermissionsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPermissionsService) EXPECT() *MockPermissionsService_Expecter {
	return &MockPermissionsService_Expecter{mock: &_m.Mock}
}

// CanAccessIssue provides a mock function with given fields: ctx, issueID
func (_m *MockPermissionsService) CanAccessIssue(ctx context.Context, issueID domain.IssueID) error {
	ret := _m.Called(ctx, issueID)

	if len(ret) == 0 {
		panic("no return value specified for CanAccessIssue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueID) error); ok {
		r0 = rf(ctx, issueID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPermissionsService_CanAccessIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanAccessIssue'
type MockPermissionsService_CanAccessIssue_Call struct {
	*mock.Call
}

// CanAccessIssue is a helper method to define mock.On call
//   - ctx context.Context
//   - issueID domain.IssueID
func (_e *MockPermissionsService_Expecter) CanAccessIssue(ctx interface{}, issueID interface{}) *MockPermissionsService_CanAccessIssue_Call {
	return &MockPermissionsService_CanAccessIssue_Call{Call: _e.mock.On("CanAccessIssue", ctx, issueID)}
}

func (_c *MockPermissionsService_CanAccessIssue_Call) Run(run func(ctx context.Context, issueID domain.IssueID)) *MockPermissionsService_CanAccessIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.IssueID))
	})
	return _c
}

func (_c *MockPermissionsService_CanAccessIssue_Call) Return(_a0 error) *MockPermissionsService_CanAccessIssue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPermissionsService_CanAccessIssue_Call) RunAndReturn(run func(context.Context, domain.IssueID) error) *MockPermissionsService_CanAccessIssue_Call {
	_c.Call.Return(run)
	return _c
}

// CanAccessProject provides a mock function with given fields: ctx, projectID
func (_m *MockPermissionsService) CanAccessProject(ctx context.Context, projectID domain.ProjectID) error {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for CanAccessProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) error); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPermissionsService_CanAccessProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanAccessProject'
type MockPermissionsService_CanAccessProject_Call struct {
	*mock.Call
}

// CanAccessProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockPermissionsService_Expecter) CanAccessProject(ctx interface{}, projectID interface{}) *MockPermissionsService_CanAccessProject_Call {
	return &MockPermissionsService_CanAccessProject_Call{Call: _e.mock.On("CanAccessProject", ctx, projectID)}
}

func (_c *MockPermissionsService_CanAccessProject_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockPermissionsService_CanAccessProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID))
	})
	return _c
}

func (_c *MockPermissionsService_CanAccessProject_Call) Return(_a0 error) *MockPermissionsService_CanAccessProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPermissionsService_CanAccessProject_Call) RunAndReturn(run func(context.Context, domain.ProjectID) error) *MockPermissionsService_CanAccessProject_Call {
	_c.Call.Return(run)
	return _c
}

// CanManageIssue provides a mock function with given fields: ctx, issueID
func (_m *MockPermissionsService) CanManageIssue(ctx context.Context, issueID domain.IssueID) error {
	ret := _m.Called(ctx, issueID)

	if len(ret) == 0 {
		panic("no return value specified for CanManageIssue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.IssueID) error); ok {
		r0 = rf(ctx, issueID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPermissionsService_CanManageIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanManageIssue'
type MockPermissionsService_CanManageIssue_Call struct {
	*mock.Call
}

// CanManageIssue is a helper method to define mock.On call
//   - ctx context.Context
//   - issueID domain.IssueID
func (_e *MockPermissionsService_Expecter) CanManageIssue(ctx interface{}, issueID interface{}) *MockPermissionsService_CanManageIssue_Call {
	return &MockPermissionsService_CanManageIssue_Call{Call: _e.mock.On("CanManageIssue", ctx, issueID)}
}

func (_c *MockPermissionsService_CanManageIssue_Call) Run(run func(ctx context.Context, issueID domain.IssueID)) *MockPermissionsService_CanManageIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.IssueID))
	})
	return _c
}

func (_c *MockPermissionsService_CanManageIssue_Call) Return(_a0 error) *MockPermissionsService_CanManageIssue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPermissionsService_CanManageIssue_Call) RunAndReturn(run func(context.Context, domain.IssueID) error) *MockPermissionsService_CanManageIssue_Call {
	_c.Call.Return(run)
	return _c
}

// CanManageProject provides a mock function with given fields: ctx, projectID, isIssueManagement
func (_m *MockPermissionsService) CanManageProject(ctx context.Context, projectID domain.ProjectID, isIssueManagement bool) error {
	ret := _m.Called(ctx, projectID, isIssueManagement)

	if len(ret) == 0 {
		panic("no return value specified for CanManageProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, bool) error); ok {
		r0 = rf(ctx, projectID, isIssueManagement)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPermissionsService_CanManageProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanManageProject'
type MockPermissionsService_CanManageProject_Call struct {
	*mock.Call
}

// CanManageProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - isIssueManagement bool
func (_e *MockPermissionsService_Expecter) CanManageProject(ctx interface{}, projectID interface{}, isIssueManagement interface{}) *MockPermissionsService_CanManageProject_Call {
	return &MockPermissionsService_CanManageProject_Call{Call: _e.mock.On("CanManageProject", ctx, projectID, isIssueManagement)}
}

func (_c *MockPermissionsService_CanManageProject_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, isIssueManagement bool)) *MockPermissionsService_CanManageProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(bool))
	})
	return _c
}

func (_c *MockPermissionsService_CanManageProject_Call) Return(_a0 error) *MockPermissionsService_CanManageProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPermissionsService_CanManageProject_Call) RunAndReturn(run func(context.Context, domain.ProjectID, bool) error) *MockPermissionsService_CanManageProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessibleProjects provides a mock function with given fields: ctx, projects
func (_m *MockPermissionsService) GetAccessibleProjects(ctx context.Context, projects []domain.ProjectExtended) ([]domain.ProjectExtended, error) {
	ret := _m.Called(ctx, projects)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessibleProjects")
	}

	var r0 []domain.ProjectExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.ProjectExtended) ([]domain.ProjectExtended, error)); ok {
		return rf(ctx, projects)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []domain.ProjectExtended) []domain.ProjectExtended); ok {
		r0 = rf(ctx, projects)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProjectExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []domain.ProjectExtended) error); ok {
		r1 = rf(ctx, projects)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPermissionsService_GetAccessibleProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessibleProjects'
type MockPermissionsService_GetAccessibleProjects_Call struct {
	*mock.Call
}

// GetAccessibleProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - projects []domain.ProjectExtended
func (_e *MockPermissionsService_Expecter) GetAccessibleProjects(ctx interface{}, projects interface{}) *MockPermissionsService_GetAccessibleProjects_Call {
	return &MockPermissionsService_GetAccessibleProjects_Call{Call: _e.mock.On("GetAccessibleProjects", ctx, projects)}
}

func (_c *MockPermissionsService_GetAccessibleProjects_Call) Run(run func(ctx context.Context, projects []domain.ProjectExtended)) *MockPermissionsService_GetAccessibleProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]domain.ProjectExtended))
	})
	return _c
}

func (_c *MockPermissionsService_GetAccessibleProjects_Call) Return(_a0 []domain.ProjectExtended, _a1 error) *MockPermissionsService_GetAccessibleProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPermissionsService_GetAccessibleProjects_Call) RunAndReturn(run func(context.Context, []domain.ProjectExtended) ([]domain.ProjectExtended, error)) *MockPermissionsService_GetAccessibleProjects_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPermissionsService creates a new instance of MockPermissionsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPermissionsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPermissionsService {
	mock := &MockPermissionsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
