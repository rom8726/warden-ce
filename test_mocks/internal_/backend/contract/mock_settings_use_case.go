// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockSettingsUseCase is an autogenerated mock type for the SettingsUseCase type
type MockSettingsUseCase struct {
	mock.Mock
}

type MockSettingsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSettingsUseCase) EXPECT() *MockSettingsUseCase_Expecter {
	return &MockSettingsUseCase_Expecter{mock: &_m.Mock}
}

// DeleteSetting provides a mock function with given fields: ctx, name
func (_m *MockSettingsUseCase) DeleteSetting(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSetting")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSettingsUseCase_DeleteSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSetting'
type MockSettingsUseCase_DeleteSetting_Call struct {
	*mock.Call
}

// DeleteSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockSettingsUseCase_Expecter) DeleteSetting(ctx interface{}, name interface{}) *MockSettingsUseCase_DeleteSetting_Call {
	return &MockSettingsUseCase_DeleteSetting_Call{Call: _e.mock.On("DeleteSetting", ctx, name)}
}

func (_c *MockSettingsUseCase_DeleteSetting_Call) Run(run func(ctx context.Context, name string)) *MockSettingsUseCase_DeleteSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSettingsUseCase_DeleteSetting_Call) Return(_a0 error) *MockSettingsUseCase_DeleteSetting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSettingsUseCase_DeleteSetting_Call) RunAndReturn(run func(context.Context, string) error) *MockSettingsUseCase_DeleteSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetSetting provides a mock function with given fields: ctx, name
func (_m *MockSettingsUseCase) GetSetting(ctx context.Context, name string) (*domain.Setting, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetSetting")
	}

	var r0 *domain.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Setting, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Setting); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSettingsUseCase_GetSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSetting'
type MockSettingsUseCase_GetSetting_Call struct {
	*mock.Call
}

// GetSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockSettingsUseCase_Expecter) GetSetting(ctx interface{}, name interface{}) *MockSettingsUseCase_GetSetting_Call {
	return &MockSettingsUseCase_GetSetting_Call{Call: _e.mock.On("GetSetting", ctx, name)}
}

func (_c *MockSettingsUseCase_GetSetting_Call) Run(run func(ctx context.Context, name string)) *MockSettingsUseCase_GetSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSettingsUseCase_GetSetting_Call) Return(_a0 *domain.Setting, _a1 error) *MockSettingsUseCase_GetSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSettingsUseCase_GetSetting_Call) RunAndReturn(run func(context.Context, string) (*domain.Setting, error)) *MockSettingsUseCase_GetSetting_Call {
	_c.Call.Return(run)
	return _c
}

// ListSettings provides a mock function with given fields: ctx
func (_m *MockSettingsUseCase) ListSettings(ctx context.Context) ([]*domain.Setting, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListSettings")
	}

	var r0 []*domain.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Setting, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Setting); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSettingsUseCase_ListSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSettings'
type MockSettingsUseCase_ListSettings_Call struct {
	*mock.Call
}

// ListSettings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSettingsUseCase_Expecter) ListSettings(ctx interface{}) *MockSettingsUseCase_ListSettings_Call {
	return &MockSettingsUseCase_ListSettings_Call{Call: _e.mock.On("ListSettings", ctx)}
}

func (_c *MockSettingsUseCase_ListSettings_Call) Run(run func(ctx context.Context)) *MockSettingsUseCase_ListSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSettingsUseCase_ListSettings_Call) Return(_a0 []*domain.Setting, _a1 error) *MockSettingsUseCase_ListSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSettingsUseCase_ListSettings_Call) RunAndReturn(run func(context.Context) ([]*domain.Setting, error)) *MockSettingsUseCase_ListSettings_Call {
	_c.Call.Return(run)
	return _c
}

// SetSetting provides a mock function with given fields: ctx, name, value, description
func (_m *MockSettingsUseCase) SetSetting(ctx context.Context, name string, value interface{}, description string) error {
	ret := _m.Called(ctx, name, value, description)

	if len(ret) == 0 {
		panic("no return value specified for SetSetting")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, string) error); ok {
		r0 = rf(ctx, name, value, description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSettingsUseCase_SetSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSetting'
type MockSettingsUseCase_SetSetting_Call struct {
	*mock.Call
}

// SetSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - value interface{}
//   - description string
func (_e *MockSettingsUseCase_Expecter) SetSetting(ctx interface{}, name interface{}, value interface{}, description interface{}) *MockSettingsUseCase_SetSetting_Call {
	return &MockSettingsUseCase_SetSetting_Call{Call: _e.mock.On("SetSetting", ctx, name, value, description)}
}

func (_c *MockSettingsUseCase_SetSetting_Call) Run(run func(ctx context.Context, name string, value interface{}, description string)) *MockSettingsUseCase_SetSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(string))
	})
	return _c
}

func (_c *MockSettingsUseCase_SetSetting_Call) Return(_a0 error) *MockSettingsUseCase_SetSetting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSettingsUseCase_SetSetting_Call) RunAndReturn(run func(context.Context, string, interface{}, string) error) *MockSettingsUseCase_SetSetting_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSettingsUseCase creates a new instance of MockSettingsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSettingsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSettingsUseCase {
	mock := &MockSettingsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
