// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockEventRepository is an autogenerated mock type for the EventRepository type
type MockEventRepository struct {
	mock.Mock
}

type MockEventRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventRepository) EXPECT() *MockEventRepository_Expecter {
	return &MockEventRepository_Expecter{mock: &_m.Mock}
}

// AggregateBySegment provides a mock function with given fields: ctx, projectID, release, segment
func (_m *MockEventRepository) AggregateBySegment(ctx context.Context, projectID domain.ProjectID, release string, segment domain.SegmentName) (map[string]uint, error) {
	ret := _m.Called(ctx, projectID, release, segment)

	if len(ret) == 0 {
		panic("no return value specified for AggregateBySegment")
	}

	var r0 map[string]uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, domain.SegmentName) (map[string]uint, error)); ok {
		return rf(ctx, projectID, release, segment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, domain.SegmentName) map[string]uint); ok {
		r0 = rf(ctx, projectID, release, segment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]uint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, domain.SegmentName) error); ok {
		r1 = rf(ctx, projectID, release, segment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventRepository_AggregateBySegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AggregateBySegment'
type MockEventRepository_AggregateBySegment_Call struct {
	*mock.Call
}

// AggregateBySegment is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - release string
//   - segment domain.SegmentName
func (_e *MockEventRepository_Expecter) AggregateBySegment(ctx interface{}, projectID interface{}, release interface{}, segment interface{}) *MockEventRepository_AggregateBySegment_Call {
	return &MockEventRepository_AggregateBySegment_Call{Call: _e.mock.On("AggregateBySegment", ctx, projectID, release, segment)}
}

func (_c *MockEventRepository_AggregateBySegment_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, release string, segment domain.SegmentName)) *MockEventRepository_AggregateBySegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string), args[3].(domain.SegmentName))
	})
	return _c
}

func (_c *MockEventRepository_AggregateBySegment_Call) Return(_a0 map[string]uint, _a1 error) *MockEventRepository_AggregateBySegment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventRepository_AggregateBySegment_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string, domain.SegmentName) (map[string]uint, error)) *MockEventRepository_AggregateBySegment_Call {
	_c.Call.Return(run)
	return _c
}

// EventsByRelease provides a mock function with given fields: ctx, projectID, release, limit
func (_m *MockEventRepository) EventsByRelease(ctx context.Context, projectID domain.ProjectID, release string, limit uint) ([]domain.Event, error) {
	ret := _m.Called(ctx, projectID, release, limit)

	if len(ret) == 0 {
		panic("no return value specified for EventsByRelease")
	}

	var r0 []domain.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, uint) ([]domain.Event, error)); ok {
		return rf(ctx, projectID, release, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, uint) []domain.Event); ok {
		r0 = rf(ctx, projectID, release, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, uint) error); ok {
		r1 = rf(ctx, projectID, release, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventRepository_EventsByRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventsByRelease'
type MockEventRepository_EventsByRelease_Call struct {
	*mock.Call
}

// EventsByRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - release string
//   - limit uint
func (_e *MockEventRepository_Expecter) EventsByRelease(ctx interface{}, projectID interface{}, release interface{}, limit interface{}) *MockEventRepository_EventsByRelease_Call {
	return &MockEventRepository_EventsByRelease_Call{Call: _e.mock.On("EventsByRelease", ctx, projectID, release, limit)}
}

func (_c *MockEventRepository_EventsByRelease_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, release string, limit uint)) *MockEventRepository_EventsByRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string), args[3].(uint))
	})
	return _c
}

func (_c *MockEventRepository_EventsByRelease_Call) Return(_a0 []domain.Event, _a1 error) *MockEventRepository_EventsByRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventRepository_EventsByRelease_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string, uint) ([]domain.Event, error)) *MockEventRepository_EventsByRelease_Call {
	_c.Call.Return(run)
	return _c
}

// FetchForIssue provides a mock function with given fields: ctx, projectID, groupHash, limit
func (_m *MockEventRepository) FetchForIssue(ctx context.Context, projectID domain.ProjectID, groupHash string, limit uint) ([]domain.Event, error) {
	ret := _m.Called(ctx, projectID, groupHash, limit)

	if len(ret) == 0 {
		panic("no return value specified for FetchForIssue")
	}

	var r0 []domain.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, uint) ([]domain.Event, error)); ok {
		return rf(ctx, projectID, groupHash, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, uint) []domain.Event); ok {
		r0 = rf(ctx, projectID, groupHash, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, uint) error); ok {
		r1 = rf(ctx, projectID, groupHash, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventRepository_FetchForIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchForIssue'
type MockEventRepository_FetchForIssue_Call struct {
	*mock.Call
}

// FetchForIssue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - groupHash string
//   - limit uint
func (_e *MockEventRepository_Expecter) FetchForIssue(ctx interface{}, projectID interface{}, groupHash interface{}, limit interface{}) *MockEventRepository_FetchForIssue_Call {
	return &MockEventRepository_FetchForIssue_Call{Call: _e.mock.On("FetchForIssue", ctx, projectID, groupHash, limit)}
}

func (_c *MockEventRepository_FetchForIssue_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, groupHash string, limit uint)) *MockEventRepository_FetchForIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string), args[3].(uint))
	})
	return _c
}

func (_c *MockEventRepository_FetchForIssue_Call) Return(_a0 []domain.Event, _a1 error) *MockEventRepository_FetchForIssue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventRepository_FetchForIssue_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string, uint) ([]domain.Event, error)) *MockEventRepository_FetchForIssue_Call {
	_c.Call.Return(run)
	return _c
}

// IssueTimeseries provides a mock function with given fields: ctx, fingerprint, filter
func (_m *MockEventRepository) IssueTimeseries(ctx context.Context, fingerprint string, filter *domain.IssueEventsTimeseriesFilter) ([]domain.Timeseries, error) {
	ret := _m.Called(ctx, fingerprint, filter)

	if len(ret) == 0 {
		panic("no return value specified for IssueTimeseries")
	}

	var r0 []domain.Timeseries
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.IssueEventsTimeseriesFilter) ([]domain.Timeseries, error)); ok {
		return rf(ctx, fingerprint, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.IssueEventsTimeseriesFilter) []domain.Timeseries); ok {
		r0 = rf(ctx, fingerprint, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Timeseries)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.IssueEventsTimeseriesFilter) error); ok {
		r1 = rf(ctx, fingerprint, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventRepository_IssueTimeseries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IssueTimeseries'
type MockEventRepository_IssueTimeseries_Call struct {
	*mock.Call
}

// IssueTimeseries is a helper method to define mock.On call
//   - ctx context.Context
//   - fingerprint string
//   - filter *domain.IssueEventsTimeseriesFilter
func (_e *MockEventRepository_Expecter) IssueTimeseries(ctx interface{}, fingerprint interface{}, filter interface{}) *MockEventRepository_IssueTimeseries_Call {
	return &MockEventRepository_IssueTimeseries_Call{Call: _e.mock.On("IssueTimeseries", ctx, fingerprint, filter)}
}

func (_c *MockEventRepository_IssueTimeseries_Call) Run(run func(ctx context.Context, fingerprint string, filter *domain.IssueEventsTimeseriesFilter)) *MockEventRepository_IssueTimeseries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.IssueEventsTimeseriesFilter))
	})
	return _c
}

func (_c *MockEventRepository_IssueTimeseries_Call) Return(_a0 []domain.Timeseries, _a1 error) *MockEventRepository_IssueTimeseries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventRepository_IssueTimeseries_Call) RunAndReturn(run func(context.Context, string, *domain.IssueEventsTimeseriesFilter) ([]domain.Timeseries, error)) *MockEventRepository_IssueTimeseries_Call {
	_c.Call.Return(run)
	return _c
}

// Timeseries provides a mock function with given fields: ctx, filter
func (_m *MockEventRepository) Timeseries(ctx context.Context, filter *domain.EventTimeseriesFilter) ([]domain.Timeseries, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Timeseries")
	}

	var r0 []domain.Timeseries
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.EventTimeseriesFilter) ([]domain.Timeseries, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.EventTimeseriesFilter) []domain.Timeseries); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Timeseries)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.EventTimeseriesFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventRepository_Timeseries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Timeseries'
type MockEventRepository_Timeseries_Call struct {
	*mock.Call
}

// Timeseries is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *domain.EventTimeseriesFilter
func (_e *MockEventRepository_Expecter) Timeseries(ctx interface{}, filter interface{}) *MockEventRepository_Timeseries_Call {
	return &MockEventRepository_Timeseries_Call{Call: _e.mock.On("Timeseries", ctx, filter)}
}

func (_c *MockEventRepository_Timeseries_Call) Run(run func(ctx context.Context, filter *domain.EventTimeseriesFilter)) *MockEventRepository_Timeseries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.EventTimeseriesFilter))
	})
	return _c
}

func (_c *MockEventRepository_Timeseries_Call) Return(_a0 []domain.Timeseries, _a1 error) *MockEventRepository_Timeseries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventRepository_Timeseries_Call) RunAndReturn(run func(context.Context, *domain.EventTimeseriesFilter) ([]domain.Timeseries, error)) *MockEventRepository_Timeseries_Call {
	_c.Call.Return(run)
	return _c
}

// TopIssuesByRelease provides a mock function with given fields: ctx, projectID, release, limit
func (_m *MockEventRepository) TopIssuesByRelease(ctx context.Context, projectID domain.ProjectID, release string, limit uint) ([]string, error) {
	ret := _m.Called(ctx, projectID, release, limit)

	if len(ret) == 0 {
		panic("no return value specified for TopIssuesByRelease")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, uint) ([]string, error)); ok {
		return rf(ctx, projectID, release, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, uint) []string); ok {
		r0 = rf(ctx, projectID, release, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, uint) error); ok {
		r1 = rf(ctx, projectID, release, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventRepository_TopIssuesByRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopIssuesByRelease'
type MockEventRepository_TopIssuesByRelease_Call struct {
	*mock.Call
}

// TopIssuesByRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - release string
//   - limit uint
func (_e *MockEventRepository_Expecter) TopIssuesByRelease(ctx interface{}, projectID interface{}, release interface{}, limit interface{}) *MockEventRepository_TopIssuesByRelease_Call {
	return &MockEventRepository_TopIssuesByRelease_Call{Call: _e.mock.On("TopIssuesByRelease", ctx, projectID, release, limit)}
}

func (_c *MockEventRepository_TopIssuesByRelease_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, release string, limit uint)) *MockEventRepository_TopIssuesByRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string), args[3].(uint))
	})
	return _c
}

func (_c *MockEventRepository_TopIssuesByRelease_Call) Return(_a0 []string, _a1 error) *MockEventRepository_TopIssuesByRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventRepository_TopIssuesByRelease_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string, uint) ([]string, error)) *MockEventRepository_TopIssuesByRelease_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventRepository creates a new instance of MockEventRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventRepository {
	mock := &MockEventRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
