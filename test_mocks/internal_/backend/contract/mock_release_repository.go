// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockReleaseRepository is an autogenerated mock type for the ReleaseRepository type
type MockReleaseRepository struct {
	mock.Mock
}

type MockReleaseRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReleaseRepository) EXPECT() *MockReleaseRepository_Expecter {
	return &MockReleaseRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, release
func (_m *MockReleaseRepository) Create(ctx context.Context, release domain.ReleaseDTO) (domain.ReleaseID, error) {
	ret := _m.Called(ctx, release)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.ReleaseID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ReleaseDTO) (domain.ReleaseID, error)); ok {
		return rf(ctx, release)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ReleaseDTO) domain.ReleaseID); ok {
		r0 = rf(ctx, release)
	} else {
		r0 = ret.Get(0).(domain.ReleaseID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ReleaseDTO) error); ok {
		r1 = rf(ctx, release)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReleaseRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockReleaseRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - release domain.ReleaseDTO
func (_e *MockReleaseRepository_Expecter) Create(ctx interface{}, release interface{}) *MockReleaseRepository_Create_Call {
	return &MockReleaseRepository_Create_Call{Call: _e.mock.On("Create", ctx, release)}
}

func (_c *MockReleaseRepository_Create_Call) Run(run func(ctx context.Context, release domain.ReleaseDTO)) *MockReleaseRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ReleaseDTO))
	})
	return _c
}

func (_c *MockReleaseRepository_Create_Call) Return(_a0 domain.ReleaseID, _a1 error) *MockReleaseRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReleaseRepository_Create_Call) RunAndReturn(run func(context.Context, domain.ReleaseDTO) (domain.ReleaseID, error)) *MockReleaseRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockReleaseRepository) GetByID(ctx context.Context, id domain.ReleaseID) (domain.Release, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ReleaseID) (domain.Release, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ReleaseID) domain.Release); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Release)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ReleaseID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReleaseRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockReleaseRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.ReleaseID
func (_e *MockReleaseRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockReleaseRepository_GetByID_Call {
	return &MockReleaseRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockReleaseRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.ReleaseID)) *MockReleaseRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ReleaseID))
	})
	return _c
}

func (_c *MockReleaseRepository_GetByID_Call) Return(_a0 domain.Release, _a1 error) *MockReleaseRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReleaseRepository_GetByID_Call) RunAndReturn(run func(context.Context, domain.ReleaseID) (domain.Release, error)) *MockReleaseRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProjectAndVersion provides a mock function with given fields: ctx, projectID, version
func (_m *MockReleaseRepository) GetByProjectAndVersion(ctx context.Context, projectID domain.ProjectID, version string) (domain.Release, error) {
	ret := _m.Called(ctx, projectID, version)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectAndVersion")
	}

	var r0 domain.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) (domain.Release, error)); ok {
		return rf(ctx, projectID, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) domain.Release); ok {
		r0 = rf(ctx, projectID, version)
	} else {
		r0 = ret.Get(0).(domain.Release)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string) error); ok {
		r1 = rf(ctx, projectID, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReleaseRepository_GetByProjectAndVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProjectAndVersion'
type MockReleaseRepository_GetByProjectAndVersion_Call struct {
	*mock.Call
}

// GetByProjectAndVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - version string
func (_e *MockReleaseRepository_Expecter) GetByProjectAndVersion(ctx interface{}, projectID interface{}, version interface{}) *MockReleaseRepository_GetByProjectAndVersion_Call {
	return &MockReleaseRepository_GetByProjectAndVersion_Call{Call: _e.mock.On("GetByProjectAndVersion", ctx, projectID, version)}
}

func (_c *MockReleaseRepository_GetByProjectAndVersion_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, version string)) *MockReleaseRepository_GetByProjectAndVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string))
	})
	return _c
}

func (_c *MockReleaseRepository_GetByProjectAndVersion_Call) Return(_a0 domain.Release, _a1 error) *MockReleaseRepository_GetByProjectAndVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReleaseRepository_GetByProjectAndVersion_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string) (domain.Release, error)) *MockReleaseRepository_GetByProjectAndVersion_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProject provides a mock function with given fields: ctx, projectID
func (_m *MockReleaseRepository) ListByProject(ctx context.Context, projectID domain.ProjectID) ([]domain.Release, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListByProject")
	}

	var r0 []domain.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) ([]domain.Release, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID) []domain.Release); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReleaseRepository_ListByProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProject'
type MockReleaseRepository_ListByProject_Call struct {
	*mock.Call
}

// ListByProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockReleaseRepository_Expecter) ListByProject(ctx interface{}, projectID interface{}) *MockReleaseRepository_ListByProject_Call {
	return &MockReleaseRepository_ListByProject_Call{Call: _e.mock.On("ListByProject", ctx, projectID)}
}

func (_c *MockReleaseRepository_ListByProject_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockReleaseRepository_ListByProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID))
	})
	return _c
}

func (_c *MockReleaseRepository_ListByProject_Call) Return(_a0 []domain.Release, _a1 error) *MockReleaseRepository_ListByProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReleaseRepository_ListByProject_Call) RunAndReturn(run func(context.Context, domain.ProjectID) ([]domain.Release, error)) *MockReleaseRepository_ListByProject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReleaseRepository creates a new instance of MockReleaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReleaseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReleaseRepository {
	mock := &MockReleaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
