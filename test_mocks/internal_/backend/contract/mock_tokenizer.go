// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	domain "github.com/rom8726/warden/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockTokenizer is an autogenerated mock type for the Tokenizer type
type MockTokenizer struct {
	mock.Mock
}

type MockTokenizer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenizer) EXPECT() *MockTokenizer_Expecter {
	return &MockTokenizer_Expecter{mock: &_m.Mock}
}

// AccessToken provides a mock function with given fields: user
func (_m *MockTokenizer) AccessToken(user *domain.User) (string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for AccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*domain.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenizer_AccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccessToken'
type MockTokenizer_AccessToken_Call struct {
	*mock.Call
}

// AccessToken is a helper method to define mock.On call
//   - user *domain.User
func (_e *MockTokenizer_Expecter) AccessToken(user interface{}) *MockTokenizer_AccessToken_Call {
	return &MockTokenizer_AccessToken_Call{Call: _e.mock.On("AccessToken", user)}
}

func (_c *MockTokenizer_AccessToken_Call) Run(run func(user *domain.User)) *MockTokenizer_AccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.User))
	})
	return _c
}

func (_c *MockTokenizer_AccessToken_Call) Return(_a0 string, _a1 error) *MockTokenizer_AccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenizer_AccessToken_Call) RunAndReturn(run func(*domain.User) (string, error)) *MockTokenizer_AccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// AccessTokenTTL provides a mock function with no fields
func (_m *MockTokenizer) AccessTokenTTL() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AccessTokenTTL")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockTokenizer_AccessTokenTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccessTokenTTL'
type MockTokenizer_AccessTokenTTL_Call struct {
	*mock.Call
}

// AccessTokenTTL is a helper method to define mock.On call
func (_e *MockTokenizer_Expecter) AccessTokenTTL() *MockTokenizer_AccessTokenTTL_Call {
	return &MockTokenizer_AccessTokenTTL_Call{Call: _e.mock.On("AccessTokenTTL")}
}

func (_c *MockTokenizer_AccessTokenTTL_Call) Run(run func()) *MockTokenizer_AccessTokenTTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTokenizer_AccessTokenTTL_Call) Return(_a0 time.Duration) *MockTokenizer_AccessTokenTTL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenizer_AccessTokenTTL_Call) RunAndReturn(run func() time.Duration) *MockTokenizer_AccessTokenTTL_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: user
func (_m *MockTokenizer) RefreshToken(user *domain.User) (string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*domain.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenizer_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockTokenizer_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - user *domain.User
func (_e *MockTokenizer_Expecter) RefreshToken(user interface{}) *MockTokenizer_RefreshToken_Call {
	return &MockTokenizer_RefreshToken_Call{Call: _e.mock.On("RefreshToken", user)}
}

func (_c *MockTokenizer_RefreshToken_Call) Run(run func(user *domain.User)) *MockTokenizer_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.User))
	})
	return _c
}

func (_c *MockTokenizer_RefreshToken_Call) Return(_a0 string, _a1 error) *MockTokenizer_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenizer_RefreshToken_Call) RunAndReturn(run func(*domain.User) (string, error)) *MockTokenizer_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPasswordToken provides a mock function with given fields: user
func (_m *MockTokenizer) ResetPasswordToken(user *domain.User) (string, time.Duration, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for ResetPasswordToken")
	}

	var r0 string
	var r1 time.Duration
	var r2 error
	if rf, ok := ret.Get(0).(func(*domain.User) (string, time.Duration, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*domain.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.User) time.Duration); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	if rf, ok := ret.Get(2).(func(*domain.User) error); ok {
		r2 = rf(user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTokenizer_ResetPasswordToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPasswordToken'
type MockTokenizer_ResetPasswordToken_Call struct {
	*mock.Call
}

// ResetPasswordToken is a helper method to define mock.On call
//   - user *domain.User
func (_e *MockTokenizer_Expecter) ResetPasswordToken(user interface{}) *MockTokenizer_ResetPasswordToken_Call {
	return &MockTokenizer_ResetPasswordToken_Call{Call: _e.mock.On("ResetPasswordToken", user)}
}

func (_c *MockTokenizer_ResetPasswordToken_Call) Run(run func(user *domain.User)) *MockTokenizer_ResetPasswordToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.User))
	})
	return _c
}

func (_c *MockTokenizer_ResetPasswordToken_Call) Return(_a0 string, _a1 time.Duration, _a2 error) *MockTokenizer_ResetPasswordToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTokenizer_ResetPasswordToken_Call) RunAndReturn(run func(*domain.User) (string, time.Duration, error)) *MockTokenizer_ResetPasswordToken_Call {
	_c.Call.Return(run)
	return _c
}

// SecretKey provides a mock function with no fields
func (_m *MockTokenizer) SecretKey() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SecretKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTokenizer_SecretKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretKey'
type MockTokenizer_SecretKey_Call struct {
	*mock.Call
}

// SecretKey is a helper method to define mock.On call
func (_e *MockTokenizer_Expecter) SecretKey() *MockTokenizer_SecretKey_Call {
	return &MockTokenizer_SecretKey_Call{Call: _e.mock.On("SecretKey")}
}

func (_c *MockTokenizer_SecretKey_Call) Run(run func()) *MockTokenizer_SecretKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTokenizer_SecretKey_Call) Return(_a0 string) *MockTokenizer_SecretKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenizer_SecretKey_Call) RunAndReturn(run func() string) *MockTokenizer_SecretKey_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyToken provides a mock function with given fields: token, tokenType
func (_m *MockTokenizer) VerifyToken(token string, tokenType domain.TokenType) (*domain.TokenClaims, error) {
	ret := _m.Called(token, tokenType)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 *domain.TokenClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.TokenType) (*domain.TokenClaims, error)); ok {
		return rf(token, tokenType)
	}
	if rf, ok := ret.Get(0).(func(string, domain.TokenType) *domain.TokenClaims); ok {
		r0 = rf(token, tokenType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TokenClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string, domain.TokenType) error); ok {
		r1 = rf(token, tokenType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenizer_VerifyToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyToken'
type MockTokenizer_VerifyToken_Call struct {
	*mock.Call
}

// VerifyToken is a helper method to define mock.On call
//   - token string
//   - tokenType domain.TokenType
func (_e *MockTokenizer_Expecter) VerifyToken(token interface{}, tokenType interface{}) *MockTokenizer_VerifyToken_Call {
	return &MockTokenizer_VerifyToken_Call{Call: _e.mock.On("VerifyToken", token, tokenType)}
}

func (_c *MockTokenizer_VerifyToken_Call) Run(run func(token string, tokenType domain.TokenType)) *MockTokenizer_VerifyToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(domain.TokenType))
	})
	return _c
}

func (_c *MockTokenizer_VerifyToken_Call) Return(_a0 *domain.TokenClaims, _a1 error) *MockTokenizer_VerifyToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenizer_VerifyToken_Call) RunAndReturn(run func(string, domain.TokenType) (*domain.TokenClaims, error)) *MockTokenizer_VerifyToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenizer creates a new instance of MockTokenizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenizer {
	mock := &MockTokenizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
