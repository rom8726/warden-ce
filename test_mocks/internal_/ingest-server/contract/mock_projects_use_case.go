// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockcontract

import (
	context "context"

	domain "github.com/rom8726/warden/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockProjectsUseCase is an autogenerated mock type for the ProjectsUseCase type
type MockProjectsUseCase struct {
	mock.Mock
}

type MockProjectsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectsUseCase) EXPECT() *MockProjectsUseCase_Expecter {
	return &MockProjectsUseCase_Expecter{mock: &_m.Mock}
}

// ValidateProjectKey provides a mock function with given fields: ctx, projectID, key
func (_m *MockProjectsUseCase) ValidateProjectKey(ctx context.Context, projectID domain.ProjectID, key string) (bool, error) {
	ret := _m.Called(ctx, projectID, key)

	if len(ret) == 0 {
		panic("no return value specified for ValidateProjectKey")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) (bool, error)); ok {
		return rf(ctx, projectID, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) bool); ok {
		r0 = rf(ctx, projectID, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string) error); ok {
		r1 = rf(ctx, projectID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectsUseCase_ValidateProjectKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateProjectKey'
type MockProjectsUseCase_ValidateProjectKey_Call struct {
	*mock.Call
}

// ValidateProjectKey is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - key string
func (_e *MockProjectsUseCase_Expecter) ValidateProjectKey(ctx interface{}, projectID interface{}, key interface{}) *MockProjectsUseCase_ValidateProjectKey_Call {
	return &MockProjectsUseCase_ValidateProjectKey_Call{Call: _e.mock.On("ValidateProjectKey", ctx, projectID, key)}
}

func (_c *MockProjectsUseCase_ValidateProjectKey_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, key string)) *MockProjectsUseCase_ValidateProjectKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProjectID), args[2].(string))
	})
	return _c
}

func (_c *MockProjectsUseCase_ValidateProjectKey_Call) Return(_a0 bool, _a1 error) *MockProjectsUseCase_ValidateProjectKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectsUseCase_ValidateProjectKey_Call) RunAndReturn(run func(context.Context, domain.ProjectID, string) (bool, error)) *MockProjectsUseCase_ValidateProjectKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProjectsUseCase creates a new instance of MockProjectsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectsUseCase {
	mock := &MockProjectsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
