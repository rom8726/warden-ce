// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockkafka

import (
	sarama "github.com/IBM/sarama"
	mock "github.com/stretchr/testify/mock"
)

// MockConsumerGroupHandler is an autogenerated mock type for the ConsumerGroupHandler type
type MockConsumerGroupHandler struct {
	mock.Mock
}

type MockConsumerGroupHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumerGroupHandler) EXPECT() *MockConsumerGroupHandler_Expecter {
	return &MockConsumerGroupHandler_Expecter{mock: &_m.Mock}
}

// Cleanup provides a mock function with given fields: _a0
func (_m *MockConsumerGroupHandler) Cleanup(_a0 sarama.ConsumerGroupSession) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Cleanup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(sarama.ConsumerGroupSession) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsumerGroupHandler_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type MockConsumerGroupHandler_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
//   - _a0 sarama.ConsumerGroupSession
func (_e *MockConsumerGroupHandler_Expecter) Cleanup(_a0 interface{}) *MockConsumerGroupHandler_Cleanup_Call {
	return &MockConsumerGroupHandler_Cleanup_Call{Call: _e.mock.On("Cleanup", _a0)}
}

func (_c *MockConsumerGroupHandler_Cleanup_Call) Run(run func(_a0 sarama.ConsumerGroupSession)) *MockConsumerGroupHandler_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sarama.ConsumerGroupSession))
	})
	return _c
}

func (_c *MockConsumerGroupHandler_Cleanup_Call) Return(_a0 error) *MockConsumerGroupHandler_Cleanup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerGroupHandler_Cleanup_Call) RunAndReturn(run func(sarama.ConsumerGroupSession) error) *MockConsumerGroupHandler_Cleanup_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockConsumerGroupHandler) Close() {
	_m.Called()
}

// MockConsumerGroupHandler_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConsumerGroupHandler_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConsumerGroupHandler_Expecter) Close() *MockConsumerGroupHandler_Close_Call {
	return &MockConsumerGroupHandler_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConsumerGroupHandler_Close_Call) Run(run func()) *MockConsumerGroupHandler_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumerGroupHandler_Close_Call) Return() *MockConsumerGroupHandler_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumerGroupHandler_Close_Call) RunAndReturn(run func()) *MockConsumerGroupHandler_Close_Call {
	_c.Run(run)
	return _c
}

// ConsumeClaim provides a mock function with given fields: _a0, _a1
func (_m *MockConsumerGroupHandler) ConsumeClaim(_a0 sarama.ConsumerGroupSession, _a1 sarama.ConsumerGroupClaim) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ConsumeClaim")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(sarama.ConsumerGroupSession, sarama.ConsumerGroupClaim) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsumerGroupHandler_ConsumeClaim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConsumeClaim'
type MockConsumerGroupHandler_ConsumeClaim_Call struct {
	*mock.Call
}

// ConsumeClaim is a helper method to define mock.On call
//   - _a0 sarama.ConsumerGroupSession
//   - _a1 sarama.ConsumerGroupClaim
func (_e *MockConsumerGroupHandler_Expecter) ConsumeClaim(_a0 interface{}, _a1 interface{}) *MockConsumerGroupHandler_ConsumeClaim_Call {
	return &MockConsumerGroupHandler_ConsumeClaim_Call{Call: _e.mock.On("ConsumeClaim", _a0, _a1)}
}

func (_c *MockConsumerGroupHandler_ConsumeClaim_Call) Run(run func(_a0 sarama.ConsumerGroupSession, _a1 sarama.ConsumerGroupClaim)) *MockConsumerGroupHandler_ConsumeClaim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sarama.ConsumerGroupSession), args[1].(sarama.ConsumerGroupClaim))
	})
	return _c
}

func (_c *MockConsumerGroupHandler_ConsumeClaim_Call) Return(_a0 error) *MockConsumerGroupHandler_ConsumeClaim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerGroupHandler_ConsumeClaim_Call) RunAndReturn(run func(sarama.ConsumerGroupSession, sarama.ConsumerGroupClaim) error) *MockConsumerGroupHandler_ConsumeClaim_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with no fields
func (_m *MockConsumerGroupHandler) Reset() {
	_m.Called()
}

// MockConsumerGroupHandler_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockConsumerGroupHandler_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockConsumerGroupHandler_Expecter) Reset() *MockConsumerGroupHandler_Reset_Call {
	return &MockConsumerGroupHandler_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockConsumerGroupHandler_Reset_Call) Run(run func()) *MockConsumerGroupHandler_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumerGroupHandler_Reset_Call) Return() *MockConsumerGroupHandler_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumerGroupHandler_Reset_Call) RunAndReturn(run func()) *MockConsumerGroupHandler_Reset_Call {
	_c.Run(run)
	return _c
}

// Setup provides a mock function with given fields: _a0
func (_m *MockConsumerGroupHandler) Setup(_a0 sarama.ConsumerGroupSession) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(sarama.ConsumerGroupSession) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsumerGroupHandler_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type MockConsumerGroupHandler_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
//   - _a0 sarama.ConsumerGroupSession
func (_e *MockConsumerGroupHandler_Expecter) Setup(_a0 interface{}) *MockConsumerGroupHandler_Setup_Call {
	return &MockConsumerGroupHandler_Setup_Call{Call: _e.mock.On("Setup", _a0)}
}

func (_c *MockConsumerGroupHandler_Setup_Call) Run(run func(_a0 sarama.ConsumerGroupSession)) *MockConsumerGroupHandler_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sarama.ConsumerGroupSession))
	})
	return _c
}

func (_c *MockConsumerGroupHandler_Setup_Call) Return(_a0 error) *MockConsumerGroupHandler_Setup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerGroupHandler_Setup_Call) RunAndReturn(run func(sarama.ConsumerGroupSession) error) *MockConsumerGroupHandler_Setup_Call {
	_c.Call.Return(run)
	return _c
}

// WaitReady provides a mock function with no fields
func (_m *MockConsumerGroupHandler) WaitReady() {
	_m.Called()
}

// MockConsumerGroupHandler_WaitReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitReady'
type MockConsumerGroupHandler_WaitReady_Call struct {
	*mock.Call
}

// WaitReady is a helper method to define mock.On call
func (_e *MockConsumerGroupHandler_Expecter) WaitReady() *MockConsumerGroupHandler_WaitReady_Call {
	return &MockConsumerGroupHandler_WaitReady_Call{Call: _e.mock.On("WaitReady")}
}

func (_c *MockConsumerGroupHandler_WaitReady_Call) Run(run func()) *MockConsumerGroupHandler_WaitReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumerGroupHandler_WaitReady_Call) Return() *MockConsumerGroupHandler_WaitReady_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumerGroupHandler_WaitReady_Call) RunAndReturn(run func()) *MockConsumerGroupHandler_WaitReady_Call {
	_c.Run(run)
	return _c
}

// NewMockConsumerGroupHandler creates a new instance of MockConsumerGroupHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumerGroupHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumerGroupHandler {
	mock := &MockConsumerGroupHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
